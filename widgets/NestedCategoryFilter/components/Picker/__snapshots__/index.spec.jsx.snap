// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<NestedCategoryFilterPicker /> should accept user interaction when the categoryId is an empty string 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(CategoryPicker)
    categoryId=""
    label="Picker Label"
    onSelect={[MockFunction]}
  >
    <CategoryPicker
      categoryId=""
      fetchCategory={[Function]}
      label="Picker Label"
      onSelect={[MockFunction]}
      selectedId={null}
      subcategories={
        Array [
          Object {
            "childrenCount": 2,
            "id": "1",
            "isFetching": false,
            "name": "Category 1",
          },
          Object {
            "childrenCount": 0,
            "id": "2",
            "isFetching": false,
            "name": "Category 2",
          },
        ]
      }
    >
      <div
        aria-hidden={true}
        className="css-9v2ggq"
        onClick={[Function]}
      >
        <div
          className="css-r60y77"
        >
          Picker Label
        </div>
        <div
          className="css-1fe6blz"
        >
          common.please_choose
        </div>
      </div>
      <CategorySheet
        items={
          Array [
            Object {
              "childrenCount": 2,
              "id": "1",
              "isFetching": false,
              "name": "Category 1",
            },
            Object {
              "childrenCount": 0,
              "id": "2",
              "isFetching": false,
              "name": "Category 2",
            },
          ]
        }
        label="Picker Label"
        onClose={[Function]}
        onSelect={[Function]}
        open={true}
        selectedId={null}
      >
        <SheetDrawer
          isOpen={true}
          onClose={[Function]}
          title="Picker Label"
        >
          <Sheet
            animation={Object {}}
            backdrop={true}
            className={null}
            contentClassName={null}
            duration={300}
            isOpen={true}
            onClose={[Function]}
            onDidOpen={[Function]}
            onOpen={[Function]}
            title="Picker Label"
          >
            <section>
              <Drawer
                alwaysActive={false}
                animation={
                  Object {
                    "duration": 300,
                    "in": "css-32zjx4",
                    "out": "css-15ct02m",
                  }
                }
                className="css-ruonn8"
                isOpen={true}
                onClose={[Function]}
                onDidClose={[Function]}
                onDidOpen={[Function]}
                onOpen={[Function]}
              >
                <div
                  className="css-ruonn8 css-1rg7udn css-32zjx4"
                  onAnimationEnd={[Function]}
                  style={
                    Object {
                      "animationDuration": "300ms",
                    }
                  }
                >
                  <Header
                    onToggleClose={[Function]}
                    shadow={false}
                    title="Picker Label"
                  >
                    <Grid
                      className="css-1hncgty"
                      component="div"
                      wrap={false}
                    >
                      <div
                        className="css-1hncgty css-h7r55a"
                      >
                        <button
                          aria-label="common.close"
                          className="css-b3dcfs"
                          onClick={[Function]}
                          type="button"
                        >
                          <Ripple
                            className="css-ugy6xl"
                            color="#000"
                            disabled={false}
                            fill={false}
                            onClick={[Function]}
                            onComplete={[Function]}
                            overflow={false}
                            size={null}
                          >
                            <div
                              className="css-ugy6xl"
                              data-test-id="Ripple"
                              onClick={[Function]}
                              style={null}
                            >
                              <Cross
                                size={24}
                              >
                                <Icon
                                  className=""
                                  color={null}
                                  content="<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>"
                                  size={24}
                                  viewBox="0 0 24 24"
                                >
                                  <svg
                                    className="css-yys9hb "
                                    dangerouslySetInnerHTML={
                                      Object {
                                        "__html": "<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>",
                                      }
                                    }
                                    style={
                                      Object {
                                        "fill": null,
                                        "fontSize": 24,
                                      }
                                    }
                                    viewBox="0 0 24 24"
                                    xmlns="http://www.w3.org/2000/svg"
                                  />
                                </Icon>
                              </Cross>
                            </div>
                          </Ripple>
                        </button>
                        <GridItem
                          className="css-1mjy0de"
                          component="div"
                          grow={1}
                          role="heading"
                          shrink={1}
                        >
                          <div
                            className="css-1mjy0de css-1gs0ko2"
                            role="heading"
                          >
                            Picker Label
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                  </Header>
                  <div
                    className="css-1aon90l"
                    onScroll={[Function]}
                  >
                    <SheetList
                      className={null}
                      hasImages={false}
                      key=".0"
                      onClose={[Function]}
                      testId={null}
                    >
                      <List
                        className={null}
                        role="listbox"
                      >
                        <ul
                          className={null}
                          role="listbox"
                        >
                          <ListItem
                            className="css-10041rq css-171mywc"
                            isSelected={false}
                            key="child-0/.$1"
                            role={null}
                            tabIndex={0}
                          >
                            <li
                              className="css-1p5q8vq css-10041rq css-171mywc css-16gj3o1"
                              data-test-id="listItem"
                              role={null}
                            >
                              <div
                                className="css-1ckzvk7"
                                data-test-id={null}
                              >
                                <SheetItem
                                  item={
                                    Object {
                                      "childrenCount": 2,
                                      "id": "1",
                                      "isFetching": false,
                                      "name": "Category 1",
                                    }
                                  }
                                  key="1"
                                  onClick={[Function]}
                                  selected={false}
                                >
                                  <button
                                    className="css-1k50yg4"
                                    key="1"
                                    onClick={[Function]}
                                    type="button"
                                    value="1"
                                  >
                                    Category 1
                                  </button>
                                </SheetItem>
                              </div>
                            </li>
                          </ListItem>
                          <ListItem
                            className="css-10041rq css-171mywc"
                            isSelected={false}
                            key="child-1/.$2"
                            role={null}
                            tabIndex={0}
                          >
                            <li
                              className="css-1p5q8vq css-10041rq css-171mywc css-16gj3o1"
                              data-test-id="listItem"
                              role={null}
                            >
                              <div
                                className="css-1ckzvk7"
                                data-test-id={null}
                              >
                                <SheetItem
                                  item={
                                    Object {
                                      "childrenCount": 0,
                                      "id": "2",
                                      "isFetching": false,
                                      "name": "Category 2",
                                    }
                                  }
                                  key="2"
                                  onClick={[Function]}
                                  selected={false}
                                >
                                  <button
                                    className="css-1k50yg4"
                                    key="2"
                                    onClick={[Function]}
                                    type="button"
                                    value="2"
                                  >
                                    Category 2
                                  </button>
                                </SheetItem>
                              </div>
                            </li>
                          </ListItem>
                        </ul>
                      </List>
                    </SheetList>
                  </div>
                </div>
              </Drawer>
              <Backdrop
                className=""
                color="#000"
                duration={200}
                isVisible={true}
                level={4}
                onClick={[Function]}
                opacity={20}
              >
                <Transition
                  childrenStyles={
                    Object {
                      "appear": Object {
                        "opacity": 0.2,
                      },
                      "base": Object {
                        "background": "#000",
                        "opacity": 0,
                        "transition": "opacity 200ms ease-out",
                        "zIndex": 4,
                      },
                      "enter": Object {
                        "opacity": 0.2,
                      },
                      "leave": Object {
                        "opacity": 0,
                      },
                    }
                  }
                  component="div"
                >
                  <TransitionHooks
                    component="div"
                  >
                    <div>
                      <TransitionChild
                        childrenAppearStyle={
                          Object {
                            "opacity": 0.2,
                          }
                        }
                        childrenBaseStyle={
                          Object {
                            "background": "#000",
                            "opacity": 0,
                            "transition": "opacity 200ms ease-out",
                            "zIndex": 4,
                          }
                        }
                        childrenEnterStyle={
                          Object {
                            "opacity": 0.2,
                          }
                        }
                        childrenLeaveStyle={
                          Object {
                            "opacity": 0,
                          }
                        }
                        key=".$.0"
                      >
                        <div
                          aria-hidden={true}
                          className="css-hlk66h "
                          data-test-id="Backdrop"
                          onClick={[Function]}
                          style={
                            Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            }
                          }
                        />
                      </TransitionChild>
                    </div>
                  </TransitionHooks>
                </Transition>
              </Backdrop>
            </section>
          </Sheet>
        </SheetDrawer>
      </CategorySheet>
    </CategoryPicker>
  </Connect(CategoryPicker)>
</Provider>
`;

exports[`<NestedCategoryFilterPicker /> should handle user interaction as expected 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(CategoryPicker)
    categoryId="1"
    label="Picker Label"
    onSelect={[MockFunction]}
  >
    <CategoryPicker
      categoryId="1"
      fetchCategory={[Function]}
      label="Picker Label"
      onSelect={[MockFunction]}
      selectedId={null}
      subcategories={
        Array [
          Object {
            "childrenCount": 0,
            "id": "1-1",
            "isFetching": false,
            "name": "Category 1-1",
          },
          Object {
            "childrenCount": 1,
            "id": "1-2",
            "isFetching": false,
            "name": "Category 1-2",
          },
        ]
      }
    >
      <div
        aria-hidden={true}
        className="css-9v2ggq"
        onClick={[Function]}
      >
        <div
          className="css-r60y77"
        >
          Picker Label
        </div>
        <div
          className="css-1fe6blz"
        >
          common.please_choose
        </div>
      </div>
      <CategorySheet
        items={
          Array [
            Object {
              "childrenCount": 0,
              "id": "1-1",
              "isFetching": false,
              "name": "Category 1-1",
            },
            Object {
              "childrenCount": 1,
              "id": "1-2",
              "isFetching": false,
              "name": "Category 1-2",
            },
          ]
        }
        label="Picker Label"
        onClose={[Function]}
        onSelect={[Function]}
        open={true}
        selectedId={null}
      >
        <SheetDrawer
          isOpen={true}
          onClose={[Function]}
          title="Picker Label"
        >
          <Sheet
            animation={Object {}}
            backdrop={true}
            className={null}
            contentClassName={null}
            duration={300}
            isOpen={true}
            onClose={[Function]}
            onDidOpen={[Function]}
            onOpen={[Function]}
            title="Picker Label"
          >
            <section>
              <Drawer
                alwaysActive={false}
                animation={
                  Object {
                    "duration": 300,
                    "in": "css-32zjx4",
                    "out": "css-15ct02m",
                  }
                }
                className="css-ruonn8"
                isOpen={true}
                onClose={[Function]}
                onDidClose={[Function]}
                onDidOpen={[Function]}
                onOpen={[Function]}
              >
                <div
                  className="css-ruonn8 css-1rg7udn css-32zjx4"
                  onAnimationEnd={[Function]}
                  style={
                    Object {
                      "animationDuration": "300ms",
                    }
                  }
                >
                  <Header
                    onToggleClose={[Function]}
                    shadow={false}
                    title="Picker Label"
                  >
                    <Grid
                      className="css-1hncgty"
                      component="div"
                      wrap={false}
                    >
                      <div
                        className="css-1hncgty css-h7r55a"
                      >
                        <button
                          aria-label="common.close"
                          className="css-b3dcfs"
                          onClick={[Function]}
                          type="button"
                        >
                          <Ripple
                            className="css-ugy6xl"
                            color="#000"
                            disabled={false}
                            fill={false}
                            onClick={[Function]}
                            onComplete={[Function]}
                            overflow={false}
                            size={null}
                          >
                            <div
                              className="css-ugy6xl"
                              data-test-id="Ripple"
                              onClick={[Function]}
                              style={null}
                            >
                              <Cross
                                size={24}
                              >
                                <Icon
                                  className=""
                                  color={null}
                                  content="<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>"
                                  size={24}
                                  viewBox="0 0 24 24"
                                >
                                  <svg
                                    className="css-yys9hb "
                                    dangerouslySetInnerHTML={
                                      Object {
                                        "__html": "<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>",
                                      }
                                    }
                                    style={
                                      Object {
                                        "fill": null,
                                        "fontSize": 24,
                                      }
                                    }
                                    viewBox="0 0 24 24"
                                    xmlns="http://www.w3.org/2000/svg"
                                  />
                                </Icon>
                              </Cross>
                            </div>
                          </Ripple>
                        </button>
                        <GridItem
                          className="css-1mjy0de"
                          component="div"
                          grow={1}
                          role="heading"
                          shrink={1}
                        >
                          <div
                            className="css-1mjy0de css-1gs0ko2"
                            role="heading"
                          >
                            Picker Label
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                  </Header>
                  <div
                    className="css-1aon90l"
                    onScroll={[Function]}
                  >
                    <SheetList
                      className={null}
                      hasImages={false}
                      key=".0"
                      onClose={[Function]}
                      testId={null}
                    >
                      <List
                        className={null}
                        role="listbox"
                      >
                        <ul
                          className={null}
                          role="listbox"
                        >
                          <ListItem
                            className="css-10041rq css-171mywc"
                            isSelected={false}
                            key="child-0/.$1-1"
                            role={null}
                            tabIndex={0}
                          >
                            <li
                              className="css-1p5q8vq css-10041rq css-171mywc css-16gj3o1"
                              data-test-id="listItem"
                              role={null}
                            >
                              <div
                                className="css-1ckzvk7"
                                data-test-id={null}
                              >
                                <SheetItem
                                  item={
                                    Object {
                                      "childrenCount": 0,
                                      "id": "1-1",
                                      "isFetching": false,
                                      "name": "Category 1-1",
                                    }
                                  }
                                  key="1-1"
                                  onClick={[Function]}
                                  selected={false}
                                >
                                  <button
                                    className="css-1k50yg4"
                                    key="1-1"
                                    onClick={[Function]}
                                    type="button"
                                    value="1-1"
                                  >
                                    Category 1-1
                                  </button>
                                </SheetItem>
                              </div>
                            </li>
                          </ListItem>
                          <ListItem
                            className="css-10041rq css-171mywc"
                            isSelected={false}
                            key="child-1/.$1-2"
                            role={null}
                            tabIndex={0}
                          >
                            <li
                              className="css-1p5q8vq css-10041rq css-171mywc css-16gj3o1"
                              data-test-id="listItem"
                              role={null}
                            >
                              <div
                                className="css-1ckzvk7"
                                data-test-id={null}
                              >
                                <SheetItem
                                  item={
                                    Object {
                                      "childrenCount": 1,
                                      "id": "1-2",
                                      "isFetching": false,
                                      "name": "Category 1-2",
                                    }
                                  }
                                  key="1-2"
                                  onClick={[Function]}
                                  selected={false}
                                >
                                  <button
                                    className="css-1k50yg4"
                                    key="1-2"
                                    onClick={[Function]}
                                    type="button"
                                    value="1-2"
                                  >
                                    Category 1-2
                                  </button>
                                </SheetItem>
                              </div>
                            </li>
                          </ListItem>
                        </ul>
                      </List>
                    </SheetList>
                  </div>
                </div>
              </Drawer>
              <Backdrop
                className=""
                color="#000"
                duration={200}
                isVisible={true}
                level={4}
                onClick={[Function]}
                opacity={20}
              >
                <Transition
                  childrenStyles={
                    Object {
                      "appear": Object {
                        "opacity": 0.2,
                      },
                      "base": Object {
                        "background": "#000",
                        "opacity": 0,
                        "transition": "opacity 200ms ease-out",
                        "zIndex": 4,
                      },
                      "enter": Object {
                        "opacity": 0.2,
                      },
                      "leave": Object {
                        "opacity": 0,
                      },
                    }
                  }
                  component="div"
                >
                  <TransitionHooks
                    component="div"
                  >
                    <div>
                      <TransitionChild
                        childrenAppearStyle={
                          Object {
                            "opacity": 0.2,
                          }
                        }
                        childrenBaseStyle={
                          Object {
                            "background": "#000",
                            "opacity": 0,
                            "transition": "opacity 200ms ease-out",
                            "zIndex": 4,
                          }
                        }
                        childrenEnterStyle={
                          Object {
                            "opacity": 0.2,
                          }
                        }
                        childrenLeaveStyle={
                          Object {
                            "opacity": 0,
                          }
                        }
                        key=".$.0"
                      >
                        <div
                          aria-hidden={true}
                          className="css-hlk66h "
                          data-test-id="Backdrop"
                          onClick={[Function]}
                          style={
                            Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            }
                          }
                        />
                      </TransitionChild>
                    </div>
                  </TransitionHooks>
                </Transition>
              </Backdrop>
            </section>
          </Sheet>
        </SheetDrawer>
      </CategorySheet>
    </CategoryPicker>
  </Connect(CategoryPicker)>
</Provider>
`;

exports[`<NestedCategoryFilterPicker /> should handle user interaction as expected 2`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(CategoryPicker)
    categoryId="1"
    label="Picker Label"
    onSelect={
      [MockFunction] {
        "calls": Array [
          Array [
            "1",
            Object {
              "childrenCount": 1,
              "id": "1-2",
              "isFetching": false,
              "name": "Category 1-2",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
  >
    <CategoryPicker
      categoryId="1"
      fetchCategory={[Function]}
      label="Picker Label"
      onSelect={
        [MockFunction] {
          "calls": Array [
            Array [
              "1",
              Object {
                "childrenCount": 1,
                "id": "1-2",
                "isFetching": false,
                "name": "Category 1-2",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      selectedId={null}
      subcategories={
        Array [
          Object {
            "childrenCount": 0,
            "id": "1-1",
            "isFetching": false,
            "name": "Category 1-1",
          },
          Object {
            "childrenCount": 1,
            "id": "1-2",
            "isFetching": false,
            "name": "Category 1-2",
          },
        ]
      }
    >
      <div
        aria-hidden={true}
        className="css-9v2ggq"
        onClick={[Function]}
      >
        <div
          className="css-r60y77"
        >
          Picker Label
        </div>
        <div
          className="css-1fe6blz"
        >
          common.please_choose
        </div>
      </div>
      <CategorySheet
        items={
          Array [
            Object {
              "childrenCount": 0,
              "id": "1-1",
              "isFetching": false,
              "name": "Category 1-1",
            },
            Object {
              "childrenCount": 1,
              "id": "1-2",
              "isFetching": false,
              "name": "Category 1-2",
            },
          ]
        }
        label="Picker Label"
        onClose={[Function]}
        onSelect={[Function]}
        open={false}
        selectedId={null}
      >
        <SheetDrawer
          isOpen={false}
          onClose={[Function]}
          title="Picker Label"
        >
          <Sheet
            animation={Object {}}
            backdrop={true}
            className={null}
            contentClassName={null}
            duration={300}
            isOpen={false}
            onClose={[Function]}
            onDidOpen={[Function]}
            onOpen={[Function]}
            title="Picker Label"
          >
            <section>
              <Drawer
                alwaysActive={false}
                animation={
                  Object {
                    "duration": 300,
                    "in": "css-32zjx4",
                    "out": "css-15ct02m",
                  }
                }
                className="css-ruonn8"
                isOpen={false}
                onClose={[Function]}
                onDidClose={[Function]}
                onDidOpen={[Function]}
                onOpen={[Function]}
              >
                <div
                  className="css-ruonn8 css-1rg7udn css-15ct02m"
                  onAnimationEnd={[Function]}
                  style={
                    Object {
                      "animationDuration": "300ms",
                    }
                  }
                >
                  <Header
                    onToggleClose={[Function]}
                    shadow={false}
                    title="Picker Label"
                  >
                    <Grid
                      className="css-1hncgty"
                      component="div"
                      wrap={false}
                    >
                      <div
                        className="css-1hncgty css-h7r55a"
                      >
                        <button
                          aria-label="common.close"
                          className="css-b3dcfs"
                          onClick={[Function]}
                          type="button"
                        >
                          <Ripple
                            className="css-ugy6xl"
                            color="#000"
                            disabled={false}
                            fill={false}
                            onClick={[Function]}
                            onComplete={[Function]}
                            overflow={false}
                            size={null}
                          >
                            <div
                              className="css-ugy6xl"
                              data-test-id="Ripple"
                              onClick={[Function]}
                              style={null}
                            >
                              <Cross
                                size={24}
                              >
                                <Icon
                                  className=""
                                  color={null}
                                  content="<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>"
                                  size={24}
                                  viewBox="0 0 24 24"
                                >
                                  <svg
                                    className="css-yys9hb "
                                    dangerouslySetInnerHTML={
                                      Object {
                                        "__html": "<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>",
                                      }
                                    }
                                    style={
                                      Object {
                                        "fill": null,
                                        "fontSize": 24,
                                      }
                                    }
                                    viewBox="0 0 24 24"
                                    xmlns="http://www.w3.org/2000/svg"
                                  />
                                </Icon>
                              </Cross>
                            </div>
                          </Ripple>
                        </button>
                        <GridItem
                          className="css-1mjy0de"
                          component="div"
                          grow={1}
                          role="heading"
                          shrink={1}
                        >
                          <div
                            className="css-1mjy0de css-1gs0ko2"
                            role="heading"
                          >
                            Picker Label
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                  </Header>
                  <div
                    className="css-1aon90l"
                    onScroll={[Function]}
                  >
                    <SheetList
                      className={null}
                      hasImages={false}
                      key=".0"
                      onClose={[Function]}
                      testId={null}
                    >
                      <List
                        className={null}
                        role="listbox"
                      >
                        <ul
                          className={null}
                          role="listbox"
                        >
                          <ListItem
                            className="css-10041rq css-171mywc"
                            isSelected={false}
                            key="child-0/.$1-1"
                            role={null}
                            tabIndex={0}
                          >
                            <li
                              className="css-1p5q8vq css-10041rq css-171mywc css-16gj3o1"
                              data-test-id="listItem"
                              role={null}
                            >
                              <div
                                className="css-1ckzvk7"
                                data-test-id={null}
                              >
                                <SheetItem
                                  item={
                                    Object {
                                      "childrenCount": 0,
                                      "id": "1-1",
                                      "isFetching": false,
                                      "name": "Category 1-1",
                                    }
                                  }
                                  key="1-1"
                                  onClick={[Function]}
                                  selected={false}
                                >
                                  <button
                                    className="css-1k50yg4"
                                    key="1-1"
                                    onClick={[Function]}
                                    type="button"
                                    value="1-1"
                                  >
                                    Category 1-1
                                  </button>
                                </SheetItem>
                              </div>
                            </li>
                          </ListItem>
                          <ListItem
                            className="css-10041rq css-171mywc"
                            isSelected={false}
                            key="child-1/.$1-2"
                            role={null}
                            tabIndex={0}
                          >
                            <li
                              className="css-1p5q8vq css-10041rq css-171mywc css-16gj3o1"
                              data-test-id="listItem"
                              role={null}
                            >
                              <div
                                className="css-1ckzvk7"
                                data-test-id={null}
                              >
                                <SheetItem
                                  item={
                                    Object {
                                      "childrenCount": 1,
                                      "id": "1-2",
                                      "isFetching": false,
                                      "name": "Category 1-2",
                                    }
                                  }
                                  key="1-2"
                                  onClick={[Function]}
                                  selected={false}
                                >
                                  <button
                                    className="css-1k50yg4"
                                    key="1-2"
                                    onClick={[Function]}
                                    type="button"
                                    value="1-2"
                                  >
                                    Category 1-2
                                  </button>
                                </SheetItem>
                              </div>
                            </li>
                          </ListItem>
                        </ul>
                      </List>
                    </SheetList>
                  </div>
                </div>
              </Drawer>
              <Backdrop
                className=""
                color="#000"
                duration={200}
                isVisible={false}
                level={4}
                onClick={[Function]}
                opacity={20}
              >
                <Transition
                  childrenStyles={
                    Object {
                      "appear": Object {
                        "opacity": 0.2,
                      },
                      "base": Object {
                        "background": "#000",
                        "opacity": 0,
                        "transition": "opacity 200ms ease-out",
                        "zIndex": 4,
                      },
                      "enter": Object {
                        "opacity": 0.2,
                      },
                      "leave": Object {
                        "opacity": 0,
                      },
                    }
                  }
                  component="div"
                >
                  <TransitionHooks
                    component="div"
                  >
                    <div>
                      <TransitionChild
                        childrenAppearStyle={
                          Object {
                            "opacity": 0.2,
                          }
                        }
                        childrenBaseStyle={
                          Object {
                            "background": "#000",
                            "opacity": 0,
                            "transition": "opacity 200ms ease-out",
                            "zIndex": 4,
                          }
                        }
                        childrenEnterStyle={
                          Object {
                            "opacity": 0.2,
                          }
                        }
                        childrenLeaveStyle={
                          Object {
                            "opacity": 0,
                          }
                        }
                        key=".$.0"
                      >
                        <div
                          aria-hidden={true}
                          className="css-hlk66h "
                          data-test-id="Backdrop"
                          onClick={[Function]}
                          style={
                            Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            }
                          }
                        />
                      </TransitionChild>
                    </div>
                  </TransitionHooks>
                </Transition>
              </Backdrop>
            </section>
          </Sheet>
        </SheetDrawer>
      </CategorySheet>
    </CategoryPicker>
  </Connect(CategoryPicker)>
</Provider>
`;

exports[`<NestedCategoryFilterPicker /> should highlight the preselected subcategory within the sheet  1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(CategoryPicker)
    categoryId="1"
    label="Picker Label"
    onSelect={[MockFunction]}
    selectedId="1-1"
  >
    <CategoryPicker
      categoryId="1"
      fetchCategory={[Function]}
      label="Picker Label"
      onSelect={[MockFunction]}
      selectedId="1-1"
      subcategories={
        Array [
          Object {
            "childrenCount": 0,
            "id": "1-1",
            "isFetching": false,
            "name": "Category 1-1",
          },
          Object {
            "childrenCount": 1,
            "id": "1-2",
            "isFetching": false,
            "name": "Category 1-2",
          },
        ]
      }
    >
      <div
        aria-hidden={true}
        className="css-9v2ggq"
        onClick={[Function]}
      >
        <div
          className="css-r60y77"
        >
          Picker Label
        </div>
        <div
          className="css-1fe6blz"
        >
          Category 1-1
        </div>
      </div>
      <CategorySheet
        items={
          Array [
            Object {
              "childrenCount": 0,
              "id": "1-1",
              "isFetching": false,
              "name": "Category 1-1",
            },
            Object {
              "childrenCount": 1,
              "id": "1-2",
              "isFetching": false,
              "name": "Category 1-2",
            },
          ]
        }
        label="Picker Label"
        onClose={[Function]}
        onSelect={[Function]}
        open={true}
        selectedId="1-1"
      >
        <SheetDrawer
          isOpen={true}
          onClose={[Function]}
          title="Picker Label"
        >
          <Sheet
            animation={Object {}}
            backdrop={true}
            className={null}
            contentClassName={null}
            duration={300}
            isOpen={true}
            onClose={[Function]}
            onDidOpen={[Function]}
            onOpen={[Function]}
            title="Picker Label"
          >
            <section>
              <Drawer
                alwaysActive={false}
                animation={
                  Object {
                    "duration": 300,
                    "in": "css-32zjx4",
                    "out": "css-15ct02m",
                  }
                }
                className="css-ruonn8"
                isOpen={true}
                onClose={[Function]}
                onDidClose={[Function]}
                onDidOpen={[Function]}
                onOpen={[Function]}
              >
                <div
                  className="css-ruonn8 css-1rg7udn css-32zjx4"
                  onAnimationEnd={[Function]}
                  style={
                    Object {
                      "animationDuration": "300ms",
                    }
                  }
                >
                  <Header
                    onToggleClose={[Function]}
                    shadow={false}
                    title="Picker Label"
                  >
                    <Grid
                      className="css-1hncgty"
                      component="div"
                      wrap={false}
                    >
                      <div
                        className="css-1hncgty css-h7r55a"
                      >
                        <button
                          aria-label="common.close"
                          className="css-b3dcfs"
                          onClick={[Function]}
                          type="button"
                        >
                          <Ripple
                            className="css-ugy6xl"
                            color="#000"
                            disabled={false}
                            fill={false}
                            onClick={[Function]}
                            onComplete={[Function]}
                            overflow={false}
                            size={null}
                          >
                            <div
                              className="css-ugy6xl"
                              data-test-id="Ripple"
                              onClick={[Function]}
                              style={null}
                            >
                              <Cross
                                size={24}
                              >
                                <Icon
                                  className=""
                                  color={null}
                                  content="<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>"
                                  size={24}
                                  viewBox="0 0 24 24"
                                >
                                  <svg
                                    className="css-yys9hb "
                                    dangerouslySetInnerHTML={
                                      Object {
                                        "__html": "<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>",
                                      }
                                    }
                                    style={
                                      Object {
                                        "fill": null,
                                        "fontSize": 24,
                                      }
                                    }
                                    viewBox="0 0 24 24"
                                    xmlns="http://www.w3.org/2000/svg"
                                  />
                                </Icon>
                              </Cross>
                            </div>
                          </Ripple>
                        </button>
                        <GridItem
                          className="css-1mjy0de"
                          component="div"
                          grow={1}
                          role="heading"
                          shrink={1}
                        >
                          <div
                            className="css-1mjy0de css-1gs0ko2"
                            role="heading"
                          >
                            Picker Label
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                  </Header>
                  <div
                    className="css-1aon90l"
                    onScroll={[Function]}
                  >
                    <SheetList
                      className={null}
                      hasImages={false}
                      key=".0"
                      onClose={[Function]}
                      testId={null}
                    >
                      <List
                        className={null}
                        role="listbox"
                      >
                        <ul
                          className={null}
                          role="listbox"
                        >
                          <ListItem
                            className="css-10041rq css-171mywc"
                            isSelected={false}
                            key="child-0/.$1-1"
                            role={null}
                            tabIndex={0}
                          >
                            <li
                              className="css-1p5q8vq css-10041rq css-171mywc css-16gj3o1"
                              data-test-id="listItem"
                              role={null}
                            >
                              <div
                                className="css-1ckzvk7"
                                data-test-id={null}
                              >
                                <SheetItem
                                  item={
                                    Object {
                                      "childrenCount": 0,
                                      "id": "1-1",
                                      "isFetching": false,
                                      "name": "Category 1-1",
                                    }
                                  }
                                  key="1-1"
                                  onClick={[Function]}
                                  selected={true}
                                >
                                  <button
                                    className="css-18zobq6"
                                    key="1-1"
                                    onClick={[Function]}
                                    type="button"
                                    value="1-1"
                                  >
                                    Category 1-1
                                  </button>
                                </SheetItem>
                              </div>
                            </li>
                          </ListItem>
                          <ListItem
                            className="css-10041rq css-171mywc"
                            isSelected={false}
                            key="child-1/.$1-2"
                            role={null}
                            tabIndex={0}
                          >
                            <li
                              className="css-1p5q8vq css-10041rq css-171mywc css-16gj3o1"
                              data-test-id="listItem"
                              role={null}
                            >
                              <div
                                className="css-1ckzvk7"
                                data-test-id={null}
                              >
                                <SheetItem
                                  item={
                                    Object {
                                      "childrenCount": 1,
                                      "id": "1-2",
                                      "isFetching": false,
                                      "name": "Category 1-2",
                                    }
                                  }
                                  key="1-2"
                                  onClick={[Function]}
                                  selected={false}
                                >
                                  <button
                                    className="css-1k50yg4"
                                    key="1-2"
                                    onClick={[Function]}
                                    type="button"
                                    value="1-2"
                                  >
                                    Category 1-2
                                  </button>
                                </SheetItem>
                              </div>
                            </li>
                          </ListItem>
                        </ul>
                      </List>
                    </SheetList>
                  </div>
                </div>
              </Drawer>
              <Backdrop
                className=""
                color="#000"
                duration={200}
                isVisible={true}
                level={4}
                onClick={[Function]}
                opacity={20}
              >
                <Transition
                  childrenStyles={
                    Object {
                      "appear": Object {
                        "opacity": 0.2,
                      },
                      "base": Object {
                        "background": "#000",
                        "opacity": 0,
                        "transition": "opacity 200ms ease-out",
                        "zIndex": 4,
                      },
                      "enter": Object {
                        "opacity": 0.2,
                      },
                      "leave": Object {
                        "opacity": 0,
                      },
                    }
                  }
                  component="div"
                >
                  <TransitionHooks
                    component="div"
                  >
                    <div>
                      <TransitionChild
                        childrenAppearStyle={
                          Object {
                            "opacity": 0.2,
                          }
                        }
                        childrenBaseStyle={
                          Object {
                            "background": "#000",
                            "opacity": 0,
                            "transition": "opacity 200ms ease-out",
                            "zIndex": 4,
                          }
                        }
                        childrenEnterStyle={
                          Object {
                            "opacity": 0.2,
                          }
                        }
                        childrenLeaveStyle={
                          Object {
                            "opacity": 0,
                          }
                        }
                        key=".$.0"
                      >
                        <div
                          aria-hidden={true}
                          className="css-hlk66h "
                          data-test-id="Backdrop"
                          onClick={[Function]}
                          style={
                            Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            }
                          }
                        />
                      </TransitionChild>
                    </div>
                  </TransitionHooks>
                </Transition>
              </Backdrop>
            </section>
          </Sheet>
        </SheetDrawer>
      </CategorySheet>
    </CategoryPicker>
  </Connect(CategoryPicker)>
</Provider>
`;

exports[`<NestedCategoryFilterPicker /> should not accept user interaction when no categoryId was passed 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(CategoryPicker)
    label="Picker Label"
    onSelect={[MockFunction]}
  >
    <CategoryPicker
      categoryId={null}
      fetchCategory={[Function]}
      label="Picker Label"
      onSelect={[MockFunction]}
      selectedId={null}
      subcategories={
        Array [
          Object {
            "childrenCount": 2,
            "id": "1",
            "isFetching": false,
            "name": "Category 1",
          },
          Object {
            "childrenCount": 0,
            "id": "2",
            "isFetching": false,
            "name": "Category 2",
          },
        ]
      }
    >
      <div
        aria-hidden={true}
        className="css-9v2ggq css-1fekhao"
        onClick={[Function]}
      >
        <div
          className="css-r60y77"
        >
          Picker Label
        </div>
        <div
          className="css-1fe6blz"
        >
          common.please_choose
        </div>
      </div>
      <CategorySheet
        items={
          Array [
            Object {
              "childrenCount": 2,
              "id": "1",
              "isFetching": false,
              "name": "Category 1",
            },
            Object {
              "childrenCount": 0,
              "id": "2",
              "isFetching": false,
              "name": "Category 2",
            },
          ]
        }
        label="Picker Label"
        onClose={[Function]}
        onSelect={[Function]}
        open={false}
        selectedId={null}
      >
        <SheetDrawer
          isOpen={false}
          onClose={[Function]}
          title="Picker Label"
        >
          <Sheet
            animation={Object {}}
            backdrop={true}
            className={null}
            contentClassName={null}
            duration={300}
            isOpen={false}
            onClose={[Function]}
            onDidOpen={[Function]}
            onOpen={[Function]}
            title="Picker Label"
          >
            <section>
              <Drawer
                alwaysActive={false}
                animation={
                  Object {
                    "duration": 300,
                    "in": "css-32zjx4",
                    "out": "css-15ct02m",
                  }
                }
                className="css-ruonn8"
                isOpen={false}
                onClose={[Function]}
                onDidClose={[Function]}
                onDidOpen={[Function]}
                onOpen={[Function]}
              />
              <Backdrop
                className=""
                color="#000"
                duration={200}
                isVisible={false}
                level={4}
                onClick={[Function]}
                opacity={20}
              >
                <Transition
                  childrenStyles={
                    Object {
                      "appear": Object {
                        "opacity": 0.2,
                      },
                      "base": Object {
                        "background": "#000",
                        "opacity": 0,
                        "transition": "opacity 200ms ease-out",
                        "zIndex": 4,
                      },
                      "enter": Object {
                        "opacity": 0.2,
                      },
                      "leave": Object {
                        "opacity": 0,
                      },
                    }
                  }
                  component="div"
                >
                  <TransitionHooks
                    component="div"
                  >
                    <div />
                  </TransitionHooks>
                </Transition>
              </Backdrop>
            </section>
          </Sheet>
        </SheetDrawer>
      </CategorySheet>
    </CategoryPicker>
  </Connect(CategoryPicker)>
</Provider>
`;

exports[`<NestedCategoryFilterPicker /> should render the picker with no initial category selection 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(CategoryPicker)
    categoryId="1"
    label="Picker Label"
    onSelect={[MockFunction]}
  >
    <CategoryPicker
      categoryId="1"
      fetchCategory={[Function]}
      label="Picker Label"
      onSelect={[MockFunction]}
      selectedId={null}
      subcategories={
        Array [
          Object {
            "childrenCount": 0,
            "id": "1-1",
            "isFetching": false,
            "name": "Category 1-1",
          },
          Object {
            "childrenCount": 1,
            "id": "1-2",
            "isFetching": false,
            "name": "Category 1-2",
          },
        ]
      }
    >
      <div
        aria-hidden={true}
        className="css-9v2ggq"
        onClick={[Function]}
      >
        <div
          className="css-r60y77"
        >
          Picker Label
        </div>
        <div
          className="css-1fe6blz"
        >
          common.please_choose
        </div>
      </div>
      <CategorySheet
        items={
          Array [
            Object {
              "childrenCount": 0,
              "id": "1-1",
              "isFetching": false,
              "name": "Category 1-1",
            },
            Object {
              "childrenCount": 1,
              "id": "1-2",
              "isFetching": false,
              "name": "Category 1-2",
            },
          ]
        }
        label="Picker Label"
        onClose={[Function]}
        onSelect={[Function]}
        open={false}
        selectedId={null}
      >
        <SheetDrawer
          isOpen={false}
          onClose={[Function]}
          title="Picker Label"
        >
          <Sheet
            animation={Object {}}
            backdrop={true}
            className={null}
            contentClassName={null}
            duration={300}
            isOpen={false}
            onClose={[Function]}
            onDidOpen={[Function]}
            onOpen={[Function]}
            title="Picker Label"
          >
            <section>
              <Drawer
                alwaysActive={false}
                animation={
                  Object {
                    "duration": 300,
                    "in": "css-32zjx4",
                    "out": "css-15ct02m",
                  }
                }
                className="css-ruonn8"
                isOpen={false}
                onClose={[Function]}
                onDidClose={[Function]}
                onDidOpen={[Function]}
                onOpen={[Function]}
              />
              <Backdrop
                className=""
                color="#000"
                duration={200}
                isVisible={false}
                level={4}
                onClick={[Function]}
                opacity={20}
              >
                <Transition
                  childrenStyles={
                    Object {
                      "appear": Object {
                        "opacity": 0.2,
                      },
                      "base": Object {
                        "background": "#000",
                        "opacity": 0,
                        "transition": "opacity 200ms ease-out",
                        "zIndex": 4,
                      },
                      "enter": Object {
                        "opacity": 0.2,
                      },
                      "leave": Object {
                        "opacity": 0,
                      },
                    }
                  }
                  component="div"
                >
                  <TransitionHooks
                    component="div"
                  >
                    <div />
                  </TransitionHooks>
                </Transition>
              </Backdrop>
            </section>
          </Sheet>
        </SheetDrawer>
      </CategorySheet>
    </CategoryPicker>
  </Connect(CategoryPicker)>
</Provider>
`;

exports[`<NestedCategoryFilterPicker /> should render the picker without a label 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(CategoryPicker)
    categoryId="1"
    label=""
    onSelect={[MockFunction]}
  >
    <CategoryPicker
      categoryId="1"
      fetchCategory={[Function]}
      label=""
      onSelect={[MockFunction]}
      selectedId={null}
      subcategories={
        Array [
          Object {
            "childrenCount": 0,
            "id": "1-1",
            "isFetching": false,
            "name": "Category 1-1",
          },
          Object {
            "childrenCount": 1,
            "id": "1-2",
            "isFetching": false,
            "name": "Category 1-2",
          },
        ]
      }
    >
      <div
        aria-hidden={true}
        className="css-9v2ggq"
        onClick={[Function]}
      >
        <div
          className="css-1fe6blz"
        >
          common.please_choose
        </div>
      </div>
      <CategorySheet
        items={
          Array [
            Object {
              "childrenCount": 0,
              "id": "1-1",
              "isFetching": false,
              "name": "Category 1-1",
            },
            Object {
              "childrenCount": 1,
              "id": "1-2",
              "isFetching": false,
              "name": "Category 1-2",
            },
          ]
        }
        label=""
        onClose={[Function]}
        onSelect={[Function]}
        open={false}
        selectedId={null}
      >
        <SheetDrawer
          isOpen={false}
          onClose={[Function]}
          title=""
        >
          <Sheet
            animation={Object {}}
            backdrop={true}
            className={null}
            contentClassName={null}
            duration={300}
            isOpen={false}
            onClose={[Function]}
            onDidOpen={[Function]}
            onOpen={[Function]}
            title=""
          >
            <section>
              <Drawer
                alwaysActive={false}
                animation={
                  Object {
                    "duration": 300,
                    "in": "css-32zjx4",
                    "out": "css-15ct02m",
                  }
                }
                className="css-ruonn8"
                isOpen={false}
                onClose={[Function]}
                onDidClose={[Function]}
                onDidOpen={[Function]}
                onOpen={[Function]}
              />
              <Backdrop
                className=""
                color="#000"
                duration={200}
                isVisible={false}
                level={4}
                onClick={[Function]}
                opacity={20}
              >
                <Transition
                  childrenStyles={
                    Object {
                      "appear": Object {
                        "opacity": 0.2,
                      },
                      "base": Object {
                        "background": "#000",
                        "opacity": 0,
                        "transition": "opacity 200ms ease-out",
                        "zIndex": 4,
                      },
                      "enter": Object {
                        "opacity": 0.2,
                      },
                      "leave": Object {
                        "opacity": 0,
                      },
                    }
                  }
                  component="div"
                >
                  <TransitionHooks
                    component="div"
                  >
                    <div />
                  </TransitionHooks>
                </Transition>
              </Backdrop>
            </section>
          </Sheet>
        </SheetDrawer>
      </CategorySheet>
    </CategoryPicker>
  </Connect(CategoryPicker)>
</Provider>
`;
