// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<NestedCategoryFilterWidget /> should render the widget for a category which is not the root category 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <NestedCategoryFilter
    id="widget-id"
    persistedState={null}
    settings={
      Object {
        "categoryNumber": "1",
        "headline": "Widget Headline",
        "label_1": "Label One",
        "label_2": "Label Two",
        "label_3": "",
        "label_4": "",
        "limit": "4",
      }
    }
  >
    <div
      className="css-13nlt1e"
    >
      <Headline
        text="Widget Headline"
      >
        <h3
          className="css-137piww"
        >
          Widget Headline
        </h3>
      </Headline>
      <div>
        <Connect(CategoryPicker)
          categoryId="1"
          key="1"
          label="Label One"
          onSelect={[Function]}
          selectedId={null}
        >
          <CategoryPicker
            categoryId="1"
            fetchCategory={[Function]}
            label="Label One"
            onSelect={[Function]}
            selectedId={null}
            subcategories={
              Array [
                Object {
                  "childrenCount": 0,
                  "id": "1-1",
                  "isFetching": false,
                  "name": "Category 1-1",
                },
                Object {
                  "childrenCount": 1,
                  "id": "1-2",
                  "isFetching": false,
                  "name": "Category 1-2",
                },
              ]
            }
          >
            <div
              aria-hidden={true}
              className="css-1xsdpry"
              onClick={[Function]}
            >
              <div
                className="css-r60y77"
              >
                Label One
              </div>
              <div
                className="css-1fe6blz"
              >
                common.please_choose
              </div>
            </div>
            <CategorySheet
              items={
                Array [
                  Object {
                    "childrenCount": 0,
                    "id": "1-1",
                    "isFetching": false,
                    "name": "Category 1-1",
                  },
                  Object {
                    "childrenCount": 1,
                    "id": "1-2",
                    "isFetching": false,
                    "name": "Category 1-2",
                  },
                ]
              }
              label="Label One"
              onClose={[Function]}
              onSelect={[Function]}
              open={false}
              selectedId={null}
            >
              <SheetDrawer
                isOpen={false}
                onClose={[Function]}
                title="Label One"
              >
                <Sheet
                  allowClose={true}
                  animation={Object {}}
                  backdrop={true}
                  className={null}
                  contentClassName={null}
                  duration={300}
                  isOpen={false}
                  onClose={[Function]}
                  onDidClose={[Function]}
                  onDidOpen={[Function]}
                  onOpen={[Function]}
                  title="Label One"
                >
                  <section
                    className={null}
                  >
                    <Drawer
                      alwaysActive={false}
                      animation={
                        Object {
                          "duration": 300,
                          "in": "css-1ldjh2f",
                          "out": "css-171mdnt",
                        }
                      }
                      className="css-1d4fqwq"
                      isOpen={false}
                      onClose={[Function]}
                      onDidClose={[Function]}
                      onDidOpen={[Function]}
                      onOpen={[Function]}
                    />
                    <Backdrop
                      className=""
                      color="#000"
                      duration={200}
                      isVisible={false}
                      level={4}
                      lockBodyScroll={true}
                      onClick={[Function]}
                      opacity={20}
                    >
                      <Transition
                        childrenStyles={
                          Object {
                            "appear": Object {
                              "opacity": 0.2,
                            },
                            "base": Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            },
                            "enter": Object {
                              "opacity": 0.2,
                            },
                            "leave": Object {
                              "opacity": 0,
                            },
                          }
                        }
                        component="div"
                      >
                        <TransitionHooks
                          component="div"
                        >
                          <div />
                        </TransitionHooks>
                      </Transition>
                    </Backdrop>
                  </section>
                </Sheet>
              </SheetDrawer>
            </CategorySheet>
          </CategoryPicker>
        </Connect(CategoryPicker)>
      </div>
      <div
        className="css-k4qf09"
      >
        <Connect(ButtonLink)
          className="css-63oe3q"
          disabled={true}
          flat={false}
          href="/category/6e756c6c"
        >
          <ButtonLink
            className="css-63oe3q"
            disabled={true}
            flat={false}
            href="/category/6e756c6c"
            navigate={[Function]}
            noGap={false}
          >
            <ActionButton
              className="css-63oe3q"
              disabled={true}
              flat={false}
              loading={false}
              noGap={false}
              onClick={[Function]}
              rippleClassName=""
              rippleSize={null}
              testId={null}
              type="secondary"
              wrapContent={true}
            >
              <div
                className="css-omcrdt"
                data-test-id={null}
              >
                <RippleButton
                  className="css-63oe3q"
                  disabled={true}
                  flat={false}
                  onClick={[Function]}
                  rippleClassName=""
                  rippleSize={null}
                  testId="Button"
                  type="secondary"
                  wrapContent={true}
                >
                  <Button
                    className="css-63oe3q"
                    disabled={true}
                    flat={false}
                    onClick={[Function]}
                    testId="Button"
                    type="secondary"
                    wrapContent={true}
                  >
                    <Button
                      className="css-172ttat css-63oe3q"
                      disabled={true}
                      onClick={[Function]}
                      testId="Button"
                    >
                      <button
                        className="css-172ttat css-63oe3q css-1rn65c0"
                        data-test-id="Button"
                        disabled={true}
                        onClick={null}
                      >
                        <div
                          className="css-kwqjom"
                        >
                          <Translate
                            className={null}
                            params={Object {}}
                            role={null}
                            string="common.show_products"
                            transform={null}
                          >
                            <span
                              className={null}
                              role={null}
                            >
                              common.show_products
                            </span>
                          </Translate>
                        </div>
                      </button>
                    </Button>
                  </Button>
                </RippleButton>
              </div>
            </ActionButton>
          </ButtonLink>
        </Connect(ButtonLink)>
      </div>
    </div>
  </NestedCategoryFilter>
</Provider>
`;

exports[`<NestedCategoryFilterWidget /> should render the widget for a category which is not the root category 2`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <NestedCategoryFilter
    id="widget-id"
    persistedState={null}
    settings={
      Object {
        "categoryNumber": "1",
        "headline": "Widget Headline",
        "label_1": "Label One",
        "label_2": "Label Two",
        "label_3": "",
        "label_4": "",
        "limit": "4",
      }
    }
  >
    <div
      className="css-13nlt1e"
    >
      <Headline
        text="Widget Headline"
      >
        <h3
          className="css-137piww"
        >
          Widget Headline
        </h3>
      </Headline>
      <div>
        <Connect(CategoryPicker)
          categoryId="1"
          key="1"
          label="Label One"
          onSelect={[Function]}
          selectedId="1-1"
        >
          <CategoryPicker
            categoryId="1"
            fetchCategory={[Function]}
            label="Label One"
            onSelect={[Function]}
            selectedId="1-1"
            subcategories={
              Array [
                Object {
                  "childrenCount": 0,
                  "id": "1-1",
                  "isFetching": false,
                  "name": "Category 1-1",
                },
                Object {
                  "childrenCount": 1,
                  "id": "1-2",
                  "isFetching": false,
                  "name": "Category 1-2",
                },
              ]
            }
          >
            <div
              aria-hidden={true}
              className="css-1xsdpry"
              onClick={[Function]}
            >
              <div
                className="css-r60y77"
              >
                Label One
              </div>
              <div
                className="css-1fe6blz"
              >
                Category 1-1
              </div>
            </div>
            <CategorySheet
              items={
                Array [
                  Object {
                    "childrenCount": 0,
                    "id": "1-1",
                    "isFetching": false,
                    "name": "Category 1-1",
                  },
                  Object {
                    "childrenCount": 1,
                    "id": "1-2",
                    "isFetching": false,
                    "name": "Category 1-2",
                  },
                ]
              }
              label="Label One"
              onClose={[Function]}
              onSelect={[Function]}
              open={false}
              selectedId="1-1"
            >
              <SheetDrawer
                isOpen={false}
                onClose={[Function]}
                title="Label One"
              >
                <Sheet
                  allowClose={true}
                  animation={Object {}}
                  backdrop={true}
                  className={null}
                  contentClassName={null}
                  duration={300}
                  isOpen={false}
                  onClose={[Function]}
                  onDidClose={[Function]}
                  onDidOpen={[Function]}
                  onOpen={[Function]}
                  title="Label One"
                >
                  <section
                    className={null}
                  >
                    <Drawer
                      alwaysActive={false}
                      animation={
                        Object {
                          "duration": 300,
                          "in": "css-1ldjh2f",
                          "out": "css-171mdnt",
                        }
                      }
                      className="css-1d4fqwq"
                      isOpen={false}
                      onClose={[Function]}
                      onDidClose={[Function]}
                      onDidOpen={[Function]}
                      onOpen={[Function]}
                    >
                      <div
                        className="css-1d4fqwq css-1rg7udn css-171mdnt"
                        onAnimationEnd={[Function]}
                        style={
                          Object {
                            "animationDuration": "300ms",
                          }
                        }
                      >
                        <Header
                          allowClose={true}
                          onToggleClose={[Function]}
                          shadow={false}
                          title="Label One"
                        >
                          <Grid
                            className="css-1hncgty"
                            component="div"
                            wrap={false}
                          >
                            <div
                              className="css-1hncgty css-h7r55a"
                            >
                              <button
                                aria-label="common.close"
                                className="css-r4gt00"
                                onClick={[Function]}
                                type="button"
                              >
                                <Ripple
                                  className="css-ugy6xl"
                                  color="#000"
                                  disabled={false}
                                  fill={false}
                                  onClick={[Function]}
                                  onComplete={[Function]}
                                  overflow={false}
                                  size={null}
                                >
                                  <div
                                    className="css-ugy6xl"
                                    data-test-id="Ripple"
                                    onClick={[Function]}
                                    style={null}
                                  >
                                    <Cross
                                      size={24}
                                    >
                                      <Icon
                                        className=""
                                        color={null}
                                        content="<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>"
                                        size={24}
                                        viewBox="0 0 24 24"
                                      >
                                        <svg
                                          className="css-yys9hb "
                                          dangerouslySetInnerHTML={
                                            Object {
                                              "__html": "<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>",
                                            }
                                          }
                                          style={
                                            Object {
                                              "fill": null,
                                              "fontSize": 24,
                                            }
                                          }
                                          viewBox="0 0 24 24"
                                          xmlns="http://www.w3.org/2000/svg"
                                        />
                                      </Icon>
                                    </Cross>
                                  </div>
                                </Ripple>
                              </button>
                              <GridItem
                                className="css-1mjy0de"
                                component="div"
                                grow={1}
                                role="heading"
                                shrink={1}
                              >
                                <div
                                  className="css-1mjy0de css-1gs0ko2"
                                  role="heading"
                                >
                                  Label One
                                </div>
                              </GridItem>
                            </div>
                          </Grid>
                        </Header>
                        <div
                          className="css-1pp3d82"
                          onScroll={[Function]}
                        >
                          <SheetList
                            className={null}
                            hasImages={false}
                            key=".0"
                            onClose={[Function]}
                            testId={null}
                          >
                            <List
                              className={null}
                              role="listbox"
                            >
                              <ul
                                className={null}
                                role="listbox"
                              >
                                <ListItem
                                  className="css-id5jvr css-171mywc"
                                  isSelected={false}
                                  key="child-0/.$1-1"
                                  role={null}
                                  tabIndex={0}
                                >
                                  <li
                                    className="css-1p5q8vq css-id5jvr css-171mywc css-16gj3o1"
                                    data-test-id="listItem"
                                    role={null}
                                  >
                                    <div
                                      className="css-1ckzvk7"
                                      data-test-id={null}
                                    >
                                      <SheetItem
                                        item={
                                          Object {
                                            "childrenCount": 0,
                                            "id": "1-1",
                                            "isFetching": false,
                                            "name": "Category 1-1",
                                          }
                                        }
                                        key="1-1"
                                        onClick={[Function]}
                                        selected={true}
                                      >
                                        <button
                                          className="css-1ekqwzo"
                                          key="1-1"
                                          onClick={[Function]}
                                          type="button"
                                          value="1-1"
                                        >
                                          Category 1-1
                                        </button>
                                      </SheetItem>
                                    </div>
                                  </li>
                                </ListItem>
                                <ListItem
                                  className="css-id5jvr css-171mywc"
                                  isSelected={false}
                                  key="child-1/.$1-2"
                                  role={null}
                                  tabIndex={0}
                                >
                                  <li
                                    className="css-1p5q8vq css-id5jvr css-171mywc css-16gj3o1"
                                    data-test-id="listItem"
                                    role={null}
                                  >
                                    <div
                                      className="css-1ckzvk7"
                                      data-test-id={null}
                                    >
                                      <SheetItem
                                        item={
                                          Object {
                                            "childrenCount": 1,
                                            "id": "1-2",
                                            "isFetching": false,
                                            "name": "Category 1-2",
                                          }
                                        }
                                        key="1-2"
                                        onClick={[Function]}
                                        selected={false}
                                      >
                                        <button
                                          className="css-zwdy34"
                                          key="1-2"
                                          onClick={[Function]}
                                          type="button"
                                          value="1-2"
                                        >
                                          Category 1-2
                                        </button>
                                      </SheetItem>
                                    </div>
                                  </li>
                                </ListItem>
                              </ul>
                            </List>
                          </SheetList>
                        </div>
                      </div>
                    </Drawer>
                    <Backdrop
                      className=""
                      color="#000"
                      duration={200}
                      isVisible={false}
                      level={4}
                      lockBodyScroll={true}
                      onClick={[Function]}
                      opacity={20}
                    >
                      <Transition
                        childrenStyles={
                          Object {
                            "appear": Object {
                              "opacity": 0.2,
                            },
                            "base": Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            },
                            "enter": Object {
                              "opacity": 0.2,
                            },
                            "leave": Object {
                              "opacity": 0,
                            },
                          }
                        }
                        component="div"
                      >
                        <TransitionHooks
                          component="div"
                        >
                          <div>
                            <TransitionChild
                              childrenAppearStyle={
                                Object {
                                  "opacity": 0.2,
                                }
                              }
                              childrenBaseStyle={
                                Object {
                                  "background": "#000",
                                  "opacity": 0,
                                  "transition": "opacity 200ms ease-out",
                                  "zIndex": 4,
                                }
                              }
                              childrenEnterStyle={
                                Object {
                                  "opacity": 0.2,
                                }
                              }
                              childrenLeaveStyle={
                                Object {
                                  "opacity": 0,
                                }
                              }
                              key=".$.0"
                            >
                              <div
                                aria-hidden={true}
                                className="css-hlk66h "
                                data-test-id="Backdrop"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "background": "#000",
                                    "opacity": 0,
                                    "transition": "opacity 200ms ease-out",
                                    "zIndex": 4,
                                  }
                                }
                              />
                            </TransitionChild>
                          </div>
                        </TransitionHooks>
                      </Transition>
                    </Backdrop>
                  </section>
                </Sheet>
              </SheetDrawer>
            </CategorySheet>
          </CategoryPicker>
        </Connect(CategoryPicker)>
      </div>
      <div
        className="css-k4qf09"
      >
        <Connect(ButtonLink)
          className="css-63oe3q"
          disabled={false}
          flat={false}
          href="/category/312d31"
        >
          <ButtonLink
            className="css-63oe3q"
            disabled={false}
            flat={false}
            href="/category/312d31"
            navigate={[Function]}
            noGap={false}
          >
            <ActionButton
              className="css-63oe3q"
              disabled={false}
              flat={false}
              loading={false}
              noGap={false}
              onClick={[Function]}
              rippleClassName=""
              rippleSize={null}
              testId={null}
              type="secondary"
              wrapContent={true}
            >
              <div
                className="css-omcrdt"
                data-test-id={null}
              >
                <RippleButton
                  className="css-63oe3q"
                  disabled={false}
                  flat={false}
                  onClick={[Function]}
                  rippleClassName=""
                  rippleSize={null}
                  testId="Button"
                  type="secondary"
                  wrapContent={true}
                >
                  <Button
                    className="css-63oe3q"
                    disabled={false}
                    flat={false}
                    onClick={[Function]}
                    testId="Button"
                    type="secondary"
                    wrapContent={false}
                  >
                    <Button
                      className="css-1k9vl9z css-63oe3q"
                      disabled={false}
                      onClick={[Function]}
                      testId="Button"
                    >
                      <button
                        className="css-1k9vl9z css-63oe3q css-1rn65c0"
                        data-test-id="Button"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <Ripple
                          className="css-1fscwua "
                          color="#000"
                          disabled={false}
                          fill={true}
                          onClick={[Function]}
                          onComplete={[Function]}
                          overflow={false}
                          size={null}
                        >
                          <div
                            className="css-1fscwua "
                            data-test-id="Ripple"
                            onClick={[Function]}
                            style={null}
                          >
                            <Translate
                              className={null}
                              params={Object {}}
                              role={null}
                              string="common.show_products"
                              transform={null}
                            >
                              <span
                                className={null}
                                role={null}
                              >
                                common.show_products
                              </span>
                            </Translate>
                          </div>
                        </Ripple>
                      </button>
                    </Button>
                  </Button>
                </RippleButton>
              </div>
            </ActionButton>
          </ButtonLink>
        </Connect(ButtonLink)>
      </div>
    </div>
  </NestedCategoryFilter>
</Provider>
`;

exports[`<NestedCategoryFilterWidget /> should render the widget with a persisted state and handle user interaction as expected 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <NestedCategoryFilter
    id="widget-id"
    persistedState={
      Object {
        "buttonCategoryId": "1-2-1",
        "pickers": Array [
          Object {
            "categoryId": "",
            "selectedId": "1",
          },
          Object {
            "categoryId": "1",
            "selectedId": "1-2",
          },
          Object {
            "categoryId": "1-2",
            "selectedId": "1-2-1",
          },
        ],
      }
    }
    settings={
      Object {
        "categoryNumber": "",
        "headline": "Widget Headline",
        "label_1": "Label One",
        "label_2": "Label Two",
        "label_3": "",
        "label_4": "",
        "limit": "4",
      }
    }
  >
    <div
      className="css-13nlt1e"
    >
      <Headline
        text="Widget Headline"
      >
        <h3
          className="css-137piww"
        >
          Widget Headline
        </h3>
      </Headline>
      <div>
        <Connect(CategoryPicker)
          categoryId=""
          key=""
          label="Label One"
          onSelect={[Function]}
          selectedId="1"
        >
          <CategoryPicker
            categoryId=""
            fetchCategory={[Function]}
            label="Label One"
            onSelect={[Function]}
            selectedId="1"
            subcategories={
              Array [
                Object {
                  "childrenCount": 2,
                  "id": "1",
                  "isFetching": false,
                  "name": "Category 1",
                },
                Object {
                  "childrenCount": 0,
                  "id": "2",
                  "isFetching": false,
                  "name": "Category 2",
                },
              ]
            }
          >
            <div
              aria-hidden={true}
              className="css-1xsdpry"
              onClick={[Function]}
            >
              <div
                className="css-r60y77"
              >
                Label One
              </div>
              <div
                className="css-1fe6blz"
              >
                Category 1
              </div>
            </div>
            <CategorySheet
              items={
                Array [
                  Object {
                    "childrenCount": 2,
                    "id": "1",
                    "isFetching": false,
                    "name": "Category 1",
                  },
                  Object {
                    "childrenCount": 0,
                    "id": "2",
                    "isFetching": false,
                    "name": "Category 2",
                  },
                ]
              }
              label="Label One"
              onClose={[Function]}
              onSelect={[Function]}
              open={false}
              selectedId="1"
            >
              <SheetDrawer
                isOpen={false}
                onClose={[Function]}
                title="Label One"
              >
                <Sheet
                  allowClose={true}
                  animation={Object {}}
                  backdrop={true}
                  className={null}
                  contentClassName={null}
                  duration={300}
                  isOpen={false}
                  onClose={[Function]}
                  onDidClose={[Function]}
                  onDidOpen={[Function]}
                  onOpen={[Function]}
                  title="Label One"
                >
                  <section
                    className={null}
                  >
                    <Drawer
                      alwaysActive={false}
                      animation={
                        Object {
                          "duration": 300,
                          "in": "css-1ldjh2f",
                          "out": "css-171mdnt",
                        }
                      }
                      className="css-1d4fqwq"
                      isOpen={false}
                      onClose={[Function]}
                      onDidClose={[Function]}
                      onDidOpen={[Function]}
                      onOpen={[Function]}
                    />
                    <Backdrop
                      className=""
                      color="#000"
                      duration={200}
                      isVisible={false}
                      level={4}
                      lockBodyScroll={true}
                      onClick={[Function]}
                      opacity={20}
                    >
                      <Transition
                        childrenStyles={
                          Object {
                            "appear": Object {
                              "opacity": 0.2,
                            },
                            "base": Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            },
                            "enter": Object {
                              "opacity": 0.2,
                            },
                            "leave": Object {
                              "opacity": 0,
                            },
                          }
                        }
                        component="div"
                      >
                        <TransitionHooks
                          component="div"
                        >
                          <div />
                        </TransitionHooks>
                      </Transition>
                    </Backdrop>
                  </section>
                </Sheet>
              </SheetDrawer>
            </CategorySheet>
          </CategoryPicker>
        </Connect(CategoryPicker)>
        <Connect(CategoryPicker)
          categoryId="1"
          key="1"
          label="Label Two"
          onSelect={[Function]}
          selectedId="1-2"
        >
          <CategoryPicker
            categoryId="1"
            fetchCategory={[Function]}
            label="Label Two"
            onSelect={[Function]}
            selectedId="1-2"
            subcategories={
              Array [
                Object {
                  "childrenCount": 0,
                  "id": "1-1",
                  "isFetching": false,
                  "name": "Category 1-1",
                },
                Object {
                  "childrenCount": 1,
                  "id": "1-2",
                  "isFetching": false,
                  "name": "Category 1-2",
                },
              ]
            }
          >
            <div
              aria-hidden={true}
              className="css-1xsdpry"
              onClick={[Function]}
            >
              <div
                className="css-r60y77"
              >
                Label Two
              </div>
              <div
                className="css-1fe6blz"
              >
                Category 1-2
              </div>
            </div>
            <CategorySheet
              items={
                Array [
                  Object {
                    "childrenCount": 0,
                    "id": "1-1",
                    "isFetching": false,
                    "name": "Category 1-1",
                  },
                  Object {
                    "childrenCount": 1,
                    "id": "1-2",
                    "isFetching": false,
                    "name": "Category 1-2",
                  },
                ]
              }
              label="Label Two"
              onClose={[Function]}
              onSelect={[Function]}
              open={false}
              selectedId="1-2"
            >
              <SheetDrawer
                isOpen={false}
                onClose={[Function]}
                title="Label Two"
              >
                <Sheet
                  allowClose={true}
                  animation={Object {}}
                  backdrop={true}
                  className={null}
                  contentClassName={null}
                  duration={300}
                  isOpen={false}
                  onClose={[Function]}
                  onDidClose={[Function]}
                  onDidOpen={[Function]}
                  onOpen={[Function]}
                  title="Label Two"
                >
                  <section
                    className={null}
                  >
                    <Drawer
                      alwaysActive={false}
                      animation={
                        Object {
                          "duration": 300,
                          "in": "css-1ldjh2f",
                          "out": "css-171mdnt",
                        }
                      }
                      className="css-1d4fqwq"
                      isOpen={false}
                      onClose={[Function]}
                      onDidClose={[Function]}
                      onDidOpen={[Function]}
                      onOpen={[Function]}
                    />
                    <Backdrop
                      className=""
                      color="#000"
                      duration={200}
                      isVisible={false}
                      level={4}
                      lockBodyScroll={true}
                      onClick={[Function]}
                      opacity={20}
                    >
                      <Transition
                        childrenStyles={
                          Object {
                            "appear": Object {
                              "opacity": 0.2,
                            },
                            "base": Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            },
                            "enter": Object {
                              "opacity": 0.2,
                            },
                            "leave": Object {
                              "opacity": 0,
                            },
                          }
                        }
                        component="div"
                      >
                        <TransitionHooks
                          component="div"
                        >
                          <div />
                        </TransitionHooks>
                      </Transition>
                    </Backdrop>
                  </section>
                </Sheet>
              </SheetDrawer>
            </CategorySheet>
          </CategoryPicker>
        </Connect(CategoryPicker)>
        <Connect(CategoryPicker)
          categoryId="1-2"
          key="1-2"
          label=""
          onSelect={[Function]}
          selectedId="1-2-1"
        >
          <CategoryPicker
            categoryId="1-2"
            fetchCategory={[Function]}
            label=""
            onSelect={[Function]}
            selectedId="1-2-1"
            subcategories={
              Array [
                Object {
                  "childrenCount": 0,
                  "id": "1-2-1",
                  "isFetching": false,
                  "name": "Category 1-2-1",
                },
              ]
            }
          >
            <div
              aria-hidden={true}
              className="css-1xsdpry"
              onClick={[Function]}
            >
              <div
                className="css-1fe6blz"
              >
                Category 1-2-1
              </div>
            </div>
            <CategorySheet
              items={
                Array [
                  Object {
                    "childrenCount": 0,
                    "id": "1-2-1",
                    "isFetching": false,
                    "name": "Category 1-2-1",
                  },
                ]
              }
              label=""
              onClose={[Function]}
              onSelect={[Function]}
              open={false}
              selectedId="1-2-1"
            >
              <SheetDrawer
                isOpen={false}
                onClose={[Function]}
                title=""
              >
                <Sheet
                  allowClose={true}
                  animation={Object {}}
                  backdrop={true}
                  className={null}
                  contentClassName={null}
                  duration={300}
                  isOpen={false}
                  onClose={[Function]}
                  onDidClose={[Function]}
                  onDidOpen={[Function]}
                  onOpen={[Function]}
                  title=""
                >
                  <section
                    className={null}
                  >
                    <Drawer
                      alwaysActive={false}
                      animation={
                        Object {
                          "duration": 300,
                          "in": "css-1ldjh2f",
                          "out": "css-171mdnt",
                        }
                      }
                      className="css-1d4fqwq"
                      isOpen={false}
                      onClose={[Function]}
                      onDidClose={[Function]}
                      onDidOpen={[Function]}
                      onOpen={[Function]}
                    />
                    <Backdrop
                      className=""
                      color="#000"
                      duration={200}
                      isVisible={false}
                      level={4}
                      lockBodyScroll={true}
                      onClick={[Function]}
                      opacity={20}
                    >
                      <Transition
                        childrenStyles={
                          Object {
                            "appear": Object {
                              "opacity": 0.2,
                            },
                            "base": Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            },
                            "enter": Object {
                              "opacity": 0.2,
                            },
                            "leave": Object {
                              "opacity": 0,
                            },
                          }
                        }
                        component="div"
                      >
                        <TransitionHooks
                          component="div"
                        >
                          <div />
                        </TransitionHooks>
                      </Transition>
                    </Backdrop>
                  </section>
                </Sheet>
              </SheetDrawer>
            </CategorySheet>
          </CategoryPicker>
        </Connect(CategoryPicker)>
      </div>
      <div
        className="css-k4qf09"
      >
        <Connect(ButtonLink)
          className="css-63oe3q"
          disabled={false}
          flat={false}
          href="/category/312d322d31"
        >
          <ButtonLink
            className="css-63oe3q"
            disabled={false}
            flat={false}
            href="/category/312d322d31"
            navigate={[Function]}
            noGap={false}
          >
            <ActionButton
              className="css-63oe3q"
              disabled={false}
              flat={false}
              loading={false}
              noGap={false}
              onClick={[Function]}
              rippleClassName=""
              rippleSize={null}
              testId={null}
              type="secondary"
              wrapContent={true}
            >
              <div
                className="css-omcrdt"
                data-test-id={null}
              >
                <RippleButton
                  className="css-63oe3q"
                  disabled={false}
                  flat={false}
                  onClick={[Function]}
                  rippleClassName=""
                  rippleSize={null}
                  testId="Button"
                  type="secondary"
                  wrapContent={true}
                >
                  <Button
                    className="css-63oe3q"
                    disabled={false}
                    flat={false}
                    onClick={[Function]}
                    testId="Button"
                    type="secondary"
                    wrapContent={false}
                  >
                    <Button
                      className="css-1k9vl9z css-63oe3q"
                      disabled={false}
                      onClick={[Function]}
                      testId="Button"
                    >
                      <button
                        className="css-1k9vl9z css-63oe3q css-1rn65c0"
                        data-test-id="Button"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <Ripple
                          className="css-1fscwua "
                          color="#000"
                          disabled={false}
                          fill={true}
                          onClick={[Function]}
                          onComplete={[Function]}
                          overflow={false}
                          size={null}
                        >
                          <div
                            className="css-1fscwua "
                            data-test-id="Ripple"
                            onClick={[Function]}
                            style={null}
                          >
                            <Translate
                              className={null}
                              params={Object {}}
                              role={null}
                              string="common.show_products"
                              transform={null}
                            >
                              <span
                                className={null}
                                role={null}
                              >
                                common.show_products
                              </span>
                            </Translate>
                          </div>
                        </Ripple>
                      </button>
                    </Button>
                  </Button>
                </RippleButton>
              </div>
            </ActionButton>
          </ButtonLink>
        </Connect(ButtonLink)>
      </div>
    </div>
  </NestedCategoryFilter>
</Provider>
`;

exports[`<NestedCategoryFilterWidget /> should render the widget with a persisted state and handle user interaction as expected 2`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <NestedCategoryFilter
    id="widget-id"
    persistedState={
      Object {
        "buttonCategoryId": "1-2-1",
        "pickers": Array [
          Object {
            "categoryId": "",
            "selectedId": "1",
          },
          Object {
            "categoryId": "1",
            "selectedId": "1-2",
          },
          Object {
            "categoryId": "1-2",
            "selectedId": "1-2-1",
          },
        ],
      }
    }
    settings={
      Object {
        "categoryNumber": "",
        "headline": "Widget Headline",
        "label_1": "Label One",
        "label_2": "Label Two",
        "label_3": "",
        "label_4": "",
        "limit": "4",
      }
    }
  >
    <div
      className="css-13nlt1e"
    >
      <Headline
        text="Widget Headline"
      >
        <h3
          className="css-137piww"
        >
          Widget Headline
        </h3>
      </Headline>
      <div>
        <Connect(CategoryPicker)
          categoryId=""
          key=""
          label="Label One"
          onSelect={[Function]}
          selectedId="1"
        >
          <CategoryPicker
            categoryId=""
            fetchCategory={[Function]}
            label="Label One"
            onSelect={[Function]}
            selectedId="1"
            subcategories={
              Array [
                Object {
                  "childrenCount": 2,
                  "id": "1",
                  "isFetching": false,
                  "name": "Category 1",
                },
                Object {
                  "childrenCount": 0,
                  "id": "2",
                  "isFetching": false,
                  "name": "Category 2",
                },
              ]
            }
          >
            <div
              aria-hidden={true}
              className="css-1xsdpry"
              onClick={[Function]}
            >
              <div
                className="css-r60y77"
              >
                Label One
              </div>
              <div
                className="css-1fe6blz"
              >
                Category 1
              </div>
            </div>
            <CategorySheet
              items={
                Array [
                  Object {
                    "childrenCount": 2,
                    "id": "1",
                    "isFetching": false,
                    "name": "Category 1",
                  },
                  Object {
                    "childrenCount": 0,
                    "id": "2",
                    "isFetching": false,
                    "name": "Category 2",
                  },
                ]
              }
              label="Label One"
              onClose={[Function]}
              onSelect={[Function]}
              open={false}
              selectedId="1"
            >
              <SheetDrawer
                isOpen={false}
                onClose={[Function]}
                title="Label One"
              >
                <Sheet
                  allowClose={true}
                  animation={Object {}}
                  backdrop={true}
                  className={null}
                  contentClassName={null}
                  duration={300}
                  isOpen={false}
                  onClose={[Function]}
                  onDidClose={[Function]}
                  onDidOpen={[Function]}
                  onOpen={[Function]}
                  title="Label One"
                >
                  <section
                    className={null}
                  >
                    <Drawer
                      alwaysActive={false}
                      animation={
                        Object {
                          "duration": 300,
                          "in": "css-1ldjh2f",
                          "out": "css-171mdnt",
                        }
                      }
                      className="css-1d4fqwq"
                      isOpen={false}
                      onClose={[Function]}
                      onDidClose={[Function]}
                      onDidOpen={[Function]}
                      onOpen={[Function]}
                    >
                      <div
                        className="css-1d4fqwq css-1rg7udn css-171mdnt"
                        onAnimationEnd={[Function]}
                        style={
                          Object {
                            "animationDuration": "300ms",
                          }
                        }
                      >
                        <Header
                          allowClose={true}
                          onToggleClose={[Function]}
                          shadow={false}
                          title="Label One"
                        >
                          <Grid
                            className="css-1hncgty"
                            component="div"
                            wrap={false}
                          >
                            <div
                              className="css-1hncgty css-h7r55a"
                            >
                              <button
                                aria-label="common.close"
                                className="css-r4gt00"
                                onClick={[Function]}
                                type="button"
                              >
                                <Ripple
                                  className="css-ugy6xl"
                                  color="#000"
                                  disabled={false}
                                  fill={false}
                                  onClick={[Function]}
                                  onComplete={[Function]}
                                  overflow={false}
                                  size={null}
                                >
                                  <div
                                    className="css-ugy6xl"
                                    data-test-id="Ripple"
                                    onClick={[Function]}
                                    style={null}
                                  >
                                    <Cross
                                      size={24}
                                    >
                                      <Icon
                                        className=""
                                        color={null}
                                        content="<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>"
                                        size={24}
                                        viewBox="0 0 24 24"
                                      >
                                        <svg
                                          className="css-yys9hb "
                                          dangerouslySetInnerHTML={
                                            Object {
                                              "__html": "<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>",
                                            }
                                          }
                                          style={
                                            Object {
                                              "fill": null,
                                              "fontSize": 24,
                                            }
                                          }
                                          viewBox="0 0 24 24"
                                          xmlns="http://www.w3.org/2000/svg"
                                        />
                                      </Icon>
                                    </Cross>
                                  </div>
                                </Ripple>
                              </button>
                              <GridItem
                                className="css-1mjy0de"
                                component="div"
                                grow={1}
                                role="heading"
                                shrink={1}
                              >
                                <div
                                  className="css-1mjy0de css-1gs0ko2"
                                  role="heading"
                                >
                                  Label One
                                </div>
                              </GridItem>
                            </div>
                          </Grid>
                        </Header>
                        <div
                          className="css-1pp3d82"
                          onScroll={[Function]}
                        >
                          <SheetList
                            className={null}
                            hasImages={false}
                            key=".0"
                            onClose={[Function]}
                            testId={null}
                          >
                            <List
                              className={null}
                              role="listbox"
                            >
                              <ul
                                className={null}
                                role="listbox"
                              >
                                <ListItem
                                  className="css-id5jvr css-171mywc"
                                  isSelected={false}
                                  key="child-0/.$1"
                                  role={null}
                                  tabIndex={0}
                                >
                                  <li
                                    className="css-1p5q8vq css-id5jvr css-171mywc css-16gj3o1"
                                    data-test-id="listItem"
                                    role={null}
                                  >
                                    <div
                                      className="css-1ckzvk7"
                                      data-test-id={null}
                                    >
                                      <SheetItem
                                        item={
                                          Object {
                                            "childrenCount": 2,
                                            "id": "1",
                                            "isFetching": false,
                                            "name": "Category 1",
                                          }
                                        }
                                        key="1"
                                        onClick={[Function]}
                                        selected={true}
                                      >
                                        <button
                                          className="css-1ekqwzo"
                                          key="1"
                                          onClick={[Function]}
                                          type="button"
                                          value="1"
                                        >
                                          Category 1
                                        </button>
                                      </SheetItem>
                                    </div>
                                  </li>
                                </ListItem>
                                <ListItem
                                  className="css-id5jvr css-171mywc"
                                  isSelected={false}
                                  key="child-1/.$2"
                                  role={null}
                                  tabIndex={0}
                                >
                                  <li
                                    className="css-1p5q8vq css-id5jvr css-171mywc css-16gj3o1"
                                    data-test-id="listItem"
                                    role={null}
                                  >
                                    <div
                                      className="css-1ckzvk7"
                                      data-test-id={null}
                                    >
                                      <SheetItem
                                        item={
                                          Object {
                                            "childrenCount": 0,
                                            "id": "2",
                                            "isFetching": false,
                                            "name": "Category 2",
                                          }
                                        }
                                        key="2"
                                        onClick={[Function]}
                                        selected={false}
                                      >
                                        <button
                                          className="css-zwdy34"
                                          key="2"
                                          onClick={[Function]}
                                          type="button"
                                          value="2"
                                        >
                                          Category 2
                                        </button>
                                      </SheetItem>
                                    </div>
                                  </li>
                                </ListItem>
                              </ul>
                            </List>
                          </SheetList>
                        </div>
                      </div>
                    </Drawer>
                    <Backdrop
                      className=""
                      color="#000"
                      duration={200}
                      isVisible={false}
                      level={4}
                      lockBodyScroll={true}
                      onClick={[Function]}
                      opacity={20}
                    >
                      <Transition
                        childrenStyles={
                          Object {
                            "appear": Object {
                              "opacity": 0.2,
                            },
                            "base": Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            },
                            "enter": Object {
                              "opacity": 0.2,
                            },
                            "leave": Object {
                              "opacity": 0,
                            },
                          }
                        }
                        component="div"
                      >
                        <TransitionHooks
                          component="div"
                        >
                          <div>
                            <TransitionChild
                              childrenAppearStyle={
                                Object {
                                  "opacity": 0.2,
                                }
                              }
                              childrenBaseStyle={
                                Object {
                                  "background": "#000",
                                  "opacity": 0,
                                  "transition": "opacity 200ms ease-out",
                                  "zIndex": 4,
                                }
                              }
                              childrenEnterStyle={
                                Object {
                                  "opacity": 0.2,
                                }
                              }
                              childrenLeaveStyle={
                                Object {
                                  "opacity": 0,
                                }
                              }
                              key=".$.0"
                            >
                              <div
                                aria-hidden={true}
                                className="css-hlk66h "
                                data-test-id="Backdrop"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "background": "#000",
                                    "opacity": 0,
                                    "transition": "opacity 200ms ease-out",
                                    "zIndex": 4,
                                  }
                                }
                              />
                            </TransitionChild>
                          </div>
                        </TransitionHooks>
                      </Transition>
                    </Backdrop>
                  </section>
                </Sheet>
              </SheetDrawer>
            </CategorySheet>
          </CategoryPicker>
        </Connect(CategoryPicker)>
        <Connect(CategoryPicker)
          categoryId="1"
          key="1"
          label="Label Two"
          onSelect={[Function]}
          selectedId={null}
        >
          <CategoryPicker
            categoryId="1"
            fetchCategory={[Function]}
            label="Label Two"
            onSelect={[Function]}
            selectedId={null}
            subcategories={
              Array [
                Object {
                  "childrenCount": 0,
                  "id": "1-1",
                  "isFetching": false,
                  "name": "Category 1-1",
                },
                Object {
                  "childrenCount": 1,
                  "id": "1-2",
                  "isFetching": false,
                  "name": "Category 1-2",
                },
              ]
            }
          >
            <div
              aria-hidden={true}
              className="css-1xsdpry"
              onClick={[Function]}
            >
              <div
                className="css-r60y77"
              >
                Label Two
              </div>
              <div
                className="css-1fe6blz"
              >
                common.please_choose
              </div>
            </div>
            <CategorySheet
              items={
                Array [
                  Object {
                    "childrenCount": 0,
                    "id": "1-1",
                    "isFetching": false,
                    "name": "Category 1-1",
                  },
                  Object {
                    "childrenCount": 1,
                    "id": "1-2",
                    "isFetching": false,
                    "name": "Category 1-2",
                  },
                ]
              }
              label="Label Two"
              onClose={[Function]}
              onSelect={[Function]}
              open={false}
              selectedId={null}
            >
              <SheetDrawer
                isOpen={false}
                onClose={[Function]}
                title="Label Two"
              >
                <Sheet
                  allowClose={true}
                  animation={Object {}}
                  backdrop={true}
                  className={null}
                  contentClassName={null}
                  duration={300}
                  isOpen={false}
                  onClose={[Function]}
                  onDidClose={[Function]}
                  onDidOpen={[Function]}
                  onOpen={[Function]}
                  title="Label Two"
                >
                  <section
                    className={null}
                  >
                    <Drawer
                      alwaysActive={false}
                      animation={
                        Object {
                          "duration": 300,
                          "in": "css-1ldjh2f",
                          "out": "css-171mdnt",
                        }
                      }
                      className="css-1d4fqwq"
                      isOpen={false}
                      onClose={[Function]}
                      onDidClose={[Function]}
                      onDidOpen={[Function]}
                      onOpen={[Function]}
                    />
                    <Backdrop
                      className=""
                      color="#000"
                      duration={200}
                      isVisible={false}
                      level={4}
                      lockBodyScroll={true}
                      onClick={[Function]}
                      opacity={20}
                    >
                      <Transition
                        childrenStyles={
                          Object {
                            "appear": Object {
                              "opacity": 0.2,
                            },
                            "base": Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            },
                            "enter": Object {
                              "opacity": 0.2,
                            },
                            "leave": Object {
                              "opacity": 0,
                            },
                          }
                        }
                        component="div"
                      >
                        <TransitionHooks
                          component="div"
                        >
                          <div />
                        </TransitionHooks>
                      </Transition>
                    </Backdrop>
                  </section>
                </Sheet>
              </SheetDrawer>
            </CategorySheet>
          </CategoryPicker>
        </Connect(CategoryPicker)>
      </div>
      <div
        className="css-k4qf09"
      >
        <Connect(ButtonLink)
          className="css-63oe3q"
          disabled={true}
          flat={false}
          href="/category/6e756c6c"
        >
          <ButtonLink
            className="css-63oe3q"
            disabled={true}
            flat={false}
            href="/category/6e756c6c"
            navigate={[Function]}
            noGap={false}
          >
            <ActionButton
              className="css-63oe3q"
              disabled={true}
              flat={false}
              loading={false}
              noGap={false}
              onClick={[Function]}
              rippleClassName=""
              rippleSize={null}
              testId={null}
              type="secondary"
              wrapContent={true}
            >
              <div
                className="css-omcrdt"
                data-test-id={null}
              >
                <RippleButton
                  className="css-63oe3q"
                  disabled={true}
                  flat={false}
                  onClick={[Function]}
                  rippleClassName=""
                  rippleSize={null}
                  testId="Button"
                  type="secondary"
                  wrapContent={true}
                >
                  <Button
                    className="css-63oe3q"
                    disabled={true}
                    flat={false}
                    onClick={[Function]}
                    testId="Button"
                    type="secondary"
                    wrapContent={true}
                  >
                    <Button
                      className="css-172ttat css-63oe3q"
                      disabled={true}
                      onClick={[Function]}
                      testId="Button"
                    >
                      <button
                        className="css-172ttat css-63oe3q css-1rn65c0"
                        data-test-id="Button"
                        disabled={true}
                        onClick={null}
                      >
                        <div
                          className="css-kwqjom"
                        >
                          <Translate
                            className={null}
                            params={Object {}}
                            role={null}
                            string="common.show_products"
                            transform={null}
                          >
                            <span
                              className={null}
                              role={null}
                            >
                              common.show_products
                            </span>
                          </Translate>
                        </div>
                      </button>
                    </Button>
                  </Button>
                </RippleButton>
              </div>
            </ActionButton>
          </ButtonLink>
        </Connect(ButtonLink)>
      </div>
    </div>
  </NestedCategoryFilter>
</Provider>
`;

exports[`<NestedCategoryFilterWidget /> should render the widget with a persisted state and handle user interaction as expected 3`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <NestedCategoryFilter
    id="widget-id"
    persistedState={
      Object {
        "buttonCategoryId": "1-2-1",
        "pickers": Array [
          Object {
            "categoryId": "",
            "selectedId": "1",
          },
          Object {
            "categoryId": "1",
            "selectedId": "1-2",
          },
          Object {
            "categoryId": "1-2",
            "selectedId": "1-2-1",
          },
        ],
      }
    }
    settings={
      Object {
        "categoryNumber": "",
        "headline": "Widget Headline",
        "label_1": "Label One",
        "label_2": "Label Two",
        "label_3": "",
        "label_4": "",
        "limit": "4",
      }
    }
  >
    <div
      className="css-13nlt1e"
    >
      <Headline
        text="Widget Headline"
      >
        <h3
          className="css-137piww"
        >
          Widget Headline
        </h3>
      </Headline>
      <div>
        <Connect(CategoryPicker)
          categoryId=""
          key=""
          label="Label One"
          onSelect={[Function]}
          selectedId="1"
        >
          <CategoryPicker
            categoryId=""
            fetchCategory={[Function]}
            label="Label One"
            onSelect={[Function]}
            selectedId="1"
            subcategories={
              Array [
                Object {
                  "childrenCount": 2,
                  "id": "1",
                  "isFetching": false,
                  "name": "Category 1",
                },
                Object {
                  "childrenCount": 0,
                  "id": "2",
                  "isFetching": false,
                  "name": "Category 2",
                },
              ]
            }
          >
            <div
              aria-hidden={true}
              className="css-1xsdpry"
              onClick={[Function]}
            >
              <div
                className="css-r60y77"
              >
                Label One
              </div>
              <div
                className="css-1fe6blz"
              >
                Category 1
              </div>
            </div>
            <CategorySheet
              items={
                Array [
                  Object {
                    "childrenCount": 2,
                    "id": "1",
                    "isFetching": false,
                    "name": "Category 1",
                  },
                  Object {
                    "childrenCount": 0,
                    "id": "2",
                    "isFetching": false,
                    "name": "Category 2",
                  },
                ]
              }
              label="Label One"
              onClose={[Function]}
              onSelect={[Function]}
              open={false}
              selectedId="1"
            >
              <SheetDrawer
                isOpen={false}
                onClose={[Function]}
                title="Label One"
              >
                <Sheet
                  allowClose={true}
                  animation={Object {}}
                  backdrop={true}
                  className={null}
                  contentClassName={null}
                  duration={300}
                  isOpen={false}
                  onClose={[Function]}
                  onDidClose={[Function]}
                  onDidOpen={[Function]}
                  onOpen={[Function]}
                  title="Label One"
                >
                  <section
                    className={null}
                  >
                    <Drawer
                      alwaysActive={false}
                      animation={
                        Object {
                          "duration": 300,
                          "in": "css-1ldjh2f",
                          "out": "css-171mdnt",
                        }
                      }
                      className="css-1d4fqwq"
                      isOpen={false}
                      onClose={[Function]}
                      onDidClose={[Function]}
                      onDidOpen={[Function]}
                      onOpen={[Function]}
                    >
                      <div
                        className="css-1d4fqwq css-1rg7udn css-171mdnt"
                        onAnimationEnd={[Function]}
                        style={
                          Object {
                            "animationDuration": "300ms",
                          }
                        }
                      >
                        <Header
                          allowClose={true}
                          onToggleClose={[Function]}
                          shadow={false}
                          title="Label One"
                        >
                          <Grid
                            className="css-1hncgty"
                            component="div"
                            wrap={false}
                          >
                            <div
                              className="css-1hncgty css-h7r55a"
                            >
                              <button
                                aria-label="common.close"
                                className="css-r4gt00"
                                onClick={[Function]}
                                type="button"
                              >
                                <Ripple
                                  className="css-ugy6xl"
                                  color="#000"
                                  disabled={false}
                                  fill={false}
                                  onClick={[Function]}
                                  onComplete={[Function]}
                                  overflow={false}
                                  size={null}
                                >
                                  <div
                                    className="css-ugy6xl"
                                    data-test-id="Ripple"
                                    onClick={[Function]}
                                    style={null}
                                  >
                                    <Cross
                                      size={24}
                                    >
                                      <Icon
                                        className=""
                                        color={null}
                                        content="<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>"
                                        size={24}
                                        viewBox="0 0 24 24"
                                      >
                                        <svg
                                          className="css-yys9hb "
                                          dangerouslySetInnerHTML={
                                            Object {
                                              "__html": "<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>",
                                            }
                                          }
                                          style={
                                            Object {
                                              "fill": null,
                                              "fontSize": 24,
                                            }
                                          }
                                          viewBox="0 0 24 24"
                                          xmlns="http://www.w3.org/2000/svg"
                                        />
                                      </Icon>
                                    </Cross>
                                  </div>
                                </Ripple>
                              </button>
                              <GridItem
                                className="css-1mjy0de"
                                component="div"
                                grow={1}
                                role="heading"
                                shrink={1}
                              >
                                <div
                                  className="css-1mjy0de css-1gs0ko2"
                                  role="heading"
                                >
                                  Label One
                                </div>
                              </GridItem>
                            </div>
                          </Grid>
                        </Header>
                        <div
                          className="css-1pp3d82"
                          onScroll={[Function]}
                        >
                          <SheetList
                            className={null}
                            hasImages={false}
                            key=".0"
                            onClose={[Function]}
                            testId={null}
                          >
                            <List
                              className={null}
                              role="listbox"
                            >
                              <ul
                                className={null}
                                role="listbox"
                              >
                                <ListItem
                                  className="css-id5jvr css-171mywc"
                                  isSelected={false}
                                  key="child-0/.$1"
                                  role={null}
                                  tabIndex={0}
                                >
                                  <li
                                    className="css-1p5q8vq css-id5jvr css-171mywc css-16gj3o1"
                                    data-test-id="listItem"
                                    role={null}
                                  >
                                    <div
                                      className="css-1ckzvk7"
                                      data-test-id={null}
                                    >
                                      <SheetItem
                                        item={
                                          Object {
                                            "childrenCount": 2,
                                            "id": "1",
                                            "isFetching": false,
                                            "name": "Category 1",
                                          }
                                        }
                                        key="1"
                                        onClick={[Function]}
                                        selected={true}
                                      >
                                        <button
                                          className="css-1ekqwzo"
                                          key="1"
                                          onClick={[Function]}
                                          type="button"
                                          value="1"
                                        >
                                          Category 1
                                        </button>
                                      </SheetItem>
                                    </div>
                                  </li>
                                </ListItem>
                                <ListItem
                                  className="css-id5jvr css-171mywc"
                                  isSelected={false}
                                  key="child-1/.$2"
                                  role={null}
                                  tabIndex={0}
                                >
                                  <li
                                    className="css-1p5q8vq css-id5jvr css-171mywc css-16gj3o1"
                                    data-test-id="listItem"
                                    role={null}
                                  >
                                    <div
                                      className="css-1ckzvk7"
                                      data-test-id={null}
                                    >
                                      <SheetItem
                                        item={
                                          Object {
                                            "childrenCount": 0,
                                            "id": "2",
                                            "isFetching": false,
                                            "name": "Category 2",
                                          }
                                        }
                                        key="2"
                                        onClick={[Function]}
                                        selected={false}
                                      >
                                        <button
                                          className="css-zwdy34"
                                          key="2"
                                          onClick={[Function]}
                                          type="button"
                                          value="2"
                                        >
                                          Category 2
                                        </button>
                                      </SheetItem>
                                    </div>
                                  </li>
                                </ListItem>
                              </ul>
                            </List>
                          </SheetList>
                        </div>
                      </div>
                    </Drawer>
                    <Backdrop
                      className=""
                      color="#000"
                      duration={200}
                      isVisible={false}
                      level={4}
                      lockBodyScroll={true}
                      onClick={[Function]}
                      opacity={20}
                    >
                      <Transition
                        childrenStyles={
                          Object {
                            "appear": Object {
                              "opacity": 0.2,
                            },
                            "base": Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            },
                            "enter": Object {
                              "opacity": 0.2,
                            },
                            "leave": Object {
                              "opacity": 0,
                            },
                          }
                        }
                        component="div"
                      >
                        <TransitionHooks
                          component="div"
                        >
                          <div>
                            <TransitionChild
                              childrenAppearStyle={
                                Object {
                                  "opacity": 0.2,
                                }
                              }
                              childrenBaseStyle={
                                Object {
                                  "background": "#000",
                                  "opacity": 0,
                                  "transition": "opacity 200ms ease-out",
                                  "zIndex": 4,
                                }
                              }
                              childrenEnterStyle={
                                Object {
                                  "opacity": 0.2,
                                }
                              }
                              childrenLeaveStyle={
                                Object {
                                  "opacity": 0,
                                }
                              }
                              key=".$.0"
                            >
                              <div
                                aria-hidden={true}
                                className="css-hlk66h "
                                data-test-id="Backdrop"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "background": "#000",
                                    "opacity": 0,
                                    "transition": "opacity 200ms ease-out",
                                    "zIndex": 4,
                                  }
                                }
                              />
                            </TransitionChild>
                          </div>
                        </TransitionHooks>
                      </Transition>
                    </Backdrop>
                  </section>
                </Sheet>
              </SheetDrawer>
            </CategorySheet>
          </CategoryPicker>
        </Connect(CategoryPicker)>
        <Connect(CategoryPicker)
          categoryId="1"
          key="1"
          label="Label Two"
          onSelect={[Function]}
          selectedId="1-1"
        >
          <CategoryPicker
            categoryId="1"
            fetchCategory={[Function]}
            label="Label Two"
            onSelect={[Function]}
            selectedId="1-1"
            subcategories={
              Array [
                Object {
                  "childrenCount": 0,
                  "id": "1-1",
                  "isFetching": false,
                  "name": "Category 1-1",
                },
                Object {
                  "childrenCount": 1,
                  "id": "1-2",
                  "isFetching": false,
                  "name": "Category 1-2",
                },
              ]
            }
          >
            <div
              aria-hidden={true}
              className="css-1xsdpry"
              onClick={[Function]}
            >
              <div
                className="css-r60y77"
              >
                Label Two
              </div>
              <div
                className="css-1fe6blz"
              >
                Category 1-1
              </div>
            </div>
            <CategorySheet
              items={
                Array [
                  Object {
                    "childrenCount": 0,
                    "id": "1-1",
                    "isFetching": false,
                    "name": "Category 1-1",
                  },
                  Object {
                    "childrenCount": 1,
                    "id": "1-2",
                    "isFetching": false,
                    "name": "Category 1-2",
                  },
                ]
              }
              label="Label Two"
              onClose={[Function]}
              onSelect={[Function]}
              open={false}
              selectedId="1-1"
            >
              <SheetDrawer
                isOpen={false}
                onClose={[Function]}
                title="Label Two"
              >
                <Sheet
                  allowClose={true}
                  animation={Object {}}
                  backdrop={true}
                  className={null}
                  contentClassName={null}
                  duration={300}
                  isOpen={false}
                  onClose={[Function]}
                  onDidClose={[Function]}
                  onDidOpen={[Function]}
                  onOpen={[Function]}
                  title="Label Two"
                >
                  <section
                    className={null}
                  >
                    <Drawer
                      alwaysActive={false}
                      animation={
                        Object {
                          "duration": 300,
                          "in": "css-1ldjh2f",
                          "out": "css-171mdnt",
                        }
                      }
                      className="css-1d4fqwq"
                      isOpen={false}
                      onClose={[Function]}
                      onDidClose={[Function]}
                      onDidOpen={[Function]}
                      onOpen={[Function]}
                    >
                      <div
                        className="css-1d4fqwq css-1rg7udn css-171mdnt"
                        onAnimationEnd={[Function]}
                        style={
                          Object {
                            "animationDuration": "300ms",
                          }
                        }
                      >
                        <Header
                          allowClose={true}
                          onToggleClose={[Function]}
                          shadow={false}
                          title="Label Two"
                        >
                          <Grid
                            className="css-1hncgty"
                            component="div"
                            wrap={false}
                          >
                            <div
                              className="css-1hncgty css-h7r55a"
                            >
                              <button
                                aria-label="common.close"
                                className="css-r4gt00"
                                onClick={[Function]}
                                type="button"
                              >
                                <Ripple
                                  className="css-ugy6xl"
                                  color="#000"
                                  disabled={false}
                                  fill={false}
                                  onClick={[Function]}
                                  onComplete={[Function]}
                                  overflow={false}
                                  size={null}
                                >
                                  <div
                                    className="css-ugy6xl"
                                    data-test-id="Ripple"
                                    onClick={[Function]}
                                    style={null}
                                  >
                                    <Cross
                                      size={24}
                                    >
                                      <Icon
                                        className=""
                                        color={null}
                                        content="<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>"
                                        size={24}
                                        viewBox="0 0 24 24"
                                      >
                                        <svg
                                          className="css-yys9hb "
                                          dangerouslySetInnerHTML={
                                            Object {
                                              "__html": "<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>",
                                            }
                                          }
                                          style={
                                            Object {
                                              "fill": null,
                                              "fontSize": 24,
                                            }
                                          }
                                          viewBox="0 0 24 24"
                                          xmlns="http://www.w3.org/2000/svg"
                                        />
                                      </Icon>
                                    </Cross>
                                  </div>
                                </Ripple>
                              </button>
                              <GridItem
                                className="css-1mjy0de"
                                component="div"
                                grow={1}
                                role="heading"
                                shrink={1}
                              >
                                <div
                                  className="css-1mjy0de css-1gs0ko2"
                                  role="heading"
                                >
                                  Label Two
                                </div>
                              </GridItem>
                            </div>
                          </Grid>
                        </Header>
                        <div
                          className="css-1pp3d82"
                          onScroll={[Function]}
                        >
                          <SheetList
                            className={null}
                            hasImages={false}
                            key=".0"
                            onClose={[Function]}
                            testId={null}
                          >
                            <List
                              className={null}
                              role="listbox"
                            >
                              <ul
                                className={null}
                                role="listbox"
                              >
                                <ListItem
                                  className="css-id5jvr css-171mywc"
                                  isSelected={false}
                                  key="child-0/.$1-1"
                                  role={null}
                                  tabIndex={0}
                                >
                                  <li
                                    className="css-1p5q8vq css-id5jvr css-171mywc css-16gj3o1"
                                    data-test-id="listItem"
                                    role={null}
                                  >
                                    <div
                                      className="css-1ckzvk7"
                                      data-test-id={null}
                                    >
                                      <SheetItem
                                        item={
                                          Object {
                                            "childrenCount": 0,
                                            "id": "1-1",
                                            "isFetching": false,
                                            "name": "Category 1-1",
                                          }
                                        }
                                        key="1-1"
                                        onClick={[Function]}
                                        selected={true}
                                      >
                                        <button
                                          className="css-1ekqwzo"
                                          key="1-1"
                                          onClick={[Function]}
                                          type="button"
                                          value="1-1"
                                        >
                                          Category 1-1
                                        </button>
                                      </SheetItem>
                                    </div>
                                  </li>
                                </ListItem>
                                <ListItem
                                  className="css-id5jvr css-171mywc"
                                  isSelected={false}
                                  key="child-1/.$1-2"
                                  role={null}
                                  tabIndex={0}
                                >
                                  <li
                                    className="css-1p5q8vq css-id5jvr css-171mywc css-16gj3o1"
                                    data-test-id="listItem"
                                    role={null}
                                  >
                                    <div
                                      className="css-1ckzvk7"
                                      data-test-id={null}
                                    >
                                      <SheetItem
                                        item={
                                          Object {
                                            "childrenCount": 1,
                                            "id": "1-2",
                                            "isFetching": false,
                                            "name": "Category 1-2",
                                          }
                                        }
                                        key="1-2"
                                        onClick={[Function]}
                                        selected={false}
                                      >
                                        <button
                                          className="css-zwdy34"
                                          key="1-2"
                                          onClick={[Function]}
                                          type="button"
                                          value="1-2"
                                        >
                                          Category 1-2
                                        </button>
                                      </SheetItem>
                                    </div>
                                  </li>
                                </ListItem>
                              </ul>
                            </List>
                          </SheetList>
                        </div>
                      </div>
                    </Drawer>
                    <Backdrop
                      className=""
                      color="#000"
                      duration={200}
                      isVisible={false}
                      level={4}
                      lockBodyScroll={true}
                      onClick={[Function]}
                      opacity={20}
                    >
                      <Transition
                        childrenStyles={
                          Object {
                            "appear": Object {
                              "opacity": 0.2,
                            },
                            "base": Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            },
                            "enter": Object {
                              "opacity": 0.2,
                            },
                            "leave": Object {
                              "opacity": 0,
                            },
                          }
                        }
                        component="div"
                      >
                        <TransitionHooks
                          component="div"
                        >
                          <div>
                            <TransitionChild
                              childrenAppearStyle={
                                Object {
                                  "opacity": 0.2,
                                }
                              }
                              childrenBaseStyle={
                                Object {
                                  "background": "#000",
                                  "opacity": 0,
                                  "transition": "opacity 200ms ease-out",
                                  "zIndex": 4,
                                }
                              }
                              childrenEnterStyle={
                                Object {
                                  "opacity": 0.2,
                                }
                              }
                              childrenLeaveStyle={
                                Object {
                                  "opacity": 0,
                                }
                              }
                              key=".$.0"
                            >
                              <div
                                aria-hidden={true}
                                className="css-hlk66h "
                                data-test-id="Backdrop"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "background": "#000",
                                    "opacity": 0,
                                    "transition": "opacity 200ms ease-out",
                                    "zIndex": 4,
                                  }
                                }
                              />
                            </TransitionChild>
                          </div>
                        </TransitionHooks>
                      </Transition>
                    </Backdrop>
                  </section>
                </Sheet>
              </SheetDrawer>
            </CategorySheet>
          </CategoryPicker>
        </Connect(CategoryPicker)>
      </div>
      <div
        className="css-k4qf09"
      >
        <Connect(ButtonLink)
          className="css-63oe3q"
          disabled={false}
          flat={false}
          href="/category/312d31"
        >
          <ButtonLink
            className="css-63oe3q"
            disabled={false}
            flat={false}
            href="/category/312d31"
            navigate={[Function]}
            noGap={false}
          >
            <ActionButton
              className="css-63oe3q"
              disabled={false}
              flat={false}
              loading={false}
              noGap={false}
              onClick={[Function]}
              rippleClassName=""
              rippleSize={null}
              testId={null}
              type="secondary"
              wrapContent={true}
            >
              <div
                className="css-omcrdt"
                data-test-id={null}
              >
                <RippleButton
                  className="css-63oe3q"
                  disabled={false}
                  flat={false}
                  onClick={[Function]}
                  rippleClassName=""
                  rippleSize={null}
                  testId="Button"
                  type="secondary"
                  wrapContent={true}
                >
                  <Button
                    className="css-63oe3q"
                    disabled={false}
                    flat={false}
                    onClick={[Function]}
                    testId="Button"
                    type="secondary"
                    wrapContent={false}
                  >
                    <Button
                      className="css-1k9vl9z css-63oe3q"
                      disabled={false}
                      onClick={[Function]}
                      testId="Button"
                    >
                      <button
                        className="css-1k9vl9z css-63oe3q css-1rn65c0"
                        data-test-id="Button"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <Ripple
                          className="css-1fscwua "
                          color="#000"
                          disabled={false}
                          fill={true}
                          onClick={[Function]}
                          onComplete={[Function]}
                          overflow={false}
                          size={null}
                        >
                          <div
                            className="css-1fscwua "
                            data-test-id="Ripple"
                            onClick={[Function]}
                            style={null}
                          >
                            <Translate
                              className={null}
                              params={Object {}}
                              role={null}
                              string="common.show_products"
                              transform={null}
                            >
                              <span
                                className={null}
                                role={null}
                              >
                                common.show_products
                              </span>
                            </Translate>
                          </div>
                        </Ripple>
                      </button>
                    </Button>
                  </Button>
                </RippleButton>
              </div>
            </ActionButton>
          </ButtonLink>
        </Connect(ButtonLink)>
      </div>
    </div>
  </NestedCategoryFilter>
</Provider>
`;

exports[`<NestedCategoryFilterWidget /> should render the widget without a headline and persisted state 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <NestedCategoryFilter
    id="widget-id"
    persistedState={null}
    settings={
      Object {
        "categoryNumber": "",
        "headline": "",
        "label_1": "Label One",
        "label_2": "Label Two",
        "label_3": "",
        "label_4": "",
        "limit": "3",
      }
    }
  >
    <div
      className="css-13nlt1e"
    >
      <Headline
        text=""
      />
      <div>
        <Connect(CategoryPicker)
          categoryId=""
          key=""
          label="Label One"
          onSelect={[Function]}
          selectedId={null}
        >
          <CategoryPicker
            categoryId=""
            fetchCategory={[Function]}
            label="Label One"
            onSelect={[Function]}
            selectedId={null}
            subcategories={
              Array [
                Object {
                  "childrenCount": 2,
                  "id": "1",
                  "isFetching": false,
                  "name": "Category 1",
                },
                Object {
                  "childrenCount": 0,
                  "id": "2",
                  "isFetching": false,
                  "name": "Category 2",
                },
              ]
            }
          >
            <div
              aria-hidden={true}
              className="css-1xsdpry"
              onClick={[Function]}
            >
              <div
                className="css-r60y77"
              >
                Label One
              </div>
              <div
                className="css-1fe6blz"
              >
                common.please_choose
              </div>
            </div>
            <CategorySheet
              items={
                Array [
                  Object {
                    "childrenCount": 2,
                    "id": "1",
                    "isFetching": false,
                    "name": "Category 1",
                  },
                  Object {
                    "childrenCount": 0,
                    "id": "2",
                    "isFetching": false,
                    "name": "Category 2",
                  },
                ]
              }
              label="Label One"
              onClose={[Function]}
              onSelect={[Function]}
              open={false}
              selectedId={null}
            >
              <SheetDrawer
                isOpen={false}
                onClose={[Function]}
                title="Label One"
              >
                <Sheet
                  allowClose={true}
                  animation={Object {}}
                  backdrop={true}
                  className={null}
                  contentClassName={null}
                  duration={300}
                  isOpen={false}
                  onClose={[Function]}
                  onDidClose={[Function]}
                  onDidOpen={[Function]}
                  onOpen={[Function]}
                  title="Label One"
                >
                  <section
                    className={null}
                  >
                    <Drawer
                      alwaysActive={false}
                      animation={
                        Object {
                          "duration": 300,
                          "in": "css-1ldjh2f",
                          "out": "css-171mdnt",
                        }
                      }
                      className="css-1d4fqwq"
                      isOpen={false}
                      onClose={[Function]}
                      onDidClose={[Function]}
                      onDidOpen={[Function]}
                      onOpen={[Function]}
                    />
                    <Backdrop
                      className=""
                      color="#000"
                      duration={200}
                      isVisible={false}
                      level={4}
                      lockBodyScroll={true}
                      onClick={[Function]}
                      opacity={20}
                    >
                      <Transition
                        childrenStyles={
                          Object {
                            "appear": Object {
                              "opacity": 0.2,
                            },
                            "base": Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            },
                            "enter": Object {
                              "opacity": 0.2,
                            },
                            "leave": Object {
                              "opacity": 0,
                            },
                          }
                        }
                        component="div"
                      >
                        <TransitionHooks
                          component="div"
                        >
                          <div />
                        </TransitionHooks>
                      </Transition>
                    </Backdrop>
                  </section>
                </Sheet>
              </SheetDrawer>
            </CategorySheet>
          </CategoryPicker>
        </Connect(CategoryPicker)>
      </div>
      <div
        className="css-k4qf09"
      >
        <Connect(ButtonLink)
          className="css-63oe3q"
          disabled={true}
          flat={false}
          href="/category/6e756c6c"
        >
          <ButtonLink
            className="css-63oe3q"
            disabled={true}
            flat={false}
            href="/category/6e756c6c"
            navigate={[Function]}
            noGap={false}
          >
            <ActionButton
              className="css-63oe3q"
              disabled={true}
              flat={false}
              loading={false}
              noGap={false}
              onClick={[Function]}
              rippleClassName=""
              rippleSize={null}
              testId={null}
              type="secondary"
              wrapContent={true}
            >
              <div
                className="css-omcrdt"
                data-test-id={null}
              >
                <RippleButton
                  className="css-63oe3q"
                  disabled={true}
                  flat={false}
                  onClick={[Function]}
                  rippleClassName=""
                  rippleSize={null}
                  testId="Button"
                  type="secondary"
                  wrapContent={true}
                >
                  <Button
                    className="css-63oe3q"
                    disabled={true}
                    flat={false}
                    onClick={[Function]}
                    testId="Button"
                    type="secondary"
                    wrapContent={true}
                  >
                    <Button
                      className="css-172ttat css-63oe3q"
                      disabled={true}
                      onClick={[Function]}
                      testId="Button"
                    >
                      <button
                        className="css-172ttat css-63oe3q css-1rn65c0"
                        data-test-id="Button"
                        disabled={true}
                        onClick={null}
                      >
                        <div
                          className="css-kwqjom"
                        >
                          <Translate
                            className={null}
                            params={Object {}}
                            role={null}
                            string="common.show_products"
                            transform={null}
                          >
                            <span
                              className={null}
                              role={null}
                            >
                              common.show_products
                            </span>
                          </Translate>
                        </div>
                      </button>
                    </Button>
                  </Button>
                </RippleButton>
              </div>
            </ActionButton>
          </ButtonLink>
        </Connect(ButtonLink)>
      </div>
    </div>
  </NestedCategoryFilter>
</Provider>
`;

exports[`<NestedCategoryFilterWidget /> should render the widget without a headline and persisted state 2`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <NestedCategoryFilter
    id="widget-id"
    persistedState={null}
    settings={
      Object {
        "categoryNumber": "",
        "headline": "",
        "label_1": "Label One",
        "label_2": "Label Two",
        "label_3": "",
        "label_4": "",
        "limit": "3",
      }
    }
  >
    <div
      className="css-13nlt1e"
    >
      <Headline
        text=""
      />
      <div>
        <Connect(CategoryPicker)
          categoryId=""
          key=""
          label="Label One"
          onSelect={[Function]}
          selectedId="2"
        >
          <CategoryPicker
            categoryId=""
            fetchCategory={[Function]}
            label="Label One"
            onSelect={[Function]}
            selectedId="2"
            subcategories={
              Array [
                Object {
                  "childrenCount": 2,
                  "id": "1",
                  "isFetching": false,
                  "name": "Category 1",
                },
                Object {
                  "childrenCount": 0,
                  "id": "2",
                  "isFetching": false,
                  "name": "Category 2",
                },
              ]
            }
          >
            <div
              aria-hidden={true}
              className="css-1xsdpry"
              onClick={[Function]}
            >
              <div
                className="css-r60y77"
              >
                Label One
              </div>
              <div
                className="css-1fe6blz"
              >
                Category 2
              </div>
            </div>
            <CategorySheet
              items={
                Array [
                  Object {
                    "childrenCount": 2,
                    "id": "1",
                    "isFetching": false,
                    "name": "Category 1",
                  },
                  Object {
                    "childrenCount": 0,
                    "id": "2",
                    "isFetching": false,
                    "name": "Category 2",
                  },
                ]
              }
              label="Label One"
              onClose={[Function]}
              onSelect={[Function]}
              open={false}
              selectedId="2"
            >
              <SheetDrawer
                isOpen={false}
                onClose={[Function]}
                title="Label One"
              >
                <Sheet
                  allowClose={true}
                  animation={Object {}}
                  backdrop={true}
                  className={null}
                  contentClassName={null}
                  duration={300}
                  isOpen={false}
                  onClose={[Function]}
                  onDidClose={[Function]}
                  onDidOpen={[Function]}
                  onOpen={[Function]}
                  title="Label One"
                >
                  <section
                    className={null}
                  >
                    <Drawer
                      alwaysActive={false}
                      animation={
                        Object {
                          "duration": 300,
                          "in": "css-1ldjh2f",
                          "out": "css-171mdnt",
                        }
                      }
                      className="css-1d4fqwq"
                      isOpen={false}
                      onClose={[Function]}
                      onDidClose={[Function]}
                      onDidOpen={[Function]}
                      onOpen={[Function]}
                    >
                      <div
                        className="css-1d4fqwq css-1rg7udn css-171mdnt"
                        onAnimationEnd={[Function]}
                        style={
                          Object {
                            "animationDuration": "300ms",
                          }
                        }
                      >
                        <Header
                          allowClose={true}
                          onToggleClose={[Function]}
                          shadow={false}
                          title="Label One"
                        >
                          <Grid
                            className="css-1hncgty"
                            component="div"
                            wrap={false}
                          >
                            <div
                              className="css-1hncgty css-h7r55a"
                            >
                              <button
                                aria-label="common.close"
                                className="css-r4gt00"
                                onClick={[Function]}
                                type="button"
                              >
                                <Ripple
                                  className="css-ugy6xl"
                                  color="#000"
                                  disabled={false}
                                  fill={false}
                                  onClick={[Function]}
                                  onComplete={[Function]}
                                  overflow={false}
                                  size={null}
                                >
                                  <div
                                    className="css-ugy6xl"
                                    data-test-id="Ripple"
                                    onClick={[Function]}
                                    style={null}
                                  >
                                    <Cross
                                      size={24}
                                    >
                                      <Icon
                                        className=""
                                        color={null}
                                        content="<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>"
                                        size={24}
                                        viewBox="0 0 24 24"
                                      >
                                        <svg
                                          className="css-yys9hb "
                                          dangerouslySetInnerHTML={
                                            Object {
                                              "__html": "<path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\"/>",
                                            }
                                          }
                                          style={
                                            Object {
                                              "fill": null,
                                              "fontSize": 24,
                                            }
                                          }
                                          viewBox="0 0 24 24"
                                          xmlns="http://www.w3.org/2000/svg"
                                        />
                                      </Icon>
                                    </Cross>
                                  </div>
                                </Ripple>
                              </button>
                              <GridItem
                                className="css-1mjy0de"
                                component="div"
                                grow={1}
                                role="heading"
                                shrink={1}
                              >
                                <div
                                  className="css-1mjy0de css-1gs0ko2"
                                  role="heading"
                                >
                                  Label One
                                </div>
                              </GridItem>
                            </div>
                          </Grid>
                        </Header>
                        <div
                          className="css-1pp3d82"
                          onScroll={[Function]}
                        >
                          <SheetList
                            className={null}
                            hasImages={false}
                            key=".0"
                            onClose={[Function]}
                            testId={null}
                          >
                            <List
                              className={null}
                              role="listbox"
                            >
                              <ul
                                className={null}
                                role="listbox"
                              >
                                <ListItem
                                  className="css-id5jvr css-171mywc"
                                  isSelected={false}
                                  key="child-0/.$1"
                                  role={null}
                                  tabIndex={0}
                                >
                                  <li
                                    className="css-1p5q8vq css-id5jvr css-171mywc css-16gj3o1"
                                    data-test-id="listItem"
                                    role={null}
                                  >
                                    <div
                                      className="css-1ckzvk7"
                                      data-test-id={null}
                                    >
                                      <SheetItem
                                        item={
                                          Object {
                                            "childrenCount": 2,
                                            "id": "1",
                                            "isFetching": false,
                                            "name": "Category 1",
                                          }
                                        }
                                        key="1"
                                        onClick={[Function]}
                                        selected={false}
                                      >
                                        <button
                                          className="css-zwdy34"
                                          key="1"
                                          onClick={[Function]}
                                          type="button"
                                          value="1"
                                        >
                                          Category 1
                                        </button>
                                      </SheetItem>
                                    </div>
                                  </li>
                                </ListItem>
                                <ListItem
                                  className="css-id5jvr css-171mywc"
                                  isSelected={false}
                                  key="child-1/.$2"
                                  role={null}
                                  tabIndex={0}
                                >
                                  <li
                                    className="css-1p5q8vq css-id5jvr css-171mywc css-16gj3o1"
                                    data-test-id="listItem"
                                    role={null}
                                  >
                                    <div
                                      className="css-1ckzvk7"
                                      data-test-id={null}
                                    >
                                      <SheetItem
                                        item={
                                          Object {
                                            "childrenCount": 0,
                                            "id": "2",
                                            "isFetching": false,
                                            "name": "Category 2",
                                          }
                                        }
                                        key="2"
                                        onClick={[Function]}
                                        selected={true}
                                      >
                                        <button
                                          className="css-1ekqwzo"
                                          key="2"
                                          onClick={[Function]}
                                          type="button"
                                          value="2"
                                        >
                                          Category 2
                                        </button>
                                      </SheetItem>
                                    </div>
                                  </li>
                                </ListItem>
                              </ul>
                            </List>
                          </SheetList>
                        </div>
                      </div>
                    </Drawer>
                    <Backdrop
                      className=""
                      color="#000"
                      duration={200}
                      isVisible={false}
                      level={4}
                      lockBodyScroll={true}
                      onClick={[Function]}
                      opacity={20}
                    >
                      <Transition
                        childrenStyles={
                          Object {
                            "appear": Object {
                              "opacity": 0.2,
                            },
                            "base": Object {
                              "background": "#000",
                              "opacity": 0,
                              "transition": "opacity 200ms ease-out",
                              "zIndex": 4,
                            },
                            "enter": Object {
                              "opacity": 0.2,
                            },
                            "leave": Object {
                              "opacity": 0,
                            },
                          }
                        }
                        component="div"
                      >
                        <TransitionHooks
                          component="div"
                        >
                          <div>
                            <TransitionChild
                              childrenAppearStyle={
                                Object {
                                  "opacity": 0.2,
                                }
                              }
                              childrenBaseStyle={
                                Object {
                                  "background": "#000",
                                  "opacity": 0,
                                  "transition": "opacity 200ms ease-out",
                                  "zIndex": 4,
                                }
                              }
                              childrenEnterStyle={
                                Object {
                                  "opacity": 0.2,
                                }
                              }
                              childrenLeaveStyle={
                                Object {
                                  "opacity": 0,
                                }
                              }
                              key=".$.0"
                            >
                              <div
                                aria-hidden={true}
                                className="css-hlk66h "
                                data-test-id="Backdrop"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "background": "#000",
                                    "opacity": 0,
                                    "transition": "opacity 200ms ease-out",
                                    "zIndex": 4,
                                  }
                                }
                              />
                            </TransitionChild>
                          </div>
                        </TransitionHooks>
                      </Transition>
                    </Backdrop>
                  </section>
                </Sheet>
              </SheetDrawer>
            </CategorySheet>
          </CategoryPicker>
        </Connect(CategoryPicker)>
      </div>
      <div
        className="css-k4qf09"
      >
        <Connect(ButtonLink)
          className="css-63oe3q"
          disabled={false}
          flat={false}
          href="/category/32"
        >
          <ButtonLink
            className="css-63oe3q"
            disabled={false}
            flat={false}
            href="/category/32"
            navigate={[Function]}
            noGap={false}
          >
            <ActionButton
              className="css-63oe3q"
              disabled={false}
              flat={false}
              loading={false}
              noGap={false}
              onClick={[Function]}
              rippleClassName=""
              rippleSize={null}
              testId={null}
              type="secondary"
              wrapContent={true}
            >
              <div
                className="css-omcrdt"
                data-test-id={null}
              >
                <RippleButton
                  className="css-63oe3q"
                  disabled={false}
                  flat={false}
                  onClick={[Function]}
                  rippleClassName=""
                  rippleSize={null}
                  testId="Button"
                  type="secondary"
                  wrapContent={true}
                >
                  <Button
                    className="css-63oe3q"
                    disabled={false}
                    flat={false}
                    onClick={[Function]}
                    testId="Button"
                    type="secondary"
                    wrapContent={false}
                  >
                    <Button
                      className="css-1k9vl9z css-63oe3q"
                      disabled={false}
                      onClick={[Function]}
                      testId="Button"
                    >
                      <button
                        className="css-1k9vl9z css-63oe3q css-1rn65c0"
                        data-test-id="Button"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <Ripple
                          className="css-1fscwua "
                          color="#000"
                          disabled={false}
                          fill={true}
                          onClick={[Function]}
                          onComplete={[Function]}
                          overflow={false}
                          size={null}
                        >
                          <div
                            className="css-1fscwua "
                            data-test-id="Ripple"
                            onClick={[Function]}
                            style={null}
                          >
                            <Translate
                              className={null}
                              params={Object {}}
                              role={null}
                              string="common.show_products"
                              transform={null}
                            >
                              <span
                                className={null}
                                role={null}
                              >
                                common.show_products
                              </span>
                            </Translate>
                          </div>
                        </Ripple>
                      </button>
                    </Button>
                  </Button>
                </RippleButton>
              </div>
            </ActionButton>
          </ButtonLink>
        </Connect(ButtonLink)>
      </div>
    </div>
  </NestedCategoryFilter>
</Provider>
`;
