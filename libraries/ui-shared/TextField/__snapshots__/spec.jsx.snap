// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TextField /> should focus the input 1`] = `
<TextField
  className=""
  disabled={false}
  errorText=""
  hintText=""
  inputComponent="input"
  isControlled={false}
  label=""
  multiLine={false}
  name="test-input"
  onChange={[Function]}
  onFocusChange={[MockFunction]}
  onSanitize={[Function]}
  onValidate={[Function]}
  password={false}
  required={false}
  setRef={[Function]}
  showErrorText={true}
  translateErrorText={true}
  type="text"
  value=""
>
  <div
    className="css-e4z0u6 textField ui-shared__text-field"
  >
    <Hint
      hintText=""
      visible={false}
    >
      <div
        className="css-tnfb18 css-1jyyyen hint"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </Hint>
    <Label
      hasErrorMessage={false}
      isFloating={false}
      isFocused={false}
      label=""
      name="test-input"
    >
      <label
        aria-hidden={true}
        className="css-xrreyh css-1fekhao label"
        htmlFor="test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </label>
    </Label>
    <FormElement
      attributes={
        Object {
          "aria-describedby": null,
          "aria-invalid": false,
        }
      }
      disabled={false}
      id="test-input"
      inputComponent="input"
      isControlled={false}
      multiLine={false}
      name="test-input"
      onChange={[Function]}
      onFocusChange={[Function]}
      onSanitize={[Function]}
      onValidate={[Function]}
      password={false}
      required={false}
      setRef={[Function]}
      type="text"
      value=""
    >
      <_default
        attributes={
          Object {
            "aria-describedby": null,
            "aria-invalid": false,
          }
        }
        className="css-keangt"
        disabled={false}
        id="test-input"
        inputComponent="input"
        isControlled={false}
        multiLine={false}
        name="test-input"
        onChange={[Function]}
        onFocusChange={[Function]}
        onSanitize={[Function]}
        onValidate={[Function]}
        password={false}
        required={false}
        setRef={[Function]}
        type="text"
        validateOnBlur={true}
        value=""
      >
        <SimpleInput
          attributes={
            Object {
              "aria-describedby": null,
              "aria-invalid": false,
            }
          }
          autoComplete={false}
          autoCorrect={false}
          className="css-keangt"
          disabled={false}
          id="test-input"
          inputComponent="input"
          isControlled={false}
          maxLength=""
          multiLine={false}
          name="test-input"
          onChange={[Function]}
          onFocusChange={[Function]}
          onKeyPress={[Function]}
          onSanitize={[Function]}
          onValidate={[Function]}
          password={false}
          required={false}
          setRef={[Function]}
          type="text"
          validateOnBlur={true}
          value=""
        >
          <input
            aria-describedby={null}
            aria-invalid={false}
            autoComplete="off"
            autoCorrect="off"
            className="css-keangt simpleInput common__simple-input"
            disabled={false}
            id="test-input"
            inputMode={null}
            maxLength=""
            min={null}
            name="test-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onInput={null}
            onKeyPress={[Function]}
            pattern={null}
            required={false}
            step={null}
            type="text"
            value=""
          />
        </SimpleInput>
      </_default>
    </FormElement>
    <Underline
      hasErrorMessage={false}
      isFocused={false}
    >
      <div
        aria-hidden={true}
        className="css-ycal4l underline"
      >
        <div
          className="css-1tpmuef"
          style={
            Object {
              "borderBottomColor": "var(--color-primary, #fa5400)",
              "transform": "scale3d(0,1,1)",
            }
          }
        />
      </div>
    </Underline>
    <ErrorText
      ariaHidden={false}
      className=""
      elementName="test-input"
      errorText=""
      translate={true}
      validationError={null}
    >
      <div
        aria-atomic="true"
        aria-hidden={false}
        aria-live="assertive"
        className="css-of8bei errorText"
        id="ariaError-test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </ErrorText>
  </div>
</TextField>
`;

exports[`<TextField /> should receive the correct value while typing 1`] = `
<TextField
  className=""
  disabled={false}
  errorText=""
  hintText=""
  inputComponent="input"
  isControlled={false}
  label=""
  multiLine={false}
  name="test-input"
  onChange={[Function]}
  onFocusChange={[Function]}
  onSanitize={[Function]}
  onValidate={[Function]}
  password={false}
  required={false}
  setRef={[Function]}
  showErrorText={true}
  translateErrorText={true}
  type="text"
  value=""
>
  <div
    className="css-e4z0u6 textField ui-shared__text-field"
  >
    <Hint
      hintText=""
      visible={false}
    >
      <div
        className="css-tnfb18 css-1jyyyen hint"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </Hint>
    <Label
      hasErrorMessage={false}
      isFloating={false}
      isFocused={false}
      label=""
      name="test-input"
    >
      <label
        aria-hidden={true}
        className="css-xrreyh css-1fekhao label"
        htmlFor="test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </label>
    </Label>
    <FormElement
      attributes={
        Object {
          "aria-describedby": null,
          "aria-invalid": false,
        }
      }
      disabled={false}
      id="test-input"
      inputComponent="input"
      isControlled={false}
      multiLine={false}
      name="test-input"
      onChange={[Function]}
      onFocusChange={[Function]}
      onSanitize={[Function]}
      onValidate={[Function]}
      password={false}
      required={false}
      setRef={[Function]}
      type="text"
      value=""
    >
      <_default
        attributes={
          Object {
            "aria-describedby": null,
            "aria-invalid": false,
          }
        }
        className="css-keangt"
        disabled={false}
        id="test-input"
        inputComponent="input"
        isControlled={false}
        multiLine={false}
        name="test-input"
        onChange={[Function]}
        onFocusChange={[Function]}
        onSanitize={[Function]}
        onValidate={[Function]}
        password={false}
        required={false}
        setRef={[Function]}
        type="text"
        validateOnBlur={true}
        value=""
      >
        <SimpleInput
          attributes={
            Object {
              "aria-describedby": null,
              "aria-invalid": false,
            }
          }
          autoComplete={false}
          autoCorrect={false}
          className="css-keangt"
          disabled={false}
          id="test-input"
          inputComponent="input"
          isControlled={false}
          maxLength=""
          multiLine={false}
          name="test-input"
          onChange={[Function]}
          onFocusChange={[Function]}
          onKeyPress={[Function]}
          onSanitize={[Function]}
          onValidate={[Function]}
          password={false}
          required={false}
          setRef={[Function]}
          type="text"
          validateOnBlur={true}
          value=""
        >
          <input
            aria-describedby={null}
            aria-invalid={false}
            autoComplete="off"
            autoCorrect="off"
            className="css-keangt simpleInput common__simple-input"
            disabled={false}
            id="test-input"
            inputMode={null}
            maxLength=""
            min={null}
            name="test-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onInput={null}
            onKeyPress={[Function]}
            pattern={null}
            required={false}
            step={null}
            type="text"
            value="foobar"
          />
        </SimpleInput>
      </_default>
    </FormElement>
    <Underline
      hasErrorMessage={false}
      isFocused={false}
    >
      <div
        aria-hidden={true}
        className="css-ycal4l underline"
      >
        <div
          className="css-1tpmuef"
          style={
            Object {
              "borderBottomColor": "var(--color-primary, #fa5400)",
              "transform": "scale3d(0,1,1)",
            }
          }
        />
      </div>
    </Underline>
    <ErrorText
      ariaHidden={false}
      className=""
      elementName="test-input"
      errorText=""
      translate={true}
      validationError={null}
    >
      <div
        aria-atomic="true"
        aria-hidden={false}
        aria-live="assertive"
        className="css-of8bei errorText"
        id="ariaError-test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </ErrorText>
  </div>
</TextField>
`;

exports[`<TextField /> should render a simple text field 1`] = `
<TextField
  className=""
  disabled={false}
  errorText=""
  hintText=""
  inputComponent="input"
  isControlled={false}
  label=""
  multiLine={false}
  name="test-input"
  onChange={[Function]}
  onFocusChange={[Function]}
  onSanitize={[Function]}
  onValidate={[Function]}
  password={false}
  required={false}
  setRef={[Function]}
  showErrorText={true}
  translateErrorText={true}
  type="text"
  value=""
>
  <div
    className="css-e4z0u6 textField ui-shared__text-field"
  >
    <Hint
      hintText=""
      visible={false}
    >
      <div
        className="css-tnfb18 css-1jyyyen hint"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </Hint>
    <Label
      hasErrorMessage={false}
      isFloating={false}
      isFocused={false}
      label=""
      name="test-input"
    >
      <label
        aria-hidden={true}
        className="css-xrreyh css-1fekhao label"
        htmlFor="test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </label>
    </Label>
    <FormElement
      attributes={
        Object {
          "aria-describedby": null,
          "aria-invalid": false,
        }
      }
      disabled={false}
      id="test-input"
      inputComponent="input"
      isControlled={false}
      multiLine={false}
      name="test-input"
      onChange={[Function]}
      onFocusChange={[Function]}
      onSanitize={[Function]}
      onValidate={[Function]}
      password={false}
      required={false}
      setRef={[Function]}
      type="text"
      value=""
    >
      <_default
        attributes={
          Object {
            "aria-describedby": null,
            "aria-invalid": false,
          }
        }
        className="css-keangt"
        disabled={false}
        id="test-input"
        inputComponent="input"
        isControlled={false}
        multiLine={false}
        name="test-input"
        onChange={[Function]}
        onFocusChange={[Function]}
        onSanitize={[Function]}
        onValidate={[Function]}
        password={false}
        required={false}
        setRef={[Function]}
        type="text"
        validateOnBlur={true}
        value=""
      >
        <SimpleInput
          attributes={
            Object {
              "aria-describedby": null,
              "aria-invalid": false,
            }
          }
          autoComplete={false}
          autoCorrect={false}
          className="css-keangt"
          disabled={false}
          id="test-input"
          inputComponent="input"
          isControlled={false}
          maxLength=""
          multiLine={false}
          name="test-input"
          onChange={[Function]}
          onFocusChange={[Function]}
          onKeyPress={[Function]}
          onSanitize={[Function]}
          onValidate={[Function]}
          password={false}
          required={false}
          setRef={[Function]}
          type="text"
          validateOnBlur={true}
          value=""
        >
          <input
            aria-describedby={null}
            aria-invalid={false}
            autoComplete="off"
            autoCorrect="off"
            className="css-keangt simpleInput common__simple-input"
            disabled={false}
            id="test-input"
            inputMode={null}
            maxLength=""
            min={null}
            name="test-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onInput={null}
            onKeyPress={[Function]}
            pattern={null}
            required={false}
            step={null}
            type="text"
            value=""
          />
        </SimpleInput>
      </_default>
    </FormElement>
    <Underline
      hasErrorMessage={false}
      isFocused={false}
    >
      <div
        aria-hidden={true}
        className="css-ycal4l underline"
      >
        <div
          className="css-1tpmuef"
          style={
            Object {
              "borderBottomColor": "var(--color-primary, #fa5400)",
              "transform": "scale3d(0,1,1)",
            }
          }
        />
      </div>
    </Underline>
    <ErrorText
      ariaHidden={false}
      className=""
      elementName="test-input"
      errorText=""
      translate={true}
      validationError={null}
    >
      <div
        aria-atomic="true"
        aria-hidden={false}
        aria-live="assertive"
        className="css-of8bei errorText"
        id="ariaError-test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </ErrorText>
  </div>
</TextField>
`;

exports[`<TextField /> should render the text field as password 1`] = `
<TextField
  className=""
  disabled={false}
  errorText=""
  hintText=""
  inputComponent="input"
  isControlled={false}
  label=""
  multiLine={false}
  name="test-input"
  onChange={[Function]}
  onFocusChange={[Function]}
  onSanitize={[Function]}
  onValidate={[Function]}
  password={true}
  required={false}
  setRef={[Function]}
  showErrorText={true}
  translateErrorText={true}
  type="text"
  value=""
>
  <div
    className="css-e4z0u6 textField ui-shared__text-field"
  >
    <Hint
      hintText=""
      visible={false}
    >
      <div
        className="css-tnfb18 css-1jyyyen hint"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </Hint>
    <Label
      hasErrorMessage={false}
      isFloating={false}
      isFocused={false}
      label=""
      name="test-input"
    >
      <label
        aria-hidden={true}
        className="css-xrreyh css-1fekhao label"
        htmlFor="test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </label>
    </Label>
    <FormElement
      attributes={
        Object {
          "aria-describedby": null,
          "aria-invalid": false,
        }
      }
      disabled={false}
      id="test-input"
      inputComponent="input"
      isControlled={false}
      multiLine={false}
      name="test-input"
      onChange={[Function]}
      onFocusChange={[Function]}
      onSanitize={[Function]}
      onValidate={[Function]}
      password={true}
      required={false}
      setRef={[Function]}
      type="text"
      value=""
    >
      <_default
        attributes={
          Object {
            "aria-describedby": null,
            "aria-invalid": false,
          }
        }
        className="css-keangt"
        disabled={false}
        id="test-input"
        inputComponent="input"
        isControlled={false}
        multiLine={false}
        name="test-input"
        onChange={[Function]}
        onFocusChange={[Function]}
        onSanitize={[Function]}
        onValidate={[Function]}
        password={true}
        required={false}
        setRef={[Function]}
        type="text"
        validateOnBlur={true}
        value=""
      >
        <SimpleInput
          attributes={
            Object {
              "aria-describedby": null,
              "aria-invalid": false,
            }
          }
          autoComplete={false}
          autoCorrect={false}
          className="css-keangt"
          disabled={false}
          id="test-input"
          inputComponent="input"
          isControlled={false}
          maxLength=""
          multiLine={false}
          name="test-input"
          onChange={[Function]}
          onFocusChange={[Function]}
          onKeyPress={[Function]}
          onSanitize={[Function]}
          onValidate={[Function]}
          password={true}
          required={false}
          setRef={[Function]}
          type="text"
          validateOnBlur={true}
          value=""
        >
          <input
            aria-describedby={null}
            aria-invalid={false}
            autoComplete="off"
            autoCorrect="off"
            className="css-keangt simpleInput common__simple-input"
            disabled={false}
            id="test-input"
            inputMode={null}
            maxLength=""
            min={null}
            name="test-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onInput={null}
            onKeyPress={[Function]}
            pattern={null}
            required={false}
            step={null}
            type="password"
            value=""
          />
        </SimpleInput>
      </_default>
    </FormElement>
    <Underline
      hasErrorMessage={false}
      isFocused={false}
    >
      <div
        aria-hidden={true}
        className="css-ycal4l underline"
      >
        <div
          className="css-1tpmuef"
          style={
            Object {
              "borderBottomColor": "var(--color-primary, #fa5400)",
              "transform": "scale3d(0,1,1)",
            }
          }
        />
      </div>
    </Underline>
    <ErrorText
      ariaHidden={false}
      className=""
      elementName="test-input"
      errorText=""
      translate={true}
      validationError={null}
    >
      <div
        aria-atomic="true"
        aria-hidden={false}
        aria-live="assertive"
        className="css-of8bei errorText"
        id="ariaError-test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </ErrorText>
  </div>
</TextField>
`;

exports[`<TextField /> should render the text field with a default value 1`] = `
<TextField
  className=""
  disabled={false}
  errorText=""
  hintText=""
  inputComponent="input"
  isControlled={false}
  label=""
  multiLine={false}
  name="test-input"
  onChange={[Function]}
  onFocusChange={[Function]}
  onSanitize={[Function]}
  onValidate={[Function]}
  password={false}
  required={false}
  setRef={[Function]}
  showErrorText={true}
  translateErrorText={true}
  type="text"
  value="FooBar"
>
  <div
    className="css-e4z0u6 textField ui-shared__text-field"
  >
    <Hint
      hintText=""
      visible={false}
    >
      <div
        className="css-tnfb18 css-1jyyyen hint"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </Hint>
    <Label
      hasErrorMessage={false}
      isFloating={true}
      isFocused={false}
      label=""
      name="test-input"
    >
      <label
        aria-hidden={true}
        className="css-xrreyh css-16msjt6 css-1fekhao label floating"
        htmlFor="test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </label>
    </Label>
    <FormElement
      attributes={
        Object {
          "aria-describedby": null,
          "aria-invalid": false,
        }
      }
      disabled={false}
      id="test-input"
      inputComponent="input"
      isControlled={false}
      multiLine={false}
      name="test-input"
      onChange={[Function]}
      onFocusChange={[Function]}
      onSanitize={[Function]}
      onValidate={[Function]}
      password={false}
      required={false}
      setRef={[Function]}
      type="text"
      value="FooBar"
    >
      <_default
        attributes={
          Object {
            "aria-describedby": null,
            "aria-invalid": false,
          }
        }
        className="css-keangt"
        disabled={false}
        id="test-input"
        inputComponent="input"
        isControlled={false}
        multiLine={false}
        name="test-input"
        onChange={[Function]}
        onFocusChange={[Function]}
        onSanitize={[Function]}
        onValidate={[Function]}
        password={false}
        required={false}
        setRef={[Function]}
        type="text"
        validateOnBlur={true}
        value="FooBar"
      >
        <SimpleInput
          attributes={
            Object {
              "aria-describedby": null,
              "aria-invalid": false,
            }
          }
          autoComplete={false}
          autoCorrect={false}
          className="css-keangt"
          disabled={false}
          id="test-input"
          inputComponent="input"
          isControlled={false}
          maxLength=""
          multiLine={false}
          name="test-input"
          onChange={[Function]}
          onFocusChange={[Function]}
          onKeyPress={[Function]}
          onSanitize={[Function]}
          onValidate={[Function]}
          password={false}
          required={false}
          setRef={[Function]}
          type="text"
          validateOnBlur={true}
          value="FooBar"
        >
          <input
            aria-describedby={null}
            aria-invalid={false}
            autoComplete="off"
            autoCorrect="off"
            className="css-keangt simpleInput common__simple-input"
            disabled={false}
            id="test-input"
            inputMode={null}
            maxLength=""
            min={null}
            name="test-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onInput={null}
            onKeyPress={[Function]}
            pattern={null}
            required={false}
            step={null}
            type="text"
            value="FooBar"
          />
        </SimpleInput>
      </_default>
    </FormElement>
    <Underline
      hasErrorMessage={false}
      isFocused={false}
    >
      <div
        aria-hidden={true}
        className="css-ycal4l underline"
      >
        <div
          className="css-1tpmuef"
          style={
            Object {
              "borderBottomColor": "var(--color-primary, #fa5400)",
              "transform": "scale3d(0,1,1)",
            }
          }
        />
      </div>
    </Underline>
    <ErrorText
      ariaHidden={false}
      className=""
      elementName="test-input"
      errorText=""
      translate={true}
      validationError={null}
    >
      <div
        aria-atomic="true"
        aria-hidden={false}
        aria-live="assertive"
        className="css-of8bei errorText"
        id="ariaError-test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </ErrorText>
  </div>
</TextField>
`;

exports[`<TextField /> should replace the error text with custom validation error 1`] = `
<TextField
  className=""
  disabled={false}
  errorText=""
  hintText=""
  inputComponent="input"
  isControlled={false}
  label=""
  multiLine={false}
  name="test-input"
  onChange={[Function]}
  onFocusChange={[Function]}
  onSanitize={[Function]}
  onValidate={[Function]}
  password={false}
  required={false}
  setRef={[Function]}
  showErrorText={true}
  translateErrorText={true}
  type="text"
  value=""
>
  <div
    className="css-e4z0u6 textField ui-shared__text-field"
  >
    <Hint
      hintText=""
      visible={false}
    >
      <div
        className="css-tnfb18 css-1jyyyen hint"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </Hint>
    <Label
      hasErrorMessage={true}
      isFloating={false}
      isFocused={false}
      label=""
      name="test-input"
    >
      <label
        aria-hidden={true}
        className="css-xrreyh css-1fekhao label"
        htmlFor="test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </label>
    </Label>
    <FormElement
      attributes={
        Object {
          "aria-describedby": "ariaError-test-input",
          "aria-invalid": false,
        }
      }
      disabled={false}
      id="test-input"
      inputComponent="input"
      isControlled={false}
      multiLine={false}
      name="test-input"
      onChange={[Function]}
      onFocusChange={[Function]}
      onSanitize={[Function]}
      onValidate={[Function]}
      password={false}
      required={false}
      setRef={[Function]}
      type="text"
      value=""
    >
      <_default
        attributes={
          Object {
            "aria-describedby": "ariaError-test-input",
            "aria-invalid": false,
          }
        }
        className="css-keangt"
        disabled={false}
        id="test-input"
        inputComponent="input"
        isControlled={false}
        multiLine={false}
        name="test-input"
        onChange={[Function]}
        onFocusChange={[Function]}
        onSanitize={[Function]}
        onValidate={[Function]}
        password={false}
        required={false}
        setRef={[Function]}
        type="text"
        validateOnBlur={true}
        value=""
      >
        <SimpleInput
          attributes={
            Object {
              "aria-describedby": "ariaError-test-input",
              "aria-invalid": false,
            }
          }
          autoComplete={false}
          autoCorrect={false}
          className="css-keangt"
          disabled={false}
          id="test-input"
          inputComponent="input"
          isControlled={false}
          maxLength=""
          multiLine={false}
          name="test-input"
          onChange={[Function]}
          onFocusChange={[Function]}
          onKeyPress={[Function]}
          onSanitize={[Function]}
          onValidate={[Function]}
          password={false}
          required={false}
          setRef={[Function]}
          type="text"
          validateOnBlur={true}
          value=""
        >
          <input
            aria-describedby="ariaError-test-input"
            aria-invalid={false}
            autoComplete="off"
            autoCorrect="off"
            className="css-keangt simpleInput common__simple-input"
            disabled={false}
            id="test-input"
            inputMode={null}
            maxLength=""
            min={null}
            name="test-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onInput={null}
            onKeyPress={[Function]}
            pattern={null}
            required={false}
            step={null}
            type="text"
            value=""
          />
        </SimpleInput>
      </_default>
    </FormElement>
    <Underline
      hasErrorMessage={true}
      isFocused={false}
    >
      <div
        aria-hidden={true}
        className="css-ycal4l underline"
      >
        <div
          className="css-1tpmuef"
          style={
            Object {
              "borderBottomColor": "var(--color-state-alert, #ff0000)",
            }
          }
        />
      </div>
    </Underline>
    <ErrorText
      ariaHidden={false}
      className=""
      elementName="test-input"
      errorText=""
      translate={true}
      validationError="Custom validation error"
    >
      <div
        aria-atomic="true"
        aria-hidden={false}
        aria-live="assertive"
        className="css-of8bei errorText"
        id="ariaError-test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string="Custom validation error"
          transform={null}
        >
          <span
            className={null}
            role={null}
          >
            Custom validation error
          </span>
        </Translate>
      </div>
    </ErrorText>
  </div>
</TextField>
`;

exports[`<TextField /> should sanitize the input 1`] = `
<TextField
  className=""
  disabled={false}
  errorText=""
  hintText=""
  inputComponent="input"
  isControlled={false}
  label=""
  multiLine={false}
  name="test-input"
  onChange={[Function]}
  onFocusChange={[Function]}
  onSanitize={[Function]}
  onValidate={[Function]}
  password={false}
  required={false}
  setRef={[Function]}
  showErrorText={true}
  translateErrorText={true}
  type="text"
  value=""
>
  <div
    className="css-e4z0u6 textField ui-shared__text-field"
  >
    <Hint
      hintText=""
      visible={false}
    >
      <div
        className="css-tnfb18 css-1jyyyen hint"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </Hint>
    <Label
      hasErrorMessage={false}
      isFloating={false}
      isFocused={false}
      label=""
      name="test-input"
    >
      <label
        aria-hidden={true}
        className="css-xrreyh css-1fekhao label"
        htmlFor="test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </label>
    </Label>
    <FormElement
      attributes={
        Object {
          "aria-describedby": null,
          "aria-invalid": false,
        }
      }
      disabled={false}
      id="test-input"
      inputComponent="input"
      isControlled={false}
      multiLine={false}
      name="test-input"
      onChange={[Function]}
      onFocusChange={[Function]}
      onSanitize={[Function]}
      onValidate={[Function]}
      password={false}
      required={false}
      setRef={[Function]}
      type="text"
      value=""
    >
      <_default
        attributes={
          Object {
            "aria-describedby": null,
            "aria-invalid": false,
          }
        }
        className="css-keangt"
        disabled={false}
        id="test-input"
        inputComponent="input"
        isControlled={false}
        multiLine={false}
        name="test-input"
        onChange={[Function]}
        onFocusChange={[Function]}
        onSanitize={[Function]}
        onValidate={[Function]}
        password={false}
        required={false}
        setRef={[Function]}
        type="text"
        validateOnBlur={true}
        value=""
      >
        <SimpleInput
          attributes={
            Object {
              "aria-describedby": null,
              "aria-invalid": false,
            }
          }
          autoComplete={false}
          autoCorrect={false}
          className="css-keangt"
          disabled={false}
          id="test-input"
          inputComponent="input"
          isControlled={false}
          maxLength=""
          multiLine={false}
          name="test-input"
          onChange={[Function]}
          onFocusChange={[Function]}
          onKeyPress={[Function]}
          onSanitize={[Function]}
          onValidate={[Function]}
          password={false}
          required={false}
          setRef={[Function]}
          type="text"
          validateOnBlur={true}
          value=""
        >
          <input
            aria-describedby={null}
            aria-invalid={false}
            autoComplete="off"
            autoCorrect="off"
            className="css-keangt simpleInput common__simple-input"
            disabled={false}
            id="test-input"
            inputMode={null}
            maxLength=""
            min={null}
            name="test-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onInput={null}
            onKeyPress={[Function]}
            pattern={null}
            required={false}
            step={null}
            type="text"
            value="FOOBAR"
          />
        </SimpleInput>
      </_default>
    </FormElement>
    <Underline
      hasErrorMessage={false}
      isFocused={false}
    >
      <div
        aria-hidden={true}
        className="css-ycal4l underline"
      >
        <div
          className="css-1tpmuef"
          style={
            Object {
              "borderBottomColor": "var(--color-primary, #fa5400)",
              "transform": "scale3d(0,1,1)",
            }
          }
        />
      </div>
    </Underline>
    <ErrorText
      ariaHidden={false}
      className=""
      elementName="test-input"
      errorText=""
      translate={true}
      validationError={null}
    >
      <div
        aria-atomic="true"
        aria-hidden={false}
        aria-live="assertive"
        className="css-of8bei errorText"
        id="ariaError-test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </ErrorText>
  </div>
</TextField>
`;

exports[`<TextField /> should show the error message 1`] = `
<TextField
  className=""
  disabled={false}
  errorText="This is an error here"
  hintText=""
  inputComponent="input"
  isControlled={false}
  label=""
  multiLine={false}
  name="test-input"
  onChange={[Function]}
  onFocusChange={[Function]}
  onSanitize={[Function]}
  onValidate={[Function]}
  password={false}
  required={false}
  setRef={[Function]}
  showErrorText={true}
  translateErrorText={true}
  type="text"
  value=""
>
  <div
    className="css-e4z0u6 textField ui-shared__text-field"
  >
    <Hint
      hintText=""
      visible={false}
    >
      <div
        className="css-tnfb18 css-1jyyyen hint"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </Hint>
    <Label
      hasErrorMessage={true}
      isFloating={false}
      isFocused={false}
      label=""
      name="test-input"
    >
      <label
        aria-hidden={true}
        className="css-xrreyh css-1fekhao label"
        htmlFor="test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </label>
    </Label>
    <FormElement
      attributes={
        Object {
          "aria-describedby": "ariaError-test-input",
          "aria-invalid": true,
        }
      }
      disabled={false}
      id="test-input"
      inputComponent="input"
      isControlled={false}
      multiLine={false}
      name="test-input"
      onChange={[Function]}
      onFocusChange={[Function]}
      onSanitize={[Function]}
      onValidate={[Function]}
      password={false}
      required={false}
      setRef={[Function]}
      type="text"
      value=""
    >
      <_default
        attributes={
          Object {
            "aria-describedby": "ariaError-test-input",
            "aria-invalid": true,
          }
        }
        className="css-keangt"
        disabled={false}
        id="test-input"
        inputComponent="input"
        isControlled={false}
        multiLine={false}
        name="test-input"
        onChange={[Function]}
        onFocusChange={[Function]}
        onSanitize={[Function]}
        onValidate={[Function]}
        password={false}
        required={false}
        setRef={[Function]}
        type="text"
        validateOnBlur={true}
        value=""
      >
        <SimpleInput
          attributes={
            Object {
              "aria-describedby": "ariaError-test-input",
              "aria-invalid": true,
            }
          }
          autoComplete={false}
          autoCorrect={false}
          className="css-keangt"
          disabled={false}
          id="test-input"
          inputComponent="input"
          isControlled={false}
          maxLength=""
          multiLine={false}
          name="test-input"
          onChange={[Function]}
          onFocusChange={[Function]}
          onKeyPress={[Function]}
          onSanitize={[Function]}
          onValidate={[Function]}
          password={false}
          required={false}
          setRef={[Function]}
          type="text"
          validateOnBlur={true}
          value=""
        >
          <input
            aria-describedby="ariaError-test-input"
            aria-invalid={true}
            autoComplete="off"
            autoCorrect="off"
            className="css-keangt simpleInput common__simple-input"
            disabled={false}
            id="test-input"
            inputMode={null}
            maxLength=""
            min={null}
            name="test-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onInput={null}
            onKeyPress={[Function]}
            pattern={null}
            required={false}
            step={null}
            type="text"
            value=""
          />
        </SimpleInput>
      </_default>
    </FormElement>
    <Underline
      hasErrorMessage={true}
      isFocused={false}
    >
      <div
        aria-hidden={true}
        className="css-ycal4l underline"
      >
        <div
          className="css-1tpmuef"
          style={
            Object {
              "borderBottomColor": "var(--color-state-alert, #ff0000)",
            }
          }
        />
      </div>
    </Underline>
    <ErrorText
      ariaHidden={false}
      className=""
      elementName="test-input"
      errorText="This is an error here"
      translate={true}
      validationError={null}
    >
      <div
        aria-atomic="true"
        aria-hidden={false}
        aria-live="assertive"
        className="css-of8bei errorText"
        id="ariaError-test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string="This is an error here"
          transform={null}
        >
          <span
            className={null}
            role={null}
          >
            This is an error here
          </span>
        </Translate>
      </div>
    </ErrorText>
  </div>
</TextField>
`;

exports[`<TextField /> should show the hint text 1`] = `
<TextField
  className=""
  disabled={false}
  errorText=""
  hintText="This is the hint text"
  inputComponent="input"
  isControlled={false}
  label=""
  multiLine={false}
  name="test-input"
  onChange={[Function]}
  onFocusChange={[Function]}
  onSanitize={[Function]}
  onValidate={[Function]}
  password={false}
  required={false}
  setRef={[Function]}
  showErrorText={true}
  translateErrorText={true}
  type="text"
  value=""
>
  <div
    className="css-e4z0u6 textField ui-shared__text-field"
  >
    <Hint
      hintText="This is the hint text"
      visible={false}
    >
      <div
        className="css-tnfb18 css-1jyyyen hint"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string="This is the hint text"
          transform={null}
        >
          <span
            className={null}
            role={null}
          >
            This is the hint text
          </span>
        </Translate>
      </div>
    </Hint>
    <Label
      hasErrorMessage={false}
      isFloating={false}
      isFocused={false}
      label=""
      name="test-input"
    >
      <label
        aria-hidden={true}
        className="css-xrreyh css-1fekhao label"
        htmlFor="test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </label>
    </Label>
    <FormElement
      attributes={
        Object {
          "aria-describedby": null,
          "aria-invalid": false,
        }
      }
      disabled={false}
      id="test-input"
      inputComponent="input"
      isControlled={false}
      multiLine={false}
      name="test-input"
      onChange={[Function]}
      onFocusChange={[Function]}
      onSanitize={[Function]}
      onValidate={[Function]}
      password={false}
      required={false}
      setRef={[Function]}
      type="text"
      value=""
    >
      <_default
        attributes={
          Object {
            "aria-describedby": null,
            "aria-invalid": false,
          }
        }
        className="css-keangt"
        disabled={false}
        id="test-input"
        inputComponent="input"
        isControlled={false}
        multiLine={false}
        name="test-input"
        onChange={[Function]}
        onFocusChange={[Function]}
        onSanitize={[Function]}
        onValidate={[Function]}
        password={false}
        required={false}
        setRef={[Function]}
        type="text"
        validateOnBlur={true}
        value=""
      >
        <SimpleInput
          attributes={
            Object {
              "aria-describedby": null,
              "aria-invalid": false,
            }
          }
          autoComplete={false}
          autoCorrect={false}
          className="css-keangt"
          disabled={false}
          id="test-input"
          inputComponent="input"
          isControlled={false}
          maxLength=""
          multiLine={false}
          name="test-input"
          onChange={[Function]}
          onFocusChange={[Function]}
          onKeyPress={[Function]}
          onSanitize={[Function]}
          onValidate={[Function]}
          password={false}
          required={false}
          setRef={[Function]}
          type="text"
          validateOnBlur={true}
          value=""
        >
          <input
            aria-describedby={null}
            aria-invalid={false}
            autoComplete="off"
            autoCorrect="off"
            className="css-keangt simpleInput common__simple-input"
            disabled={false}
            id="test-input"
            inputMode={null}
            maxLength=""
            min={null}
            name="test-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onInput={null}
            onKeyPress={[Function]}
            pattern={null}
            required={false}
            step={null}
            type="text"
            value=""
          />
        </SimpleInput>
      </_default>
    </FormElement>
    <Underline
      hasErrorMessage={false}
      isFocused={false}
    >
      <div
        aria-hidden={true}
        className="css-ycal4l underline"
      >
        <div
          className="css-1tpmuef"
          style={
            Object {
              "borderBottomColor": "var(--color-primary, #fa5400)",
              "transform": "scale3d(0,1,1)",
            }
          }
        />
      </div>
    </Underline>
    <ErrorText
      ariaHidden={false}
      className=""
      elementName="test-input"
      errorText=""
      translate={true}
      validationError={null}
    >
      <div
        aria-atomic="true"
        aria-hidden={false}
        aria-live="assertive"
        className="css-of8bei errorText"
        id="ariaError-test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </ErrorText>
  </div>
</TextField>
`;

exports[`<TextField /> should show the label 1`] = `
<TextField
  className=""
  disabled={false}
  errorText=""
  hintText=""
  inputComponent="input"
  isControlled={false}
  label="This is the label"
  multiLine={false}
  name="test-input"
  onChange={[Function]}
  onFocusChange={[Function]}
  onSanitize={[Function]}
  onValidate={[Function]}
  password={false}
  required={false}
  setRef={[Function]}
  showErrorText={true}
  translateErrorText={true}
  type="text"
  value=""
>
  <div
    className="css-e4z0u6 textField ui-shared__text-field"
  >
    <Hint
      hintText=""
      visible={false}
    >
      <div
        className="css-tnfb18 css-1jyyyen hint"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </Hint>
    <Label
      hasErrorMessage={false}
      isFloating={false}
      isFocused={false}
      label="This is the label"
      name="test-input"
    >
      <label
        aria-hidden={true}
        className="css-xrreyh css-1fekhao label"
        htmlFor="test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string="This is the label"
          transform={null}
        >
          <span
            className={null}
            role={null}
          >
            This is the label
          </span>
        </Translate>
      </label>
    </Label>
    <FormElement
      attributes={
        Object {
          "aria-describedby": null,
          "aria-invalid": false,
        }
      }
      disabled={false}
      id="test-input"
      inputComponent="input"
      isControlled={false}
      multiLine={false}
      name="test-input"
      onChange={[Function]}
      onFocusChange={[Function]}
      onSanitize={[Function]}
      onValidate={[Function]}
      password={false}
      required={false}
      setRef={[Function]}
      type="text"
      value=""
    >
      <_default
        attributes={
          Object {
            "aria-describedby": null,
            "aria-invalid": false,
          }
        }
        className="css-keangt"
        disabled={false}
        id="test-input"
        inputComponent="input"
        isControlled={false}
        multiLine={false}
        name="test-input"
        onChange={[Function]}
        onFocusChange={[Function]}
        onSanitize={[Function]}
        onValidate={[Function]}
        password={false}
        required={false}
        setRef={[Function]}
        type="text"
        validateOnBlur={true}
        value=""
      >
        <SimpleInput
          attributes={
            Object {
              "aria-describedby": null,
              "aria-invalid": false,
            }
          }
          autoComplete={false}
          autoCorrect={false}
          className="css-keangt"
          disabled={false}
          id="test-input"
          inputComponent="input"
          isControlled={false}
          maxLength=""
          multiLine={false}
          name="test-input"
          onChange={[Function]}
          onFocusChange={[Function]}
          onKeyPress={[Function]}
          onSanitize={[Function]}
          onValidate={[Function]}
          password={false}
          required={false}
          setRef={[Function]}
          type="text"
          validateOnBlur={true}
          value=""
        >
          <input
            aria-describedby={null}
            aria-invalid={false}
            autoComplete="off"
            autoCorrect="off"
            className="css-keangt simpleInput common__simple-input"
            disabled={false}
            id="test-input"
            inputMode={null}
            maxLength=""
            min={null}
            name="test-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onInput={null}
            onKeyPress={[Function]}
            pattern={null}
            required={false}
            step={null}
            type="text"
            value=""
          />
        </SimpleInput>
      </_default>
    </FormElement>
    <Underline
      hasErrorMessage={false}
      isFocused={false}
    >
      <div
        aria-hidden={true}
        className="css-ycal4l underline"
      >
        <div
          className="css-1tpmuef"
          style={
            Object {
              "borderBottomColor": "var(--color-primary, #fa5400)",
              "transform": "scale3d(0,1,1)",
            }
          }
        />
      </div>
    </Underline>
    <ErrorText
      ariaHidden={false}
      className=""
      elementName="test-input"
      errorText=""
      translate={true}
      validationError={null}
    >
      <div
        aria-atomic="true"
        aria-hidden={false}
        aria-live="assertive"
        className="css-of8bei errorText"
        id="ariaError-test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </ErrorText>
  </div>
</TextField>
`;

exports[`<TextField /> should trigger the validation callback 1`] = `
<TextField
  className=""
  disabled={false}
  errorText=""
  hintText=""
  inputComponent="input"
  isControlled={false}
  label=""
  multiLine={false}
  name="test-input"
  onChange={[Function]}
  onFocusChange={[Function]}
  onSanitize={[Function]}
  onValidate={
    [MockFunction] {
      "calls": Array [
        Array [
          "",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  password={false}
  required={false}
  setRef={[Function]}
  showErrorText={true}
  translateErrorText={true}
  type="text"
  value=""
>
  <div
    className="css-e4z0u6 textField ui-shared__text-field"
  >
    <Hint
      hintText=""
      visible={false}
    >
      <div
        className="css-tnfb18 css-1jyyyen hint"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </Hint>
    <Label
      hasErrorMessage={false}
      isFloating={false}
      isFocused={false}
      label=""
      name="test-input"
    >
      <label
        aria-hidden={true}
        className="css-xrreyh css-1fekhao label"
        htmlFor="test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </label>
    </Label>
    <FormElement
      attributes={
        Object {
          "aria-describedby": null,
          "aria-invalid": false,
        }
      }
      disabled={false}
      id="test-input"
      inputComponent="input"
      isControlled={false}
      multiLine={false}
      name="test-input"
      onChange={[Function]}
      onFocusChange={[Function]}
      onSanitize={[Function]}
      onValidate={[Function]}
      password={false}
      required={false}
      setRef={[Function]}
      type="text"
      value=""
    >
      <_default
        attributes={
          Object {
            "aria-describedby": null,
            "aria-invalid": false,
          }
        }
        className="css-keangt"
        disabled={false}
        id="test-input"
        inputComponent="input"
        isControlled={false}
        multiLine={false}
        name="test-input"
        onChange={[Function]}
        onFocusChange={[Function]}
        onSanitize={[Function]}
        onValidate={[Function]}
        password={false}
        required={false}
        setRef={[Function]}
        type="text"
        validateOnBlur={true}
        value=""
      >
        <SimpleInput
          attributes={
            Object {
              "aria-describedby": null,
              "aria-invalid": false,
            }
          }
          autoComplete={false}
          autoCorrect={false}
          className="css-keangt"
          disabled={false}
          id="test-input"
          inputComponent="input"
          isControlled={false}
          maxLength=""
          multiLine={false}
          name="test-input"
          onChange={[Function]}
          onFocusChange={[Function]}
          onKeyPress={[Function]}
          onSanitize={[Function]}
          onValidate={[Function]}
          password={false}
          required={false}
          setRef={[Function]}
          type="text"
          validateOnBlur={true}
          value=""
        >
          <input
            aria-describedby={null}
            aria-invalid={false}
            autoComplete="off"
            autoCorrect="off"
            className="css-keangt simpleInput common__simple-input"
            disabled={false}
            id="test-input"
            inputMode={null}
            maxLength=""
            min={null}
            name="test-input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onInput={null}
            onKeyPress={[Function]}
            pattern={null}
            required={false}
            step={null}
            type="text"
            value=""
          />
        </SimpleInput>
      </_default>
    </FormElement>
    <Underline
      hasErrorMessage={false}
      isFocused={false}
    >
      <div
        aria-hidden={true}
        className="css-ycal4l underline"
      >
        <div
          className="css-1tpmuef"
          style={
            Object {
              "borderBottomColor": "var(--color-primary, #fa5400)",
              "transform": "scale3d(0,1,1)",
            }
          }
        />
      </div>
    </Underline>
    <ErrorText
      ariaHidden={false}
      className=""
      elementName="test-input"
      errorText=""
      translate={true}
      validationError={null}
    >
      <div
        aria-atomic="true"
        aria-hidden={false}
        aria-live="assertive"
        className="css-of8bei errorText"
        id="ariaError-test-input"
      >
        <Translate
          acceptPlainTextWithPlaceholders={false}
          className={null}
          params={Object {}}
          role={null}
          string=""
          transform={null}
        />
      </div>
    </ErrorText>
  </div>
</TextField>
`;
