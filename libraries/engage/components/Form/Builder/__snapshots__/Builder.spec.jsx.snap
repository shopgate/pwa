// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Builder /> should call onChange callback when input is changed 1`] = `
<Builder
  className={null}
  config={
    Object {
      "fields": Object {
        "foo": Object {
          "default": "default",
          "label": "foo",
          "type": "text",
          "visible": true,
        },
      },
    }
  }
  defaults={Object {}}
  elements={
    Object {
      "checkbox": [Function],
      "country": [Function],
      "date": [Function],
      "email": [Function],
      "multiselect": [Function],
      "number": [Function],
      "password": [Function],
      "phone": [Function],
      "phone_picker": [Function],
      "province": [Function],
      "radio": [Function],
      "select": [Function],
      "text": [Function],
    }
  }
  handleUpdate={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "foo": "default",
          },
          false,
          Array [],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  id="foo"
  name="foo"
  onSubmit={[Function]}
  validationErrors={Array []}
>
  <Form
    className="foo"
    onSubmit={[Function]}
  >
    <form
      action="#"
      className="foo form engage__form"
      onKeyPress={[Function]}
      onSubmit={[Function]}
    >
      <div
        className={null}
      >
        <Portal
          name="foo.foo.before"
          props={
            Object {
              "element": Object {
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.foo"
          props={
            Object {
              "element": Object {
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        >
          <ElementText
            element={
              Object {
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              }
            }
            errorText=""
            formName="foo"
            name="foo_foo"
            value="default"
            visible={true}
          >
            <div
              className="fooFoo engage__form-text formBuilderField"
            >
              <TextField
                className=""
                disabled={false}
                errorText=""
                hintText=""
                inputComponent="input"
                isControlled={true}
                label="foo"
                multiLine={false}
                name="foo_foo"
                onChange={[Function]}
                onFocusChange={[Function]}
                onSanitize={[Function]}
                onValidate={[Function]}
                password={false}
                required={false}
                setRef={[Function]}
                showErrorText={false}
                translateErrorText={false}
                type="text"
                value="default"
              >
                <div
                  className="css-e4z0u6 textField ui-shared__text-field"
                >
                  <Hint
                    hintText=""
                    visible={false}
                  >
                    <div
                      className="css-tnfb18 css-1jyyyen hint"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string=""
                        transform={null}
                      />
                    </div>
                  </Hint>
                  <Label
                    hasErrorMessage={false}
                    isFloating={true}
                    isFocused={false}
                    label="foo"
                    name="foo_foo"
                  >
                    <label
                      aria-hidden={true}
                      className="css-xrreyh css-16msjt6 css-1fekhao label floating"
                      htmlFor="foo_foo"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string="foo"
                        transform={null}
                      >
                        <span
                          className={null}
                          role={null}
                        >
                          foo
                        </span>
                      </Translate>
                    </label>
                  </Label>
                  <FormElement
                    attributes={
                      Object {
                        "aria-describedby": null,
                        "aria-invalid": false,
                      }
                    }
                    disabled={false}
                    id="foo_foo"
                    inputComponent="input"
                    isControlled={true}
                    multiLine={false}
                    name="foo_foo"
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    onSanitize={[Function]}
                    onValidate={[Function]}
                    password={false}
                    required={false}
                    setRef={[Function]}
                    type="text"
                    value="default"
                  >
                    <_default
                      attributes={
                        Object {
                          "aria-describedby": null,
                          "aria-invalid": false,
                        }
                      }
                      className="css-keangt"
                      disabled={false}
                      id="foo_foo"
                      inputComponent="input"
                      isControlled={true}
                      multiLine={false}
                      name="foo_foo"
                      onChange={[Function]}
                      onFocusChange={[Function]}
                      onSanitize={[Function]}
                      onValidate={[Function]}
                      password={false}
                      required={false}
                      setRef={[Function]}
                      type="text"
                      validateOnBlur={true}
                      value="default"
                    >
                      <SimpleInput
                        attributes={
                          Object {
                            "aria-describedby": null,
                            "aria-invalid": false,
                          }
                        }
                        autoComplete={false}
                        autoCorrect={false}
                        className="css-keangt"
                        disabled={false}
                        id="foo_foo"
                        inputComponent="input"
                        isControlled={true}
                        maxLength=""
                        multiLine={false}
                        name="foo_foo"
                        onChange={[Function]}
                        onFocusChange={[Function]}
                        onKeyPress={[Function]}
                        onSanitize={[Function]}
                        onValidate={[Function]}
                        password={false}
                        required={false}
                        setRef={[Function]}
                        type="text"
                        validateOnBlur={true}
                        value="default"
                      >
                        <input
                          aria-describedby={null}
                          aria-invalid={false}
                          autoComplete="off"
                          autoCorrect="off"
                          className="css-keangt simpleInput common__simple-input"
                          disabled={false}
                          id="foo_foo"
                          inputMode={null}
                          maxLength=""
                          min={null}
                          name="foo_foo"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          onInput={null}
                          onKeyPress={[Function]}
                          pattern={null}
                          required={false}
                          step={null}
                          type="text"
                          value="default"
                        />
                      </SimpleInput>
                    </_default>
                  </FormElement>
                  <Underline
                    hasErrorMessage={false}
                    isFocused={false}
                  >
                    <div
                      aria-hidden={true}
                      className="css-ycal4l underline"
                    >
                      <div
                        className="css-1tpmuef"
                        style={
                          Object {
                            "borderBottomColor": "var(--color-primary, #fa5400)",
                            "transform": "scale3d(0,1,1)",
                          }
                        }
                      />
                    </div>
                  </Underline>
                </div>
              </TextField>
              <FormHelper
                element={
                  Object {
                    "custom": false,
                    "default": "default",
                    "handleChange": [Function],
                    "id": "foo",
                    "label": "foo",
                    "type": "text",
                    "visible": true,
                  }
                }
                elementName="foo_foo"
                errorText=""
                formName="foo"
              >
                <div
                  className="formHelper"
                >
                  <SurroundPortals
                    portalName="foo.foo.formHelper"
                    portalProps={
                      Object {
                        "element": Object {
                          "custom": false,
                          "default": "default",
                          "handleChange": [Function],
                          "id": "foo",
                          "label": "foo",
                          "type": "text",
                          "visible": true,
                        },
                        "errorText": "",
                        "formName": "foo",
                      }
                    }
                  />
                </div>
              </FormHelper>
            </div>
          </ElementText>
        </Portal>
        <Portal
          name="foo.foo.after"
          props={
            Object {
              "element": Object {
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
      </div>
    </form>
  </Form>
</Builder>
`;

exports[`<Builder /> should modify the element visibility if setVisibilty rule applies 1`] = `
<Builder
  className={null}
  config={
    Object {
      "fields": Object {
        "bar": Object {
          "actions": Array [
            Object {
              "rules": Array [
                Object {
                  "context": "foo",
                  "data": Array [
                    "abc",
                  ],
                  "type": "notIn",
                },
              ],
              "type": "setVisibility",
            },
          ],
          "label": "bar",
          "type": "text",
        },
        "foo": Object {
          "label": "foo",
          "type": "text",
          "visible": true,
        },
      },
    }
  }
  defaults={Object {}}
  elements={
    Object {
      "checkbox": [Function],
      "country": [Function],
      "date": [Function],
      "email": [Function],
      "multiselect": [Function],
      "number": [Function],
      "password": [Function],
      "phone": [Function],
      "phone_picker": [Function],
      "province": [Function],
      "radio": [Function],
      "select": [Function],
      "text": [Function],
    }
  }
  handleUpdate={[Function]}
  name="foo"
  onSubmit={[Function]}
  validationErrors={Array []}
>
  <Form
    className="foo"
    onSubmit={[Function]}
  >
    <form
      action="#"
      className="foo form engage__form"
      onKeyPress={[Function]}
      onSubmit={[Function]}
    >
      <div
        className={null}
      >
        <Portal
          name="foo.foo.before"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.foo"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        >
          <ElementText
            element={
              Object {
                "custom": false,
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              }
            }
            errorText=""
            formName="foo"
            name="foo_foo"
            value=""
            visible={true}
          >
            <div
              className="fooFoo engage__form-text formBuilderField"
            >
              <TextField
                className=""
                disabled={false}
                errorText=""
                hintText=""
                inputComponent="input"
                isControlled={true}
                label="foo"
                multiLine={false}
                name="foo_foo"
                onChange={[Function]}
                onFocusChange={[Function]}
                onSanitize={[Function]}
                onValidate={[Function]}
                password={false}
                required={false}
                setRef={[Function]}
                showErrorText={false}
                translateErrorText={false}
                type="text"
                value=""
              >
                <div
                  className="css-e4z0u6 textField ui-shared__text-field"
                >
                  <Hint
                    hintText=""
                    visible={false}
                  >
                    <div
                      className="css-tnfb18 css-1jyyyen hint"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string=""
                        transform={null}
                      />
                    </div>
                  </Hint>
                  <Label
                    hasErrorMessage={false}
                    isFloating={false}
                    isFocused={false}
                    label="foo"
                    name="foo_foo"
                  >
                    <label
                      aria-hidden={true}
                      className="css-xrreyh css-1fekhao label"
                      htmlFor="foo_foo"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string="foo"
                        transform={null}
                      >
                        <span
                          className={null}
                          role={null}
                        >
                          foo
                        </span>
                      </Translate>
                    </label>
                  </Label>
                  <FormElement
                    attributes={
                      Object {
                        "aria-describedby": null,
                        "aria-invalid": false,
                      }
                    }
                    disabled={false}
                    id="foo_foo"
                    inputComponent="input"
                    isControlled={true}
                    multiLine={false}
                    name="foo_foo"
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    onSanitize={[Function]}
                    onValidate={[Function]}
                    password={false}
                    required={false}
                    setRef={[Function]}
                    type="text"
                    value=""
                  >
                    <_default
                      attributes={
                        Object {
                          "aria-describedby": null,
                          "aria-invalid": false,
                        }
                      }
                      className="css-keangt"
                      disabled={false}
                      id="foo_foo"
                      inputComponent="input"
                      isControlled={true}
                      multiLine={false}
                      name="foo_foo"
                      onChange={[Function]}
                      onFocusChange={[Function]}
                      onSanitize={[Function]}
                      onValidate={[Function]}
                      password={false}
                      required={false}
                      setRef={[Function]}
                      type="text"
                      validateOnBlur={true}
                      value=""
                    >
                      <SimpleInput
                        attributes={
                          Object {
                            "aria-describedby": null,
                            "aria-invalid": false,
                          }
                        }
                        autoComplete={false}
                        autoCorrect={false}
                        className="css-keangt"
                        disabled={false}
                        id="foo_foo"
                        inputComponent="input"
                        isControlled={true}
                        maxLength=""
                        multiLine={false}
                        name="foo_foo"
                        onChange={[Function]}
                        onFocusChange={[Function]}
                        onKeyPress={[Function]}
                        onSanitize={[Function]}
                        onValidate={[Function]}
                        password={false}
                        required={false}
                        setRef={[Function]}
                        type="text"
                        validateOnBlur={true}
                        value=""
                      >
                        <input
                          aria-describedby={null}
                          aria-invalid={false}
                          autoComplete="off"
                          autoCorrect="off"
                          className="css-keangt simpleInput common__simple-input"
                          disabled={false}
                          id="foo_foo"
                          inputMode={null}
                          maxLength=""
                          min={null}
                          name="foo_foo"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          onInput={null}
                          onKeyPress={[Function]}
                          pattern={null}
                          required={false}
                          step={null}
                          type="text"
                          value=""
                        />
                      </SimpleInput>
                    </_default>
                  </FormElement>
                  <Underline
                    hasErrorMessage={false}
                    isFocused={false}
                  >
                    <div
                      aria-hidden={true}
                      className="css-ycal4l underline"
                    >
                      <div
                        className="css-1tpmuef"
                        style={
                          Object {
                            "borderBottomColor": "var(--color-primary, #fa5400)",
                            "transform": "scale3d(0,1,1)",
                          }
                        }
                      />
                    </div>
                  </Underline>
                </div>
              </TextField>
              <FormHelper
                element={
                  Object {
                    "custom": false,
                    "handleChange": [Function],
                    "id": "foo",
                    "label": "foo",
                    "type": "text",
                    "visible": true,
                  }
                }
                elementName="foo_foo"
                errorText=""
                formName="foo"
              >
                <div
                  className="formHelper"
                >
                  <SurroundPortals
                    portalName="foo.foo.formHelper"
                    portalProps={
                      Object {
                        "element": Object {
                          "custom": false,
                          "handleChange": [Function],
                          "id": "foo",
                          "label": "foo",
                          "type": "text",
                          "visible": true,
                        },
                        "errorText": "",
                        "formName": "foo",
                      }
                    }
                  />
                </div>
              </FormHelper>
            </div>
          </ElementText>
        </Portal>
        <Portal
          name="foo.foo.after"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.bar.before"
          props={
            Object {
              "element": Object {
                "actions": Array [
                  Object {
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "abc",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setVisibility",
                  },
                ],
                "custom": false,
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.bar"
          props={
            Object {
              "element": Object {
                "actions": Array [
                  Object {
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "abc",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setVisibility",
                  },
                ],
                "custom": false,
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        >
          <ElementText
            element={
              Object {
                "actions": Array [
                  Object {
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "abc",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setVisibility",
                  },
                ],
                "custom": false,
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              }
            }
            errorText=""
            formName="foo"
            name="foo_bar"
            value=""
            visible={true}
          >
            <div
              className="fooBar engage__form-text formBuilderField"
            >
              <TextField
                className=""
                disabled={false}
                errorText=""
                hintText=""
                inputComponent="input"
                isControlled={true}
                label="bar"
                multiLine={false}
                name="foo_bar"
                onChange={[Function]}
                onFocusChange={[Function]}
                onSanitize={[Function]}
                onValidate={[Function]}
                password={false}
                required={false}
                setRef={[Function]}
                showErrorText={false}
                translateErrorText={false}
                type="text"
                value=""
              >
                <div
                  className="css-e4z0u6 textField ui-shared__text-field"
                >
                  <Hint
                    hintText=""
                    visible={false}
                  >
                    <div
                      className="css-tnfb18 css-1jyyyen hint"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string=""
                        transform={null}
                      />
                    </div>
                  </Hint>
                  <Label
                    hasErrorMessage={false}
                    isFloating={false}
                    isFocused={false}
                    label="bar"
                    name="foo_bar"
                  >
                    <label
                      aria-hidden={true}
                      className="css-xrreyh css-1fekhao label"
                      htmlFor="foo_bar"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string="bar"
                        transform={null}
                      >
                        <span
                          className={null}
                          role={null}
                        >
                          bar
                        </span>
                      </Translate>
                    </label>
                  </Label>
                  <FormElement
                    attributes={
                      Object {
                        "aria-describedby": null,
                        "aria-invalid": false,
                      }
                    }
                    disabled={false}
                    id="foo_bar"
                    inputComponent="input"
                    isControlled={true}
                    multiLine={false}
                    name="foo_bar"
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    onSanitize={[Function]}
                    onValidate={[Function]}
                    password={false}
                    required={false}
                    setRef={[Function]}
                    type="text"
                    value=""
                  >
                    <_default
                      attributes={
                        Object {
                          "aria-describedby": null,
                          "aria-invalid": false,
                        }
                      }
                      className="css-keangt"
                      disabled={false}
                      id="foo_bar"
                      inputComponent="input"
                      isControlled={true}
                      multiLine={false}
                      name="foo_bar"
                      onChange={[Function]}
                      onFocusChange={[Function]}
                      onSanitize={[Function]}
                      onValidate={[Function]}
                      password={false}
                      required={false}
                      setRef={[Function]}
                      type="text"
                      validateOnBlur={true}
                      value=""
                    >
                      <SimpleInput
                        attributes={
                          Object {
                            "aria-describedby": null,
                            "aria-invalid": false,
                          }
                        }
                        autoComplete={false}
                        autoCorrect={false}
                        className="css-keangt"
                        disabled={false}
                        id="foo_bar"
                        inputComponent="input"
                        isControlled={true}
                        maxLength=""
                        multiLine={false}
                        name="foo_bar"
                        onChange={[Function]}
                        onFocusChange={[Function]}
                        onKeyPress={[Function]}
                        onSanitize={[Function]}
                        onValidate={[Function]}
                        password={false}
                        required={false}
                        setRef={[Function]}
                        type="text"
                        validateOnBlur={true}
                        value=""
                      >
                        <input
                          aria-describedby={null}
                          aria-invalid={false}
                          autoComplete="off"
                          autoCorrect="off"
                          className="css-keangt simpleInput common__simple-input"
                          disabled={false}
                          id="foo_bar"
                          inputMode={null}
                          maxLength=""
                          min={null}
                          name="foo_bar"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          onInput={null}
                          onKeyPress={[Function]}
                          pattern={null}
                          required={false}
                          step={null}
                          type="text"
                          value=""
                        />
                      </SimpleInput>
                    </_default>
                  </FormElement>
                  <Underline
                    hasErrorMessage={false}
                    isFocused={false}
                  >
                    <div
                      aria-hidden={true}
                      className="css-ycal4l underline"
                    >
                      <div
                        className="css-1tpmuef"
                        style={
                          Object {
                            "borderBottomColor": "var(--color-primary, #fa5400)",
                            "transform": "scale3d(0,1,1)",
                          }
                        }
                      />
                    </div>
                  </Underline>
                </div>
              </TextField>
              <FormHelper
                element={
                  Object {
                    "actions": Array [
                      Object {
                        "rules": Array [
                          Object {
                            "context": "foo",
                            "data": Array [
                              "abc",
                            ],
                            "type": "notIn",
                          },
                        ],
                        "type": "setVisibility",
                      },
                    ],
                    "custom": false,
                    "handleChange": [Function],
                    "id": "bar",
                    "label": "bar",
                    "type": "text",
                  }
                }
                elementName="foo_bar"
                errorText=""
                formName="foo"
              >
                <div
                  className="formHelper"
                >
                  <SurroundPortals
                    portalName="foo.bar.formHelper"
                    portalProps={
                      Object {
                        "element": Object {
                          "actions": Array [
                            Object {
                              "rules": Array [
                                Object {
                                  "context": "foo",
                                  "data": Array [
                                    "abc",
                                  ],
                                  "type": "notIn",
                                },
                              ],
                              "type": "setVisibility",
                            },
                          ],
                          "custom": false,
                          "handleChange": [Function],
                          "id": "bar",
                          "label": "bar",
                          "type": "text",
                        },
                        "errorText": "",
                        "formName": "foo",
                      }
                    }
                  />
                </div>
              </FormHelper>
            </div>
          </ElementText>
        </Portal>
        <Portal
          name="foo.bar.after"
          props={
            Object {
              "element": Object {
                "actions": Array [
                  Object {
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "abc",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setVisibility",
                  },
                ],
                "custom": false,
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
      </div>
    </form>
  </Form>
</Builder>
`;

exports[`<Builder /> should modify the element visibility if setVisibilty rule applies 2`] = `
<Builder
  className={null}
  config={
    Object {
      "fields": Object {
        "bar": Object {
          "actions": Array [
            Object {
              "rules": Array [
                Object {
                  "context": "foo",
                  "data": Array [
                    "abc",
                  ],
                  "type": "notIn",
                },
              ],
              "type": "setVisibility",
            },
          ],
          "label": "bar",
          "type": "text",
        },
        "foo": Object {
          "label": "foo",
          "type": "text",
          "visible": true,
        },
      },
    }
  }
  defaults={Object {}}
  elements={
    Object {
      "checkbox": [Function],
      "country": [Function],
      "date": [Function],
      "email": [Function],
      "multiselect": [Function],
      "number": [Function],
      "password": [Function],
      "phone": [Function],
      "phone_picker": [Function],
      "province": [Function],
      "radio": [Function],
      "select": [Function],
      "text": [Function],
    }
  }
  handleUpdate={[Function]}
  name="foo"
  onSubmit={[Function]}
  validationErrors={Array []}
>
  <Form
    className="foo"
    onSubmit={[Function]}
  >
    <form
      action="#"
      className="foo form engage__form"
      onKeyPress={[Function]}
      onSubmit={[Function]}
    >
      <div
        className={null}
      >
        <Portal
          name="foo.foo.before"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.foo"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        >
          <ElementText
            element={
              Object {
                "custom": false,
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              }
            }
            errorText=""
            formName="foo"
            name="foo_foo"
            value="abc"
            visible={true}
          >
            <div
              className="fooFoo engage__form-text formBuilderField"
            >
              <TextField
                className=""
                disabled={false}
                errorText=""
                hintText=""
                inputComponent="input"
                isControlled={true}
                label="foo"
                multiLine={false}
                name="foo_foo"
                onChange={[Function]}
                onFocusChange={[Function]}
                onSanitize={[Function]}
                onValidate={[Function]}
                password={false}
                required={false}
                setRef={[Function]}
                showErrorText={false}
                translateErrorText={false}
                type="text"
                value="abc"
              >
                <div
                  className="css-e4z0u6 textField ui-shared__text-field"
                >
                  <Hint
                    hintText=""
                    visible={false}
                  >
                    <div
                      className="css-tnfb18 css-1jyyyen hint"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string=""
                        transform={null}
                      />
                    </div>
                  </Hint>
                  <Label
                    hasErrorMessage={false}
                    isFloating={true}
                    isFocused={false}
                    label="foo"
                    name="foo_foo"
                  >
                    <label
                      aria-hidden={true}
                      className="css-xrreyh css-16msjt6 css-1fekhao label floating"
                      htmlFor="foo_foo"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string="foo"
                        transform={null}
                      >
                        <span
                          className={null}
                          role={null}
                        >
                          foo
                        </span>
                      </Translate>
                    </label>
                  </Label>
                  <FormElement
                    attributes={
                      Object {
                        "aria-describedby": null,
                        "aria-invalid": false,
                      }
                    }
                    disabled={false}
                    id="foo_foo"
                    inputComponent="input"
                    isControlled={true}
                    multiLine={false}
                    name="foo_foo"
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    onSanitize={[Function]}
                    onValidate={[Function]}
                    password={false}
                    required={false}
                    setRef={[Function]}
                    type="text"
                    value="abc"
                  >
                    <_default
                      attributes={
                        Object {
                          "aria-describedby": null,
                          "aria-invalid": false,
                        }
                      }
                      className="css-keangt"
                      disabled={false}
                      id="foo_foo"
                      inputComponent="input"
                      isControlled={true}
                      multiLine={false}
                      name="foo_foo"
                      onChange={[Function]}
                      onFocusChange={[Function]}
                      onSanitize={[Function]}
                      onValidate={[Function]}
                      password={false}
                      required={false}
                      setRef={[Function]}
                      type="text"
                      validateOnBlur={true}
                      value="abc"
                    >
                      <SimpleInput
                        attributes={
                          Object {
                            "aria-describedby": null,
                            "aria-invalid": false,
                          }
                        }
                        autoComplete={false}
                        autoCorrect={false}
                        className="css-keangt"
                        disabled={false}
                        id="foo_foo"
                        inputComponent="input"
                        isControlled={true}
                        maxLength=""
                        multiLine={false}
                        name="foo_foo"
                        onChange={[Function]}
                        onFocusChange={[Function]}
                        onKeyPress={[Function]}
                        onSanitize={[Function]}
                        onValidate={[Function]}
                        password={false}
                        required={false}
                        setRef={[Function]}
                        type="text"
                        validateOnBlur={true}
                        value="abc"
                      >
                        <input
                          aria-describedby={null}
                          aria-invalid={false}
                          autoComplete="off"
                          autoCorrect="off"
                          className="css-keangt simpleInput common__simple-input"
                          disabled={false}
                          id="foo_foo"
                          inputMode={null}
                          maxLength=""
                          min={null}
                          name="foo_foo"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          onInput={null}
                          onKeyPress={[Function]}
                          pattern={null}
                          required={false}
                          step={null}
                          type="text"
                          value="abc"
                        />
                      </SimpleInput>
                    </_default>
                  </FormElement>
                  <Underline
                    hasErrorMessage={false}
                    isFocused={false}
                  >
                    <div
                      aria-hidden={true}
                      className="css-ycal4l underline"
                    >
                      <div
                        className="css-1tpmuef"
                        style={
                          Object {
                            "borderBottomColor": "var(--color-primary, #fa5400)",
                            "transform": "scale3d(0,1,1)",
                          }
                        }
                      />
                    </div>
                  </Underline>
                </div>
              </TextField>
              <FormHelper
                element={
                  Object {
                    "custom": false,
                    "handleChange": [Function],
                    "id": "foo",
                    "label": "foo",
                    "type": "text",
                    "visible": true,
                  }
                }
                elementName="foo_foo"
                errorText=""
                formName="foo"
              >
                <div
                  className="formHelper"
                >
                  <SurroundPortals
                    portalName="foo.foo.formHelper"
                    portalProps={
                      Object {
                        "element": Object {
                          "custom": false,
                          "handleChange": [Function],
                          "id": "foo",
                          "label": "foo",
                          "type": "text",
                          "visible": true,
                        },
                        "errorText": "",
                        "formName": "foo",
                      }
                    }
                  />
                </div>
              </FormHelper>
            </div>
          </ElementText>
        </Portal>
        <Portal
          name="foo.foo.after"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.bar.before"
          props={
            Object {
              "element": Object {
                "actions": Array [
                  Object {
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "abc",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setVisibility",
                  },
                ],
                "custom": false,
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.bar"
          props={
            Object {
              "element": Object {
                "actions": Array [
                  Object {
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "abc",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setVisibility",
                  },
                ],
                "custom": false,
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        >
          <ElementText
            element={
              Object {
                "actions": Array [
                  Object {
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "abc",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setVisibility",
                  },
                ],
                "custom": false,
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              }
            }
            errorText=""
            formName="foo"
            name="foo_bar"
            value=""
            visible={false}
          />
        </Portal>
        <Portal
          name="foo.bar.after"
          props={
            Object {
              "element": Object {
                "actions": Array [
                  Object {
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "abc",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setVisibility",
                  },
                ],
                "custom": false,
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
      </div>
    </form>
  </Form>
</Builder>
`;

exports[`<Builder /> should render empty form 1`] = `
<Builder
  className={null}
  config={
    Object {
      "fields": Object {},
    }
  }
  defaults={Object {}}
  elements={
    Object {
      "checkbox": [Function],
      "country": [Function],
      "date": [Function],
      "email": [Function],
      "multiselect": [Function],
      "number": [Function],
      "password": [Function],
      "phone": [Function],
      "phone_picker": [Function],
      "province": [Function],
      "radio": [Function],
      "select": [Function],
      "text": [Function],
    }
  }
  handleUpdate={[Function]}
  name="foo"
  onSubmit={[Function]}
  validationErrors={Array []}
>
  <Form
    className="foo"
    onSubmit={[Function]}
  >
    <form
      action="#"
      className="foo form engage__form"
      onKeyPress={[Function]}
      onSubmit={[Function]}
    >
      <div
        className={null}
      />
    </form>
  </Form>
</Builder>
`;

exports[`<Builder /> should render invisible field with visibility prop set to false 1`] = `
<Builder
  className={null}
  config={
    Object {
      "fields": Object {
        "firstName": Object {
          "label": "foo",
          "type": "text",
          "visible": false,
        },
      },
    }
  }
  defaults={Object {}}
  elements={
    Object {
      "checkbox": [Function],
      "country": [Function],
      "date": [Function],
      "email": [Function],
      "multiselect": [Function],
      "number": [Function],
      "password": [Function],
      "phone": [Function],
      "phone_picker": [Function],
      "province": [Function],
      "radio": [Function],
      "select": [Function],
      "text": [Function],
    }
  }
  handleUpdate={[Function]}
  name="foo"
  onSubmit={[Function]}
  validationErrors={Array []}
>
  <Form
    className="foo"
    onSubmit={[Function]}
  >
    <form
      action="#"
      className="foo form engage__form"
      onKeyPress={[Function]}
      onSubmit={[Function]}
    >
      <div
        className={null}
      >
        <Portal
          name="foo.firstName.before"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "firstName",
                "label": "foo",
                "type": "text",
                "visible": false,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.firstName"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "firstName",
                "label": "foo",
                "type": "text",
                "visible": false,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        >
          <ElementText
            element={
              Object {
                "custom": false,
                "handleChange": [Function],
                "id": "firstName",
                "label": "foo",
                "type": "text",
                "visible": false,
              }
            }
            errorText=""
            formName="foo"
            name="foo_firstName"
            value=""
            visible={false}
          />
        </Portal>
        <Portal
          name="foo.firstName.after"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "firstName",
                "label": "foo",
                "type": "text",
                "visible": false,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
      </div>
    </form>
  </Form>
</Builder>
`;

exports[`<Builder /> should render two text fields 1`] = `
<Builder
  className={null}
  config={
    Object {
      "fields": Object {
        "firstName": Object {
          "label": "foo",
          "type": "text",
          "visible": true,
        },
        "lastName": Object {
          "label": "bar",
          "type": "text",
          "visible": true,
        },
      },
    }
  }
  defaults={Object {}}
  elements={
    Object {
      "checkbox": [Function],
      "country": [Function],
      "date": [Function],
      "email": [Function],
      "multiselect": [Function],
      "number": [Function],
      "password": [Function],
      "phone": [Function],
      "phone_picker": [Function],
      "province": [Function],
      "radio": [Function],
      "select": [Function],
      "text": [Function],
    }
  }
  handleUpdate={[Function]}
  name="foo"
  onSubmit={[Function]}
  validationErrors={Array []}
>
  <Form
    className="foo"
    onSubmit={[Function]}
  >
    <form
      action="#"
      className="foo form engage__form"
      onKeyPress={[Function]}
      onSubmit={[Function]}
    >
      <div
        className={null}
      >
        <Portal
          name="foo.firstName.before"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "firstName",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.firstName"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "firstName",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        >
          <ElementText
            element={
              Object {
                "custom": false,
                "handleChange": [Function],
                "id": "firstName",
                "label": "foo",
                "type": "text",
                "visible": true,
              }
            }
            errorText=""
            formName="foo"
            name="foo_firstName"
            value=""
            visible={true}
          >
            <div
              className="fooFirstName engage__form-text formBuilderField"
            >
              <TextField
                className=""
                disabled={false}
                errorText=""
                hintText=""
                inputComponent="input"
                isControlled={true}
                label="foo"
                multiLine={false}
                name="foo_firstName"
                onChange={[Function]}
                onFocusChange={[Function]}
                onSanitize={[Function]}
                onValidate={[Function]}
                password={false}
                required={false}
                setRef={[Function]}
                showErrorText={false}
                translateErrorText={false}
                type="text"
                value=""
              >
                <div
                  className="css-e4z0u6 textField ui-shared__text-field"
                >
                  <Hint
                    hintText=""
                    visible={false}
                  >
                    <div
                      className="css-tnfb18 css-1jyyyen hint"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string=""
                        transform={null}
                      />
                    </div>
                  </Hint>
                  <Label
                    hasErrorMessage={false}
                    isFloating={false}
                    isFocused={false}
                    label="foo"
                    name="foo_firstName"
                  >
                    <label
                      aria-hidden={true}
                      className="css-xrreyh css-1fekhao label"
                      htmlFor="foo_firstName"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string="foo"
                        transform={null}
                      >
                        <span
                          className={null}
                          role={null}
                        >
                          foo
                        </span>
                      </Translate>
                    </label>
                  </Label>
                  <FormElement
                    attributes={
                      Object {
                        "aria-describedby": null,
                        "aria-invalid": false,
                      }
                    }
                    disabled={false}
                    id="foo_firstName"
                    inputComponent="input"
                    isControlled={true}
                    multiLine={false}
                    name="foo_firstName"
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    onSanitize={[Function]}
                    onValidate={[Function]}
                    password={false}
                    required={false}
                    setRef={[Function]}
                    type="text"
                    value=""
                  >
                    <_default
                      attributes={
                        Object {
                          "aria-describedby": null,
                          "aria-invalid": false,
                        }
                      }
                      className="css-keangt"
                      disabled={false}
                      id="foo_firstName"
                      inputComponent="input"
                      isControlled={true}
                      multiLine={false}
                      name="foo_firstName"
                      onChange={[Function]}
                      onFocusChange={[Function]}
                      onSanitize={[Function]}
                      onValidate={[Function]}
                      password={false}
                      required={false}
                      setRef={[Function]}
                      type="text"
                      validateOnBlur={true}
                      value=""
                    >
                      <SimpleInput
                        attributes={
                          Object {
                            "aria-describedby": null,
                            "aria-invalid": false,
                          }
                        }
                        autoComplete={false}
                        autoCorrect={false}
                        className="css-keangt"
                        disabled={false}
                        id="foo_firstName"
                        inputComponent="input"
                        isControlled={true}
                        maxLength=""
                        multiLine={false}
                        name="foo_firstName"
                        onChange={[Function]}
                        onFocusChange={[Function]}
                        onKeyPress={[Function]}
                        onSanitize={[Function]}
                        onValidate={[Function]}
                        password={false}
                        required={false}
                        setRef={[Function]}
                        type="text"
                        validateOnBlur={true}
                        value=""
                      >
                        <input
                          aria-describedby={null}
                          aria-invalid={false}
                          autoComplete="off"
                          autoCorrect="off"
                          className="css-keangt simpleInput common__simple-input"
                          disabled={false}
                          id="foo_firstName"
                          inputMode={null}
                          maxLength=""
                          min={null}
                          name="foo_firstName"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          onInput={null}
                          onKeyPress={[Function]}
                          pattern={null}
                          required={false}
                          step={null}
                          type="text"
                          value=""
                        />
                      </SimpleInput>
                    </_default>
                  </FormElement>
                  <Underline
                    hasErrorMessage={false}
                    isFocused={false}
                  >
                    <div
                      aria-hidden={true}
                      className="css-ycal4l underline"
                    >
                      <div
                        className="css-1tpmuef"
                        style={
                          Object {
                            "borderBottomColor": "var(--color-primary, #fa5400)",
                            "transform": "scale3d(0,1,1)",
                          }
                        }
                      />
                    </div>
                  </Underline>
                </div>
              </TextField>
              <FormHelper
                element={
                  Object {
                    "custom": false,
                    "handleChange": [Function],
                    "id": "firstName",
                    "label": "foo",
                    "type": "text",
                    "visible": true,
                  }
                }
                elementName="foo_firstName"
                errorText=""
                formName="foo"
              >
                <div
                  className="formHelper"
                >
                  <SurroundPortals
                    portalName="foo.firstName.formHelper"
                    portalProps={
                      Object {
                        "element": Object {
                          "custom": false,
                          "handleChange": [Function],
                          "id": "firstName",
                          "label": "foo",
                          "type": "text",
                          "visible": true,
                        },
                        "errorText": "",
                        "formName": "foo",
                      }
                    }
                  />
                </div>
              </FormHelper>
            </div>
          </ElementText>
        </Portal>
        <Portal
          name="foo.firstName.after"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "firstName",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.lastName.before"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "lastName",
                "label": "bar",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.lastName"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "lastName",
                "label": "bar",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        >
          <ElementText
            element={
              Object {
                "custom": false,
                "handleChange": [Function],
                "id": "lastName",
                "label": "bar",
                "type": "text",
                "visible": true,
              }
            }
            errorText=""
            formName="foo"
            name="foo_lastName"
            value=""
            visible={true}
          >
            <div
              className="fooLastName engage__form-text formBuilderField"
            >
              <TextField
                className=""
                disabled={false}
                errorText=""
                hintText=""
                inputComponent="input"
                isControlled={true}
                label="bar"
                multiLine={false}
                name="foo_lastName"
                onChange={[Function]}
                onFocusChange={[Function]}
                onSanitize={[Function]}
                onValidate={[Function]}
                password={false}
                required={false}
                setRef={[Function]}
                showErrorText={false}
                translateErrorText={false}
                type="text"
                value=""
              >
                <div
                  className="css-e4z0u6 textField ui-shared__text-field"
                >
                  <Hint
                    hintText=""
                    visible={false}
                  >
                    <div
                      className="css-tnfb18 css-1jyyyen hint"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string=""
                        transform={null}
                      />
                    </div>
                  </Hint>
                  <Label
                    hasErrorMessage={false}
                    isFloating={false}
                    isFocused={false}
                    label="bar"
                    name="foo_lastName"
                  >
                    <label
                      aria-hidden={true}
                      className="css-xrreyh css-1fekhao label"
                      htmlFor="foo_lastName"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string="bar"
                        transform={null}
                      >
                        <span
                          className={null}
                          role={null}
                        >
                          bar
                        </span>
                      </Translate>
                    </label>
                  </Label>
                  <FormElement
                    attributes={
                      Object {
                        "aria-describedby": null,
                        "aria-invalid": false,
                      }
                    }
                    disabled={false}
                    id="foo_lastName"
                    inputComponent="input"
                    isControlled={true}
                    multiLine={false}
                    name="foo_lastName"
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    onSanitize={[Function]}
                    onValidate={[Function]}
                    password={false}
                    required={false}
                    setRef={[Function]}
                    type="text"
                    value=""
                  >
                    <_default
                      attributes={
                        Object {
                          "aria-describedby": null,
                          "aria-invalid": false,
                        }
                      }
                      className="css-keangt"
                      disabled={false}
                      id="foo_lastName"
                      inputComponent="input"
                      isControlled={true}
                      multiLine={false}
                      name="foo_lastName"
                      onChange={[Function]}
                      onFocusChange={[Function]}
                      onSanitize={[Function]}
                      onValidate={[Function]}
                      password={false}
                      required={false}
                      setRef={[Function]}
                      type="text"
                      validateOnBlur={true}
                      value=""
                    >
                      <SimpleInput
                        attributes={
                          Object {
                            "aria-describedby": null,
                            "aria-invalid": false,
                          }
                        }
                        autoComplete={false}
                        autoCorrect={false}
                        className="css-keangt"
                        disabled={false}
                        id="foo_lastName"
                        inputComponent="input"
                        isControlled={true}
                        maxLength=""
                        multiLine={false}
                        name="foo_lastName"
                        onChange={[Function]}
                        onFocusChange={[Function]}
                        onKeyPress={[Function]}
                        onSanitize={[Function]}
                        onValidate={[Function]}
                        password={false}
                        required={false}
                        setRef={[Function]}
                        type="text"
                        validateOnBlur={true}
                        value=""
                      >
                        <input
                          aria-describedby={null}
                          aria-invalid={false}
                          autoComplete="off"
                          autoCorrect="off"
                          className="css-keangt simpleInput common__simple-input"
                          disabled={false}
                          id="foo_lastName"
                          inputMode={null}
                          maxLength=""
                          min={null}
                          name="foo_lastName"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          onInput={null}
                          onKeyPress={[Function]}
                          pattern={null}
                          required={false}
                          step={null}
                          type="text"
                          value=""
                        />
                      </SimpleInput>
                    </_default>
                  </FormElement>
                  <Underline
                    hasErrorMessage={false}
                    isFocused={false}
                  >
                    <div
                      aria-hidden={true}
                      className="css-ycal4l underline"
                    >
                      <div
                        className="css-1tpmuef"
                        style={
                          Object {
                            "borderBottomColor": "var(--color-primary, #fa5400)",
                            "transform": "scale3d(0,1,1)",
                          }
                        }
                      />
                    </div>
                  </Underline>
                </div>
              </TextField>
              <FormHelper
                element={
                  Object {
                    "custom": false,
                    "handleChange": [Function],
                    "id": "lastName",
                    "label": "bar",
                    "type": "text",
                    "visible": true,
                  }
                }
                elementName="foo_lastName"
                errorText=""
                formName="foo"
              >
                <div
                  className="formHelper"
                >
                  <SurroundPortals
                    portalName="foo.lastName.formHelper"
                    portalProps={
                      Object {
                        "element": Object {
                          "custom": false,
                          "handleChange": [Function],
                          "id": "lastName",
                          "label": "bar",
                          "type": "text",
                          "visible": true,
                        },
                        "errorText": "",
                        "formName": "foo",
                      }
                    }
                  />
                </div>
              </FormHelper>
            </div>
          </ElementText>
        </Portal>
        <Portal
          name="foo.lastName.after"
          props={
            Object {
              "element": Object {
                "custom": false,
                "handleChange": [Function],
                "id": "lastName",
                "label": "bar",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
      </div>
    </form>
  </Form>
</Builder>
`;

exports[`<Builder /> should reset value when rule applies 1`] = `
<Builder
  className={null}
  config={
    Object {
      "fields": Object {
        "bar": Object {
          "actions": Array [
            Object {
              "params": Object {
                "type": "fixed",
                "value": "cheat",
              },
              "rules": Array [
                Object {
                  "context": "foo",
                  "data": Array [
                    "default",
                  ],
                  "type": "notIn",
                },
              ],
              "type": "setValue",
            },
          ],
          "default": "default",
          "label": "bar",
          "type": "text",
        },
        "foo": Object {
          "default": "default",
          "label": "foo",
          "type": "text",
          "visible": true,
        },
      },
    }
  }
  defaults={Object {}}
  elements={
    Object {
      "checkbox": [Function],
      "country": [Function],
      "date": [Function],
      "email": [Function],
      "multiselect": [Function],
      "number": [Function],
      "password": [Function],
      "phone": [Function],
      "phone_picker": [Function],
      "province": [Function],
      "radio": [Function],
      "select": [Function],
      "text": [Function],
    }
  }
  handleUpdate={[Function]}
  name="foo"
  onSubmit={[Function]}
  validationErrors={Array []}
>
  <Form
    className="foo"
    onSubmit={[Function]}
  >
    <form
      action="#"
      className="foo form engage__form"
      onKeyPress={[Function]}
      onSubmit={[Function]}
    >
      <div
        className={null}
      >
        <Portal
          name="foo.foo.before"
          props={
            Object {
              "element": Object {
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.foo"
          props={
            Object {
              "element": Object {
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        >
          <ElementText
            element={
              Object {
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              }
            }
            errorText=""
            formName="foo"
            name="foo_foo"
            value="default"
            visible={true}
          >
            <div
              className="fooFoo engage__form-text formBuilderField"
            >
              <TextField
                className=""
                disabled={false}
                errorText=""
                hintText=""
                inputComponent="input"
                isControlled={true}
                label="foo"
                multiLine={false}
                name="foo_foo"
                onChange={[Function]}
                onFocusChange={[Function]}
                onSanitize={[Function]}
                onValidate={[Function]}
                password={false}
                required={false}
                setRef={[Function]}
                showErrorText={false}
                translateErrorText={false}
                type="text"
                value="default"
              >
                <div
                  className="css-e4z0u6 textField ui-shared__text-field"
                >
                  <Hint
                    hintText=""
                    visible={false}
                  >
                    <div
                      className="css-tnfb18 css-1jyyyen hint"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string=""
                        transform={null}
                      />
                    </div>
                  </Hint>
                  <Label
                    hasErrorMessage={false}
                    isFloating={true}
                    isFocused={false}
                    label="foo"
                    name="foo_foo"
                  >
                    <label
                      aria-hidden={true}
                      className="css-xrreyh css-16msjt6 css-1fekhao label floating"
                      htmlFor="foo_foo"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string="foo"
                        transform={null}
                      >
                        <span
                          className={null}
                          role={null}
                        >
                          foo
                        </span>
                      </Translate>
                    </label>
                  </Label>
                  <FormElement
                    attributes={
                      Object {
                        "aria-describedby": null,
                        "aria-invalid": false,
                      }
                    }
                    disabled={false}
                    id="foo_foo"
                    inputComponent="input"
                    isControlled={true}
                    multiLine={false}
                    name="foo_foo"
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    onSanitize={[Function]}
                    onValidate={[Function]}
                    password={false}
                    required={false}
                    setRef={[Function]}
                    type="text"
                    value="default"
                  >
                    <_default
                      attributes={
                        Object {
                          "aria-describedby": null,
                          "aria-invalid": false,
                        }
                      }
                      className="css-keangt"
                      disabled={false}
                      id="foo_foo"
                      inputComponent="input"
                      isControlled={true}
                      multiLine={false}
                      name="foo_foo"
                      onChange={[Function]}
                      onFocusChange={[Function]}
                      onSanitize={[Function]}
                      onValidate={[Function]}
                      password={false}
                      required={false}
                      setRef={[Function]}
                      type="text"
                      validateOnBlur={true}
                      value="default"
                    >
                      <SimpleInput
                        attributes={
                          Object {
                            "aria-describedby": null,
                            "aria-invalid": false,
                          }
                        }
                        autoComplete={false}
                        autoCorrect={false}
                        className="css-keangt"
                        disabled={false}
                        id="foo_foo"
                        inputComponent="input"
                        isControlled={true}
                        maxLength=""
                        multiLine={false}
                        name="foo_foo"
                        onChange={[Function]}
                        onFocusChange={[Function]}
                        onKeyPress={[Function]}
                        onSanitize={[Function]}
                        onValidate={[Function]}
                        password={false}
                        required={false}
                        setRef={[Function]}
                        type="text"
                        validateOnBlur={true}
                        value="default"
                      >
                        <input
                          aria-describedby={null}
                          aria-invalid={false}
                          autoComplete="off"
                          autoCorrect="off"
                          className="css-keangt simpleInput common__simple-input"
                          disabled={false}
                          id="foo_foo"
                          inputMode={null}
                          maxLength=""
                          min={null}
                          name="foo_foo"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          onInput={null}
                          onKeyPress={[Function]}
                          pattern={null}
                          required={false}
                          step={null}
                          type="text"
                          value="default"
                        />
                      </SimpleInput>
                    </_default>
                  </FormElement>
                  <Underline
                    hasErrorMessage={false}
                    isFocused={false}
                  >
                    <div
                      aria-hidden={true}
                      className="css-ycal4l underline"
                    >
                      <div
                        className="css-1tpmuef"
                        style={
                          Object {
                            "borderBottomColor": "var(--color-primary, #fa5400)",
                            "transform": "scale3d(0,1,1)",
                          }
                        }
                      />
                    </div>
                  </Underline>
                </div>
              </TextField>
              <FormHelper
                element={
                  Object {
                    "custom": false,
                    "default": "default",
                    "handleChange": [Function],
                    "id": "foo",
                    "label": "foo",
                    "type": "text",
                    "visible": true,
                  }
                }
                elementName="foo_foo"
                errorText=""
                formName="foo"
              >
                <div
                  className="formHelper"
                >
                  <SurroundPortals
                    portalName="foo.foo.formHelper"
                    portalProps={
                      Object {
                        "element": Object {
                          "custom": false,
                          "default": "default",
                          "handleChange": [Function],
                          "id": "foo",
                          "label": "foo",
                          "type": "text",
                          "visible": true,
                        },
                        "errorText": "",
                        "formName": "foo",
                      }
                    }
                  />
                </div>
              </FormHelper>
            </div>
          </ElementText>
        </Portal>
        <Portal
          name="foo.foo.after"
          props={
            Object {
              "element": Object {
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.bar.before"
          props={
            Object {
              "element": Object {
                "actions": Array [
                  Object {
                    "params": Object {
                      "type": "fixed",
                      "value": "cheat",
                    },
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "default",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setValue",
                  },
                ],
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.bar"
          props={
            Object {
              "element": Object {
                "actions": Array [
                  Object {
                    "params": Object {
                      "type": "fixed",
                      "value": "cheat",
                    },
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "default",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setValue",
                  },
                ],
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        >
          <ElementText
            element={
              Object {
                "actions": Array [
                  Object {
                    "params": Object {
                      "type": "fixed",
                      "value": "cheat",
                    },
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "default",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setValue",
                  },
                ],
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              }
            }
            errorText=""
            formName="foo"
            name="foo_bar"
            value="default"
            visible={true}
          >
            <div
              className="fooBar engage__form-text formBuilderField"
            >
              <TextField
                className=""
                disabled={false}
                errorText=""
                hintText=""
                inputComponent="input"
                isControlled={true}
                label="bar"
                multiLine={false}
                name="foo_bar"
                onChange={[Function]}
                onFocusChange={[Function]}
                onSanitize={[Function]}
                onValidate={[Function]}
                password={false}
                required={false}
                setRef={[Function]}
                showErrorText={false}
                translateErrorText={false}
                type="text"
                value="default"
              >
                <div
                  className="css-e4z0u6 textField ui-shared__text-field"
                >
                  <Hint
                    hintText=""
                    visible={false}
                  >
                    <div
                      className="css-tnfb18 css-1jyyyen hint"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string=""
                        transform={null}
                      />
                    </div>
                  </Hint>
                  <Label
                    hasErrorMessage={false}
                    isFloating={true}
                    isFocused={false}
                    label="bar"
                    name="foo_bar"
                  >
                    <label
                      aria-hidden={true}
                      className="css-xrreyh css-16msjt6 css-1fekhao label floating"
                      htmlFor="foo_bar"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string="bar"
                        transform={null}
                      >
                        <span
                          className={null}
                          role={null}
                        >
                          bar
                        </span>
                      </Translate>
                    </label>
                  </Label>
                  <FormElement
                    attributes={
                      Object {
                        "aria-describedby": null,
                        "aria-invalid": false,
                      }
                    }
                    disabled={false}
                    id="foo_bar"
                    inputComponent="input"
                    isControlled={true}
                    multiLine={false}
                    name="foo_bar"
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    onSanitize={[Function]}
                    onValidate={[Function]}
                    password={false}
                    required={false}
                    setRef={[Function]}
                    type="text"
                    value="default"
                  >
                    <_default
                      attributes={
                        Object {
                          "aria-describedby": null,
                          "aria-invalid": false,
                        }
                      }
                      className="css-keangt"
                      disabled={false}
                      id="foo_bar"
                      inputComponent="input"
                      isControlled={true}
                      multiLine={false}
                      name="foo_bar"
                      onChange={[Function]}
                      onFocusChange={[Function]}
                      onSanitize={[Function]}
                      onValidate={[Function]}
                      password={false}
                      required={false}
                      setRef={[Function]}
                      type="text"
                      validateOnBlur={true}
                      value="default"
                    >
                      <SimpleInput
                        attributes={
                          Object {
                            "aria-describedby": null,
                            "aria-invalid": false,
                          }
                        }
                        autoComplete={false}
                        autoCorrect={false}
                        className="css-keangt"
                        disabled={false}
                        id="foo_bar"
                        inputComponent="input"
                        isControlled={true}
                        maxLength=""
                        multiLine={false}
                        name="foo_bar"
                        onChange={[Function]}
                        onFocusChange={[Function]}
                        onKeyPress={[Function]}
                        onSanitize={[Function]}
                        onValidate={[Function]}
                        password={false}
                        required={false}
                        setRef={[Function]}
                        type="text"
                        validateOnBlur={true}
                        value="default"
                      >
                        <input
                          aria-describedby={null}
                          aria-invalid={false}
                          autoComplete="off"
                          autoCorrect="off"
                          className="css-keangt simpleInput common__simple-input"
                          disabled={false}
                          id="foo_bar"
                          inputMode={null}
                          maxLength=""
                          min={null}
                          name="foo_bar"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          onInput={null}
                          onKeyPress={[Function]}
                          pattern={null}
                          required={false}
                          step={null}
                          type="text"
                          value="default"
                        />
                      </SimpleInput>
                    </_default>
                  </FormElement>
                  <Underline
                    hasErrorMessage={false}
                    isFocused={false}
                  >
                    <div
                      aria-hidden={true}
                      className="css-ycal4l underline"
                    >
                      <div
                        className="css-1tpmuef"
                        style={
                          Object {
                            "borderBottomColor": "var(--color-primary, #fa5400)",
                            "transform": "scale3d(0,1,1)",
                          }
                        }
                      />
                    </div>
                  </Underline>
                </div>
              </TextField>
              <FormHelper
                element={
                  Object {
                    "actions": Array [
                      Object {
                        "params": Object {
                          "type": "fixed",
                          "value": "cheat",
                        },
                        "rules": Array [
                          Object {
                            "context": "foo",
                            "data": Array [
                              "default",
                            ],
                            "type": "notIn",
                          },
                        ],
                        "type": "setValue",
                      },
                    ],
                    "custom": false,
                    "default": "default",
                    "handleChange": [Function],
                    "id": "bar",
                    "label": "bar",
                    "type": "text",
                  }
                }
                elementName="foo_bar"
                errorText=""
                formName="foo"
              >
                <div
                  className="formHelper"
                >
                  <SurroundPortals
                    portalName="foo.bar.formHelper"
                    portalProps={
                      Object {
                        "element": Object {
                          "actions": Array [
                            Object {
                              "params": Object {
                                "type": "fixed",
                                "value": "cheat",
                              },
                              "rules": Array [
                                Object {
                                  "context": "foo",
                                  "data": Array [
                                    "default",
                                  ],
                                  "type": "notIn",
                                },
                              ],
                              "type": "setValue",
                            },
                          ],
                          "custom": false,
                          "default": "default",
                          "handleChange": [Function],
                          "id": "bar",
                          "label": "bar",
                          "type": "text",
                        },
                        "errorText": "",
                        "formName": "foo",
                      }
                    }
                  />
                </div>
              </FormHelper>
            </div>
          </ElementText>
        </Portal>
        <Portal
          name="foo.bar.after"
          props={
            Object {
              "element": Object {
                "actions": Array [
                  Object {
                    "params": Object {
                      "type": "fixed",
                      "value": "cheat",
                    },
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "default",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setValue",
                  },
                ],
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
      </div>
    </form>
  </Form>
</Builder>
`;

exports[`<Builder /> should reset value when rule applies 2`] = `
<Builder
  className={null}
  config={
    Object {
      "fields": Object {
        "bar": Object {
          "actions": Array [
            Object {
              "params": Object {
                "type": "fixed",
                "value": "cheat",
              },
              "rules": Array [
                Object {
                  "context": "foo",
                  "data": Array [
                    "default",
                  ],
                  "type": "notIn",
                },
              ],
              "type": "setValue",
            },
          ],
          "default": "default",
          "label": "bar",
          "type": "text",
        },
        "foo": Object {
          "default": "default",
          "label": "foo",
          "type": "text",
          "visible": true,
        },
      },
    }
  }
  defaults={Object {}}
  elements={
    Object {
      "checkbox": [Function],
      "country": [Function],
      "date": [Function],
      "email": [Function],
      "multiselect": [Function],
      "number": [Function],
      "password": [Function],
      "phone": [Function],
      "phone_picker": [Function],
      "province": [Function],
      "radio": [Function],
      "select": [Function],
      "text": [Function],
    }
  }
  handleUpdate={[Function]}
  name="foo"
  onSubmit={[Function]}
  validationErrors={Array []}
>
  <Form
    className="foo"
    onSubmit={[Function]}
  >
    <form
      action="#"
      className="foo form engage__form"
      onKeyPress={[Function]}
      onSubmit={[Function]}
    >
      <div
        className={null}
      >
        <Portal
          name="foo.foo.before"
          props={
            Object {
              "element": Object {
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.foo"
          props={
            Object {
              "element": Object {
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        >
          <ElementText
            element={
              Object {
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              }
            }
            errorText=""
            formName="foo"
            name="foo_foo"
            value="abc"
            visible={true}
          >
            <div
              className="fooFoo engage__form-text formBuilderField"
            >
              <TextField
                className=""
                disabled={false}
                errorText=""
                hintText=""
                inputComponent="input"
                isControlled={true}
                label="foo"
                multiLine={false}
                name="foo_foo"
                onChange={[Function]}
                onFocusChange={[Function]}
                onSanitize={[Function]}
                onValidate={[Function]}
                password={false}
                required={false}
                setRef={[Function]}
                showErrorText={false}
                translateErrorText={false}
                type="text"
                value="abc"
              >
                <div
                  className="css-e4z0u6 textField ui-shared__text-field"
                >
                  <Hint
                    hintText=""
                    visible={false}
                  >
                    <div
                      className="css-tnfb18 css-1jyyyen hint"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string=""
                        transform={null}
                      />
                    </div>
                  </Hint>
                  <Label
                    hasErrorMessage={false}
                    isFloating={true}
                    isFocused={false}
                    label="foo"
                    name="foo_foo"
                  >
                    <label
                      aria-hidden={true}
                      className="css-xrreyh css-16msjt6 css-1fekhao label floating"
                      htmlFor="foo_foo"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string="foo"
                        transform={null}
                      >
                        <span
                          className={null}
                          role={null}
                        >
                          foo
                        </span>
                      </Translate>
                    </label>
                  </Label>
                  <FormElement
                    attributes={
                      Object {
                        "aria-describedby": null,
                        "aria-invalid": false,
                      }
                    }
                    disabled={false}
                    id="foo_foo"
                    inputComponent="input"
                    isControlled={true}
                    multiLine={false}
                    name="foo_foo"
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    onSanitize={[Function]}
                    onValidate={[Function]}
                    password={false}
                    required={false}
                    setRef={[Function]}
                    type="text"
                    value="abc"
                  >
                    <_default
                      attributes={
                        Object {
                          "aria-describedby": null,
                          "aria-invalid": false,
                        }
                      }
                      className="css-keangt"
                      disabled={false}
                      id="foo_foo"
                      inputComponent="input"
                      isControlled={true}
                      multiLine={false}
                      name="foo_foo"
                      onChange={[Function]}
                      onFocusChange={[Function]}
                      onSanitize={[Function]}
                      onValidate={[Function]}
                      password={false}
                      required={false}
                      setRef={[Function]}
                      type="text"
                      validateOnBlur={true}
                      value="abc"
                    >
                      <SimpleInput
                        attributes={
                          Object {
                            "aria-describedby": null,
                            "aria-invalid": false,
                          }
                        }
                        autoComplete={false}
                        autoCorrect={false}
                        className="css-keangt"
                        disabled={false}
                        id="foo_foo"
                        inputComponent="input"
                        isControlled={true}
                        maxLength=""
                        multiLine={false}
                        name="foo_foo"
                        onChange={[Function]}
                        onFocusChange={[Function]}
                        onKeyPress={[Function]}
                        onSanitize={[Function]}
                        onValidate={[Function]}
                        password={false}
                        required={false}
                        setRef={[Function]}
                        type="text"
                        validateOnBlur={true}
                        value="abc"
                      >
                        <input
                          aria-describedby={null}
                          aria-invalid={false}
                          autoComplete="off"
                          autoCorrect="off"
                          className="css-keangt simpleInput common__simple-input"
                          disabled={false}
                          id="foo_foo"
                          inputMode={null}
                          maxLength=""
                          min={null}
                          name="foo_foo"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          onInput={null}
                          onKeyPress={[Function]}
                          pattern={null}
                          required={false}
                          step={null}
                          type="text"
                          value="abc"
                        />
                      </SimpleInput>
                    </_default>
                  </FormElement>
                  <Underline
                    hasErrorMessage={false}
                    isFocused={false}
                  >
                    <div
                      aria-hidden={true}
                      className="css-ycal4l underline"
                    >
                      <div
                        className="css-1tpmuef"
                        style={
                          Object {
                            "borderBottomColor": "var(--color-primary, #fa5400)",
                            "transform": "scale3d(0,1,1)",
                          }
                        }
                      />
                    </div>
                  </Underline>
                </div>
              </TextField>
              <FormHelper
                element={
                  Object {
                    "custom": false,
                    "default": "default",
                    "handleChange": [Function],
                    "id": "foo",
                    "label": "foo",
                    "type": "text",
                    "visible": true,
                  }
                }
                elementName="foo_foo"
                errorText=""
                formName="foo"
              >
                <div
                  className="formHelper"
                >
                  <SurroundPortals
                    portalName="foo.foo.formHelper"
                    portalProps={
                      Object {
                        "element": Object {
                          "custom": false,
                          "default": "default",
                          "handleChange": [Function],
                          "id": "foo",
                          "label": "foo",
                          "type": "text",
                          "visible": true,
                        },
                        "errorText": "",
                        "formName": "foo",
                      }
                    }
                  />
                </div>
              </FormHelper>
            </div>
          </ElementText>
        </Portal>
        <Portal
          name="foo.foo.after"
          props={
            Object {
              "element": Object {
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "foo",
                "label": "foo",
                "type": "text",
                "visible": true,
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.bar.before"
          props={
            Object {
              "element": Object {
                "actions": Array [
                  Object {
                    "params": Object {
                      "type": "fixed",
                      "value": "cheat",
                    },
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "default",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setValue",
                  },
                ],
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
        <Portal
          name="foo.bar"
          props={
            Object {
              "element": Object {
                "actions": Array [
                  Object {
                    "params": Object {
                      "type": "fixed",
                      "value": "cheat",
                    },
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "default",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setValue",
                  },
                ],
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        >
          <ElementText
            element={
              Object {
                "actions": Array [
                  Object {
                    "params": Object {
                      "type": "fixed",
                      "value": "cheat",
                    },
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "default",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setValue",
                  },
                ],
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              }
            }
            errorText=""
            formName="foo"
            name="foo_bar"
            value="cheat"
            visible={true}
          >
            <div
              className="fooBar engage__form-text formBuilderField"
            >
              <TextField
                className=""
                disabled={false}
                errorText=""
                hintText=""
                inputComponent="input"
                isControlled={true}
                label="bar"
                multiLine={false}
                name="foo_bar"
                onChange={[Function]}
                onFocusChange={[Function]}
                onSanitize={[Function]}
                onValidate={[Function]}
                password={false}
                required={false}
                setRef={[Function]}
                showErrorText={false}
                translateErrorText={false}
                type="text"
                value="cheat"
              >
                <div
                  className="css-e4z0u6 textField ui-shared__text-field"
                >
                  <Hint
                    hintText=""
                    visible={false}
                  >
                    <div
                      className="css-tnfb18 css-1jyyyen hint"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string=""
                        transform={null}
                      />
                    </div>
                  </Hint>
                  <Label
                    hasErrorMessage={false}
                    isFloating={true}
                    isFocused={false}
                    label="bar"
                    name="foo_bar"
                  >
                    <label
                      aria-hidden={true}
                      className="css-xrreyh css-16msjt6 css-1fekhao label floating"
                      htmlFor="foo_bar"
                    >
                      <Translate
                        acceptPlainTextWithPlaceholders={false}
                        className={null}
                        params={Object {}}
                        role={null}
                        string="bar"
                        transform={null}
                      >
                        <span
                          className={null}
                          role={null}
                        >
                          bar
                        </span>
                      </Translate>
                    </label>
                  </Label>
                  <FormElement
                    attributes={
                      Object {
                        "aria-describedby": null,
                        "aria-invalid": false,
                      }
                    }
                    disabled={false}
                    id="foo_bar"
                    inputComponent="input"
                    isControlled={true}
                    multiLine={false}
                    name="foo_bar"
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    onSanitize={[Function]}
                    onValidate={[Function]}
                    password={false}
                    required={false}
                    setRef={[Function]}
                    type="text"
                    value="cheat"
                  >
                    <_default
                      attributes={
                        Object {
                          "aria-describedby": null,
                          "aria-invalid": false,
                        }
                      }
                      className="css-keangt"
                      disabled={false}
                      id="foo_bar"
                      inputComponent="input"
                      isControlled={true}
                      multiLine={false}
                      name="foo_bar"
                      onChange={[Function]}
                      onFocusChange={[Function]}
                      onSanitize={[Function]}
                      onValidate={[Function]}
                      password={false}
                      required={false}
                      setRef={[Function]}
                      type="text"
                      validateOnBlur={true}
                      value="cheat"
                    >
                      <SimpleInput
                        attributes={
                          Object {
                            "aria-describedby": null,
                            "aria-invalid": false,
                          }
                        }
                        autoComplete={false}
                        autoCorrect={false}
                        className="css-keangt"
                        disabled={false}
                        id="foo_bar"
                        inputComponent="input"
                        isControlled={true}
                        maxLength=""
                        multiLine={false}
                        name="foo_bar"
                        onChange={[Function]}
                        onFocusChange={[Function]}
                        onKeyPress={[Function]}
                        onSanitize={[Function]}
                        onValidate={[Function]}
                        password={false}
                        required={false}
                        setRef={[Function]}
                        type="text"
                        validateOnBlur={true}
                        value="cheat"
                      >
                        <input
                          aria-describedby={null}
                          aria-invalid={false}
                          autoComplete="off"
                          autoCorrect="off"
                          className="css-keangt simpleInput common__simple-input"
                          disabled={false}
                          id="foo_bar"
                          inputMode={null}
                          maxLength=""
                          min={null}
                          name="foo_bar"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          onInput={null}
                          onKeyPress={[Function]}
                          pattern={null}
                          required={false}
                          step={null}
                          type="text"
                          value="cheat"
                        />
                      </SimpleInput>
                    </_default>
                  </FormElement>
                  <Underline
                    hasErrorMessage={false}
                    isFocused={false}
                  >
                    <div
                      aria-hidden={true}
                      className="css-ycal4l underline"
                    >
                      <div
                        className="css-1tpmuef"
                        style={
                          Object {
                            "borderBottomColor": "var(--color-primary, #fa5400)",
                            "transform": "scale3d(0,1,1)",
                          }
                        }
                      />
                    </div>
                  </Underline>
                </div>
              </TextField>
              <FormHelper
                element={
                  Object {
                    "actions": Array [
                      Object {
                        "params": Object {
                          "type": "fixed",
                          "value": "cheat",
                        },
                        "rules": Array [
                          Object {
                            "context": "foo",
                            "data": Array [
                              "default",
                            ],
                            "type": "notIn",
                          },
                        ],
                        "type": "setValue",
                      },
                    ],
                    "custom": false,
                    "default": "default",
                    "handleChange": [Function],
                    "id": "bar",
                    "label": "bar",
                    "type": "text",
                  }
                }
                elementName="foo_bar"
                errorText=""
                formName="foo"
              >
                <div
                  className="formHelper"
                >
                  <SurroundPortals
                    portalName="foo.bar.formHelper"
                    portalProps={
                      Object {
                        "element": Object {
                          "actions": Array [
                            Object {
                              "params": Object {
                                "type": "fixed",
                                "value": "cheat",
                              },
                              "rules": Array [
                                Object {
                                  "context": "foo",
                                  "data": Array [
                                    "default",
                                  ],
                                  "type": "notIn",
                                },
                              ],
                              "type": "setValue",
                            },
                          ],
                          "custom": false,
                          "default": "default",
                          "handleChange": [Function],
                          "id": "bar",
                          "label": "bar",
                          "type": "text",
                        },
                        "errorText": "",
                        "formName": "foo",
                      }
                    }
                  />
                </div>
              </FormHelper>
            </div>
          </ElementText>
        </Portal>
        <Portal
          name="foo.bar.after"
          props={
            Object {
              "element": Object {
                "actions": Array [
                  Object {
                    "params": Object {
                      "type": "fixed",
                      "value": "cheat",
                    },
                    "rules": Array [
                      Object {
                        "context": "foo",
                        "data": Array [
                          "default",
                        ],
                        "type": "notIn",
                      },
                    ],
                    "type": "setValue",
                  },
                ],
                "custom": false,
                "default": "default",
                "handleChange": [Function],
                "id": "bar",
                "label": "bar",
                "type": "text",
              },
              "errorText": "",
              "formName": "foo",
            }
          }
        />
      </div>
    </form>
  </Form>
</Builder>
`;
