// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Toast /> should call actionOnClick on action click 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Connect(Toast)
    actionButton={[Function]}
    container={[Function]}
    message={[Function]}
    onClose={[MockFunction]}
    toast={[Function]}
  >
    <Toast
      actionButton={[Function]}
      className={null}
      container={[Function]}
      dismissed={false}
      dispatchAction={[Function]}
      hasNextToast={false}
      message={[Function]}
      onClose={[MockFunction]}
      removeToast={[Function]}
      toast={
        Object {
          "action": "click me",
          "actionOnClick": [MockFunction],
          "duration": 2,
          "id": 5,
          "message": "hello world",
        }
      }
      unblockToast={[Function]}
    >
      <div
        aria-live="polite"
        aria-relevant="additions"
      >
        <Drawer
          alwaysActive={false}
          animation={
            Object {
              "duration": null,
              "in": "",
              "out": "",
            }
          }
          className={null}
          isOpen={true}
          onClose={[Function]}
          onDidClose={[Function]}
          onOpen={[Function]}
        >
          <div
            className="css-1rg7udn css-1dwe0qx"
            onAnimationEnd={[Function]}
            style={Object {}}
          >
            <MockContainer>
              <div>
                <MockMessage
                  text="hello world"
                >
                  <span>
                    hello world
                  </span>
                </MockMessage>
                <MockActionButton
                  onClick={[Function]}
                  text="click me"
                >
                  <button
                    onClick={[Function]}
                  >
                    click me
                  </button>
                </MockActionButton>
              </div>
            </MockContainer>
          </div>
        </Drawer>
      </div>
    </Toast>
  </Connect(Toast)>
</Provider>
`;

exports[`<Toast /> should call actionOnClick on action click 2`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Connect(Toast)
    actionButton={[Function]}
    container={[Function]}
    message={[Function]}
    onClose={
      [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    toast={[Function]}
  >
    <Toast
      actionButton={[Function]}
      className={null}
      container={[Function]}
      dismissed={false}
      dispatchAction={[Function]}
      hasNextToast={false}
      message={[Function]}
      onClose={
        [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        }
      }
      removeToast={[Function]}
      toast={
        Object {
          "action": "click me",
          "actionOnClick": [MockFunction] {
            "calls": Array [
              Array [
                [Function],
                [Function],
                undefined,
              ],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": undefined,
              },
            ],
          },
          "duration": 2,
          "id": 5,
          "message": "hello world",
        }
      }
      unblockToast={[Function]}
    >
      <div
        aria-live="polite"
        aria-relevant="additions"
      >
        <Drawer
          alwaysActive={false}
          animation={
            Object {
              "duration": null,
              "in": "",
              "out": "",
            }
          }
          className={null}
          isOpen={false}
          onClose={[Function]}
          onDidClose={[Function]}
          onOpen={[Function]}
        >
          <div
            className="css-1rg7udn css-pbiap8"
            onAnimationEnd={[Function]}
            style={Object {}}
          >
            <MockContainer>
              <div>
                <MockMessage
                  text="hello world"
                >
                  <span>
                    hello world
                  </span>
                </MockMessage>
                <MockActionButton
                  onClick={[Function]}
                  text="click me"
                >
                  <button
                    onClick={[Function]}
                  >
                    click me
                  </button>
                </MockActionButton>
              </div>
            </MockContainer>
          </div>
        </Drawer>
      </div>
    </Toast>
  </Connect(Toast)>
</Provider>
`;

exports[`<Toast /> should dispatch a toast message 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Connect(Toast)
    actionButton={[Function]}
    container={[Function]}
    message={[Function]}
    toast={[Function]}
  >
    <Toast
      actionButton={[Function]}
      className={null}
      container={[Function]}
      dismissed={false}
      dispatchAction={[Function]}
      hasNextToast={false}
      message={[Function]}
      onClose={[Function]}
      removeToast={[Function]}
      toast={
        Object {
          "action": null,
          "actionOnClick": null,
          "duration": 0,
          "id": 1,
          "message": "Toast Message",
        }
      }
      unblockToast={[Function]}
    >
      <div
        aria-live="polite"
        aria-relevant="additions"
      >
        <Drawer
          alwaysActive={false}
          animation={
            Object {
              "duration": null,
              "in": "",
              "out": "",
            }
          }
          className={null}
          isOpen={true}
          onClose={[Function]}
          onDidClose={[Function]}
          onOpen={[Function]}
        >
          <div
            className="css-1rg7udn css-1dwe0qx"
            onAnimationEnd={[Function]}
            style={Object {}}
          >
            <MockContainer>
              <div>
                <MockMessage
                  text="Toast Message"
                >
                  <span>
                    Toast Message
                  </span>
                </MockMessage>
              </div>
            </MockContainer>
          </div>
        </Drawer>
      </div>
    </Toast>
  </Connect(Toast)>
</Provider>
`;
