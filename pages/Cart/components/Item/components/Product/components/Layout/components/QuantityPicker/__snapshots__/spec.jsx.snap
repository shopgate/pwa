// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<QuantityPicker /> Given editMode prop is handled correctly should blur the input, if the editMode is disabled via prop 1`] = `
<QuantityPicker
  editMode={false}
  onChange={[Function]}
  onToggleEditMode={[Function]}
  quantity={1}
>
  <form
    onSubmit={[Function]}
  >
    <input
      className="css-7rhxrg"
      data-test-id="quantityPicker"
      min={1}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      type="number"
      value={1}
    />
  </form>
</QuantityPicker>
`;

exports[`<QuantityPicker /> Given editMode prop is handled correctly should focus the input, if the editMode is enabled via prop 1`] = `
<QuantityPicker
  editMode={true}
  onChange={[Function]}
  onToggleEditMode={[Function]}
  quantity={1}
>
  <form
    onSubmit={[Function]}
  >
    <input
      className="css-7rhxrg"
      data-test-id="quantityPicker"
      min={1}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      type="number"
      value={1}
    />
  </form>
</QuantityPicker>
`;

exports[`<QuantityPicker /> Given onChange callback is triggered correctly should not trigger the callback when the input didn't change 1`] = `
<QuantityPicker
  editMode={false}
  onChange={[MockFunction]}
  onToggleEditMode={[Function]}
  quantity={2}
>
  <form
    onSubmit={[Function]}
  >
    <input
      className="css-7rhxrg"
      data-test-id="quantityPicker"
      min={1}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      type="number"
      value={2}
    />
  </form>
</QuantityPicker>
`;

exports[`<QuantityPicker /> Given onChange callback is triggered correctly should trigger the callback when the input changed 1`] = `
<QuantityPicker
  editMode={false}
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          123,
        ],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  onToggleEditMode={[Function]}
  quantity={2}
>
  <form
    onSubmit={[Function]}
  >
    <input
      className="css-7rhxrg"
      data-test-id="quantityPicker"
      min={1}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      type="number"
      value={123}
    />
  </form>
</QuantityPicker>
`;

exports[`<QuantityPicker /> Given onToggleEditMode callback is triggered correctly should trigger the callback when the input was blurred 1`] = `
<QuantityPicker
  editMode={false}
  onChange={[Function]}
  onToggleEditMode={
    [MockFunction] {
      "calls": Array [
        Array [
          true,
        ],
        Array [
          false,
        ],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  quantity={1}
>
  <form
    onSubmit={[Function]}
  >
    <input
      className="css-7rhxrg"
      data-test-id="quantityPicker"
      min={1}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      type="number"
      value={1}
    />
  </form>
</QuantityPicker>
`;

exports[`<QuantityPicker /> Given onToggleEditMode callback is triggered correctly should trigger the callback when the input was focused 1`] = `
<QuantityPicker
  editMode={false}
  onChange={[Function]}
  onToggleEditMode={
    [MockFunction] {
      "calls": Array [
        Array [
          true,
        ],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  quantity={1}
>
  <form
    onSubmit={[Function]}
  >
    <input
      className="css-7rhxrg"
      data-test-id="quantityPicker"
      min={1}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      type="number"
      value={1}
    />
  </form>
</QuantityPicker>
`;

exports[`<QuantityPicker /> should fall back to its default of 1, if 0 is supplied 1`] = `
<QuantityPicker
  editMode={false}
  onChange={[Function]}
  onToggleEditMode={[Function]}
  quantity={0}
>
  <form
    onSubmit={[Function]}
  >
    <input
      className="css-7rhxrg"
      data-test-id="quantityPicker"
      min={1}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      type="number"
      value={1}
    />
  </form>
</QuantityPicker>
`;

exports[`<QuantityPicker /> should fall back to the previous value when the last value was invalid 1`] = `
<QuantityPicker
  editMode={false}
  onChange={[Function]}
  onToggleEditMode={[Function]}
  quantity={124}
>
  <form
    onSubmit={[Function]}
  >
    <input
      className="css-7rhxrg"
      data-test-id="quantityPicker"
      min={1}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      type="number"
      value={124}
    />
  </form>
</QuantityPicker>
`;

exports[`<QuantityPicker /> should have an amount of 1 by default 1`] = `
<QuantityPicker
  editMode={false}
  onChange={[Function]}
  onToggleEditMode={[Function]}
  quantity={1}
>
  <form
    onSubmit={[Function]}
  >
    <input
      className="css-7rhxrg"
      data-test-id="quantityPicker"
      min={1}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      type="number"
      value={1}
    />
  </form>
</QuantityPicker>
`;

exports[`<QuantityPicker /> should have an amount of 3 via prop 1`] = `
<QuantityPicker
  editMode={false}
  onChange={[Function]}
  onToggleEditMode={[Function]}
  quantity={3}
>
  <form
    onSubmit={[Function]}
  >
    <input
      className="css-7rhxrg"
      data-test-id="quantityPicker"
      min={1}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      type="number"
      value={3}
    />
  </form>
</QuantityPicker>
`;

exports[`<QuantityPicker /> should reset the amount to 1 if set to lower than 0 1`] = `
<QuantityPicker
  editMode={false}
  onChange={[Function]}
  onToggleEditMode={[Function]}
  quantity={-1}
>
  <form
    onSubmit={[Function]}
  >
    <input
      className="css-7rhxrg"
      data-test-id="quantityPicker"
      min={1}
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      type="number"
      value={1}
    />
  </form>
</QuantityPicker>
`;
